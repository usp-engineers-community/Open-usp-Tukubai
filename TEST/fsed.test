#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of fsed
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=fsed # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
# TEST1
# 第１フィールドの tokyo を TOKYO に、第３フィールドの osaka をOSAKAに置換します。

cat << FIN > $tmp-in
tokyo 1234 tokyo 5678
osaka 1234 osaka 5678
FIN

cat << FIN > $tmp-ans
TOKYO 1234 tokyo 5678
osaka 1234 OSAKA 5678
FIN

${com} 's/tokyo/TOKYO/1' 's/osaka/OSAKA/3' $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
# TEST2
# 第１フィールドの tokyo を TOKYO に、第３フィールドの osaka をOSAKAに置換します。
# フィールド分割における連続空白/先頭空白/末尾空白の処理を確認

cat << FIN > $tmp-in
 tokyo  1234  tokyo  5678 
 osaka  1234  osaka  5678 
FIN

cat << FIN > $tmp-ans
TOKYO 1234 tokyo 5678
osaka 1234 OSAKA 5678
FIN

${com} 's/tokyo/TOKYO/1' 's/osaka/OSAKA/3' $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
# TEST3
# 全フィールドの tokyo を yokohama に置換します。

cat << FIN > $tmp-in
tokyo 1234 tokyo 5678
osaka 1234 osaka 5678
FIN

cat << FIN > $tmp-ans
yokohama 1234 yokohama 5678
osaka 1234 osaka 5678
FIN

${com} 's/tokyo/yokohama/g' $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
# TEST4
# 正規表現を使います。

cat << FIN > $tmp-in
Tokyo 1234
tokyo 5678
TOKYO 7777
FIN

cat << FIN > $tmp-ans
東京 1234
東京 5678
TOKYO 7777
FIN

${com} -e 's/^[Tt]okyo$/東京/1' $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
# TEST5
# 大文字/小文字を区別しない正規表現を使います。

cat << FIN > $tmp-ans
東京 1234
東京 5678
東京 7777
FIN

${com} -i 's/^tokyo$/東京/1' $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
# TEST6
# 複数の置換指定を使います。

cat << FIN > $tmp-ans
川崎 1234
横浜 5678
川崎 7777
FIN

${com} 's/tokyo/横浜/1' -i 's/tokyo/川崎/1' $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
# TEST7
# 置換指定の区切り文字 '/' を置換対象にする場合。

cat << FIN > $tmp-in
001 /home/MANUAL/TOOL/fsed.txt
FIN

cat << FIN > $tmp-ans
001 -home-MANUAL-TOOL-fsed.txt
FIN

${com} 's,/,-,2' $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7 error"

###########################################
# TEST8
# 標準入力ファイルを置換対象として複数の置換指定を使います。

cat << FIN > $tmp-in
Tokyo 1234
tokyo 5678
TOKYO 7777
FIN

cat << FIN > $tmp-ans
川崎 1234
横浜 5678
川崎 7777
FIN

cat $tmp-in | ${com} 's/tokyo/横浜/1' -i 's/tokyo/川崎/1' - >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8 error"

###########################################
# TEST9
# TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験
# 第１フィールドの tokyo を TOKYO に、第３フィールドの osaka をOSAKAに置換します。

cat << FIN > $tmp-in
tokyo 1234 tokyo 5678
osaka 1234 osaka 5678
FIN

cat << FIN > $tmp-ans
TOKYO 1234 tokyo 5678
osaka 1234 OSAKA 5678
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きUTF8ファイルCRLF
${com} 's/tokyo/TOKYO/1' 's/osaka/OSAKA/3' $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-1 error"

# BOM付きUTF8ファイルCR
${com} 's/tokyo/TOKYO/1' 's/osaka/OSAKA/3' $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-2 error"

# pipe接続

# BOM付きUTF8ファイルCRLF
cat $tmp-inBOMCRLF | ${com} 's/tokyo/TOKYO/1' 's/osaka/OSAKA/3' - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-3 error"

# BOM付きUTF8ファイルCR
cat $tmp-inBOMCR | ${com} 's/tokyo/TOKYO/1' 's/osaka/OSAKA/3' - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-4 error"

###########################################
# TEST10
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

# 濁音にNFD文字を使用している
cat << FIN > $tmp-in
りんご 1234 りんご abcd
バナナ 5678 バナナ efgh
ぶどう 7777 ぶどう ijkl
FIN

# 置換されなかったNFD文字はそのまま出力される
cat << FIN > $tmp-ans
apple 1234 りんご abcd
banana 5678 バナナ efgh
grape 7777 ぶどう ijkl
FIN

# 置換指定文字列にはNFC文字を使用している
${com} 's/りんご/apple/1' 's/バナナ/banana/1' 's/ぶどう/grape/1' $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
