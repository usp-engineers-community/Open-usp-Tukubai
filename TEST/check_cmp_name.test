#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of check_cmp_name
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=check_cmp_name # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
# TEST1
# タグ名とタグ名の比較

cat << FIN > $tmp-data
A 200
B 300
C _
D_001 3
D_002 2
D_003 1
E_001 1
E_002 2
E_003 3
FIN

cat << FIN > $tmp-ans
0
FIN

${com} 'A -le B' $tmp-data
echo $? >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
# TEST2
# タグ名とタグ名の比較

cat << FIN > $tmp-ans
A
B
FIN

${com} 'A -eq B' $tmp-data >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
# TEST3
# タグ名と数値の比較

cat << FIN > $tmp-ans
A
FIN

${com} 'A -gt 300' $tmp-data >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
# TEST4
# '_' の場合はチェックしない

cat << FIN > $tmp-ans
0
FIN

${com} 'C -ne 0' $tmp-data
echo $? >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
# TEST5
# 複数レコードも正しくチェックする

cat << FIN > $tmp-ans
D_001
E_001
FIN

${com} 'D -le E' $tmp-data >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
# TEST6
# TEST1の変型拡大版（AとBの値を変更した）
# BOM付きCRLFとBOM付きCRの試験
# タグ名とタグ名の比較

cat << FIN > $tmp-data
A 300
B 200
C _
D_001 3
D_002 2
D_003 1
E_001 1
E_002 2
E_003 3
FIN

cat << FIN > $tmp-ans
A
B
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-data $tmp-dataBOMCRLF $tmp-dataBOMCR

# BOM付きUTF8ファイルCRLF
${com} 'A -le B' $tmp-dataBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

# BOM付きUTF8ファイルCR
${com} 'A -le B' $tmp-dataBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

# pipe接続

# BOM付きUTF8ファイルCRLF
cat $tmp-dataBOMCRLF | ${com} 'A -le B' - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-3 error"

# BOM付きUTF8ファイルCR
cat $tmp-dataBOMCR | ${com} 'A -le B' - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-4 error"

###########################################
# TEST7
# TEST5の拡大版
# BOM付きCRLFとBOM付きCRの試験
# 複数レコードも正しくチェックする

cat << FIN > $tmp-data
A 200
B 300
C _
D_001 3
D_002 2
D_003 1
E_001 1
E_002 2
E_003 3
FIN

cat << FIN > $tmp-ans
D_001
E_001
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-data $tmp-dataBOMCRLF $tmp-dataBOMCR

# BOM付きUTF8ファイルCRLF
${com} 'D -le E' $tmp-dataBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-1 error"

# BOM付きUTF8ファイルCR
${com} 'D -le E' $tmp-dataBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-2 error"

# pipe接続

# BOM付きUTF8ファイルCRLF
cat $tmp-dataBOMCRLF | ${com} 'D -le E' - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-3 error"

# BOM付きUTF8ファイルCR
cat $tmp-dataBOMCR | ${com} 'D -le E' - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-4 error"

###########################################
# TEST8
# TEST1～TEST5の変型版
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

# nameファイルのname部はNFD 最後の3行のname部は半濁音
cat << FIN > $tmp-data
がぎぐげご 200
ざじずぜぞ 300
だぢづでど _
ばびぶべぼ_001 3
ばびぶべぼ_002 2
ばびぶべぼ_003 1
ぱぴぷぺぽ_001 1
ぱぴぷぺぽ_002 2
ぱぴぷぺぽ_003 3
FIN

# nameファイルのname部はNFD 最後の3行のname部は半濁音
# 3行目のdata部に検査をthroughさせるための文字列「ゔ」（NFD）を置いた
cat << FIN > $tmp-data-through
がぎぐげご 200
ざじずぜぞ 300
だぢづでど ゔ
ばびぶべぼ_001 3
ばびぶべぼ_002 2
ばびぶべぼ_003 1
ぱぴぷぺぽ_001 1
ぱぴぷぺぽ_002 2
ぱぴぷぺぽ_003 3
FIN

cat << FIN > $tmp-ans1
0
FIN

# 出力されるname部はNFC化される
cat << FIN > $tmp-ans2
がぎぐげご
ざじずぜぞ
FIN

# 出力されるname部はNFC化される
cat << FIN > $tmp-ans3
がぎぐげご
FIN

# 出力されるname部はNFC化される
cat << FIN > $tmp-ans5
ばびぶべぼ_001
ぱぴぷぺぽ_001
FIN

# タグ名とタグ名の比較

# 比較expressionの両辺はともにNFC
${com} 'がぎぐげご -le ざじずぜぞ' $tmp-data
echo $? >$tmp-out
diff $tmp-ans1 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-1 error"

# 比較expressionの両辺はともにNFC
${com} 'がぎぐげご -eq ざじずぜぞ' $tmp-data >$tmp-out
diff $tmp-ans2 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-2 error"

# タグ名と数値の比較
# 比較expressionの左辺はNFC
${com} 'がぎぐげご -gt 300' $tmp-data >$tmp-out
diff $tmp-ans3 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-3 error"

# nameファイルのdata部が'_' または--through指定の文字列の場合はチェックしない

# 比較expressionの左辺と--through指定の「ゔ」はNFC  $tmp-data-through中の「ゔ」はNFD
${com} 'だぢづでど -ne 0' --through ゔ $tmp-data-through
echo $? >$tmp-out
diff $tmp-ans1 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-4 error"

# 複数レコードも正しくチェックする

# 比較expressionの左辺「ばびぶべぼ」は濁音NFC 右辺「ぱぴぷぺぽ」は半濁音NFC
${com} 'ばびぶべぼ -le ぱぴぷぺぽ' $tmp-data >$tmp-out
diff $tmp-ans5 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-5 error"

###########################################
# TEST9
# TEST1～TEST5の変型版
# 文字列の「ゆるい一致」の試験

# nameファイル（$tmp-data）
# 「齋藤」と「渡邉󠄐」は「齋」と「渡」についてUCSとIVSの両方がある
cat << FIN > $tmp-data
齋藤 10
齋󠄄藤 20
齋󠄅藤 30
齋󠄆藤 40
齋藤_001 10
齋󠄄藤_002 20
齋󠄅藤_003 30
齋󠄆藤_004 40
渡邉󠄐 15
渡邉󠄑 25
渡邉󠄒 35
渡邉 45
渡邉󠄐_001 15
渡邉󠄑_002 25
渡邉󠄒_003 35
渡邉_004 45
FIN

# $tmp-dataの内容説明（行の順は同じ）
#齋藤 10 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤 20 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤 40 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
#齋藤_001 10 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤_002 20 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤_003 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤_004 40 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
#渡邉󠄐 15 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS
#渡邉󠄑 25 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒 35 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉 45 渡(U+6E21)邉(U+9089) UCS
#渡邉󠄐_001 15 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS
#渡邉󠄑_002 25 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒_003 35 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉_004 45 渡(U+6E21)邉(U+9089) UCS

cat << FIN > $tmp-ans1
齋藤
渡邉󠄑
齋藤
渡邉
齋󠄅藤
渡邉
FIN

# $tmp-ans1のtagの元の情報
#齋藤 10 齋(U+9F4B)藤(U+85E4) UCS
#渡邉󠄑 25 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#齋藤 10 齋(U+9F4B)藤(U+85E4) UCS
#渡邉 45 渡(U+6E21)邉(U+9089) UCS
#齋󠄅藤 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#渡邉 45 渡(U+6E21)邉(U+9089) UCS

# タグ名とタグ名の比較

# 比較expressionの両辺にはともにIVSを使用
# '齋󠄅藤 -gt 渡邉󠄑'において
# 「齋󠄅藤」は「齋󠄅(U+9F4B;U+E0105)藤(U+85E4)」でIVS
# 「渡邉󠄑」は「渡(U+6E21)邉󠄑(U+9089;U+E0111)」でIVS
# 比較対象となるのはtagの前方部分の一致では
#齋藤 10 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄅藤 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄅藤_003 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#渡邉󠄑 25 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉 45 渡(U+6E21)邉(U+9089) UCS
#渡邉_004 45 渡(U+6E21)邉(U+9089) UCS
# の6件の間だが
#齋󠄅藤_003 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#渡邉_004 45 渡(U+6E21)邉(U+9089) UCS
#の2件はtagの後半部分の不一致で比較対象から徐外される

${com} '齋󠄅藤 -gt 渡邉󠄑' $tmp-data >$tmp-out
diff $tmp-ans1 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-1 error"

# タグ名と数値の比較

# '齋藤 -lt 25'において
# 「齋藤」は「齋(U+9F4B)藤(U+85E4)」でUCS
# 比較が行なれわれる対象は
#齋藤 10 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤 20 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤 40 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
#齋藤_001 10 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤_002 20 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤_003 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤_004 40 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
# の8件

cat << FIN > $tmp-ans2
齋󠄅藤
齋󠄆藤
齋󠄅藤_003
齋󠄆藤_004
FIN

# $tmp-ans2のtagの元の情報
#齋󠄅藤 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤 40 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
#齋󠄅藤_003 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤_004 40 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS

${com} '齋藤 -lt 25' $tmp-data >$tmp-out
diff $tmp-ans2 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-2 error"

# 数値とタグ名との比較

# '30 -gt 渡邉󠄑'において
# 「渡邉󠄑」は「渡(U+6E21)邉󠄑(U+9089;U+E0111)」はIVS
# 比較が行なれわれる対象は
#渡邉󠄑 25 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉 45 渡(U+6E21)邉(U+9089) UCS
#渡邉󠄑_002 25 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉_004 45 渡(U+6E21)邉(U+9089) UCS
# の4件

cat << FIN > $tmp-ans3
渡邉
渡邉_004
FIN

# $tmp-ans3のtagの元の情報
#渡邉 45 渡(U+6E21)邉(U+9089) UCS
#渡邉_004 45 渡(U+6E21)邉(U+9089) UCS

${com} '30 -gt 渡邉󠄑' $tmp-data >$tmp-out
diff $tmp-ans3 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-3 error"

# nameファイルのdata部が'_' または--through指定の文字列の場合はチェックしない

# nameファイル（$tmp-data）
# 「齋藤」と「渡邉󠄐」は「齋」と「渡」についてUCSとIVSの両方がある
# 「邉󠄑」=「邉󠄑(U+9089;U+E0111)」と「齋󠄅」「齋󠄅(U+9F4B;U+E0105)」をthrough文字列に指定する
cat << FIN > $tmp-data
齋藤 10
齋󠄄藤 20
齋󠄅藤 邉󠄑
齋󠄆藤 40
齋藤_001 10
齋󠄄藤_002 20
齋󠄅藤_003 30
齋󠄆藤_004 40
渡邉󠄐 15
渡邉󠄑 25
渡邉󠄒 35
渡邉 齋󠄅
渡邉󠄐_001 15
渡邉󠄑_002 25
渡邉󠄒_003 35
渡邉_004 45
FIN

# $tmp-dataの内容説明（行の順は同じ）
#齋藤 10 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤 20 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤 邉󠄑 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS （邉󠄑(U+9089;U+E0111)はthrough文字列）
#齋󠄆藤 40 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
#齋藤_001 10 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤_002 20 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤_003 30 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤_004 40 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
#渡邉󠄐 15 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS
#渡邉󠄑 25 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒 35 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉 齋󠄅  渡(U+6E21)邉(U+9089) UCS （齋󠄅(U+9F4B;U+E0105)はthrough文字列）
#渡邉󠄐_001 15 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS
#渡邉󠄑_002 25 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒_003 35 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉_004 45 渡(U+6E21)邉(U+9089) UCS

cat << FIN > $tmp-ans4
齋藤
渡邉󠄑
FIN

# $tmp-ans4のtagの元の情報
#齋藤 10 齋(U+9F4B)藤(U+85E4) UCS
#渡邉󠄑 25 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS

# コマンドパラメータのthrough文字列
#「齋󠄅」は「齋󠄅(U+9F4B;U+E0105)」でIVS
#「渡」は「邉󠄑(U+9089;U+E0111)」でIVS

${com} '齋󠄅藤 -gt 渡邉󠄑' --through 邉󠄑 --through 齋󠄅 $tmp-data >$tmp-out
diff $tmp-ans4 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TES9-4 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
