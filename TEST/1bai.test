#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of 1bai
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=1bai # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r\n/g' -e 's/$/\r/' $1 >$2	# $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r/g' $1 | tr '\n' '\r' >$3	# $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
# TEST1
# 1フィールド目の頭 "0" を取り去ります。

cat << FIN > $tmp-in
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 20 M 82 79 16 21 80
0000007 梶川______ 42 F 50 2  33 15 62
FIN

cat << FIN > $tmp-ans
0 浜地______ 50 F 91 59 20 76 54
1 鈴田______ 50 F 46 39 8 5 21
3 杉山______ 26 F 30 50 71 36 30
4 白土______ 40 M 58 71 20 10 6
5 崎村______ 20 M 82 79 16 21 80
7 梶川______ 42 F 50 2 33 15 62
FIN

${com} 1 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
# TEST2
# -r (reverse) オプションをつけると-1倍します。

cat << FIN > $tmp-file
a 1 2 3 4 5
b 1 2 3 4 5
FIN

cat << FIN > $tmp-ans
a -1 2 3 4 5
b -1 2 3 4 5
FIN
${com} -r 2 $tmp-file > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"

cat << FIN > $tmp-ans
a -1 -2 -3 4 5
b -1 -2 -3 4 5
FIN

${com} -r 2/4 $tmp-file >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

cat << FIN > $tmp-ans
a -1 2 3 -4 -5
b -1 2 3 -4 -5
FIN

${com} -r 2 NF-1/NF $tmp-file >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-3 error"

###########################################
# TEST3
# キーフィールドの列挙指定と範囲指定の連続混用および重複指定解消の試験
# フィールド番号0による全フィールド指定の試験
# フィールド番号省略による全フィールド指定の試験

cat << FIN > $tmp-file
a 1 2 3 4 5
b 1 2 3 4 5
FIN

cat << FIN > $tmp-ans
a -1 2 3 -4 -5
b -1 2 3 -4 -5
FIN

${com} -r 2 NF-1/NF 2 5@6 $tmp-file >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

cat << FIN > $tmp-ans
a -1 -2 -3 4 5
b -1 -2 -3 4 5
FIN

${com} -r 2/4 2@3@4 $tmp-file >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

${com} -r 2/4@2@3@NF-2 2@3@4@NF-2/2 $tmp-file >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-3 error"

# フィールド指定にひとつでも0があると全フィールドを指定したことになる

cat << FIN > $tmp-file
01 02 03 04 05
001 002 003 004 005
FIN

cat << FIN > $tmp-ans
-1 -2 -3 -4 -5
-1 -2 -3 -4 -5
FIN

${com} -r 1 2 0 4 3 $tmp-file >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-4 error"

# フィールド指定を省略すると全フィールドを指定したことになる

cat << FIN > $tmp-ans
1 2 3 4 5
1 2 3 4 5
FIN

${com} $tmp-file >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-5 error"

###########################################
# TEST4
# -d オプションはダイレクトモードです。引数に直接編集したい文字列を指定します。

cat << FIN > $tmp-ans
123
FIN

${com} -d 0123 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

cat << FIN > $tmp-ans
123.4
FIN

${com} -d 0123.400 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

cat << FIN > $tmp-ans
123
FIN

${com} -d 0123.000 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-3 error"

cat << FIN > $tmp-ans
0
FIN

${com} -d 0 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-4 error"

cat << FIN > $tmp-ans
-123.4
FIN

${com} -d -000123.400 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-5 error"

cat << FIN > $tmp-ans
123.4
FIN

${com} -d +000123.400 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-6 error"

cat << FIN > $tmp-ans
-123
FIN

${com} -dr 0123 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-7 error"

###########################################
# TEST5
# 前０をとることにより、シェルや awk の printf 文における８進数への自動置換を無効にします。

cat << FIN > $tmp-ans
0010
FIN

num=010   # <- ８進数と解釈されてしまう

printf '%04d\n' $(${com} -d $num) >$tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
# TEST6
# 固定長テキストから変換されたデータは、符号や前０後０がついたものが多く、1bai コマンドが役立ちます。

cat << FIN > $tmp-file
a 000123.000 000345.000
b 000098.450 000100.000
FIN

cat << FIN > $tmp-ans
a 123 345
b 98.45 100
FIN

${com} 2 3 $tmp-file > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
#TEST7
# -d指定で4バイト文字（Unicode符号位置がU+FFFF超の文字）を与える
# 数値を表わさない文字列を与えるのでエラーとなる

cat << FIN > $tmp-errmsg
Error[1bai] : 0𠆢123は数値ではありません
FIN

${com} -d 0𠆢123 >$tmp-out 2>$tmp-err

# 「𠆢」は𠆢(U+201A2)代用対では𠆢(U+D840-U+DDA2)

diff $tmp-err $tmp-errmsg
[ $? -eq 0 ] ; ERROR_CHECK "TEST7 error"

###########################################
# TEST8
# TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験
# 1フィールド目の頭 "0" を取り去ります。

cat << FIN > $tmp-in
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 20 M 82 79 16 21 80
0000007 梶川______ 42 F 50 2  33 15 62
FIN

cat << FIN > $tmp-ans
0 浜地______ 50 F 91 59 20 76 54
1 鈴田______ 50 F 46 39 8 5 21
3 杉山______ 26 F 30 50 71 36 30
4 白土______ 40 M 58 71 20 10 6
5 崎村______ 20 M 82 79 16 21 80
7 梶川______ 42 F 50 2 33 15 62
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きCRLF
${com} 1 $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-1 error"

# BOM付きCR
${com} 1 $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF | ${com} 1 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-3 error"

# BOM付きCR
cat $tmp-inBOMCR | ${com} 1 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-4 error"

############################################
#TEST9
# 不要な空白の除去
cat << FIN > $tmp-in
   a  01   02    03 04 05    
 b   001   002    003  004 005   
FIN

cat << FIN > $tmp-ans
a 1 2 3 4 5
b 1 2 3 4 5
FIN

${com} 2 3 4 5 6 $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-1 error"

# 全角空白は区切り文字とはしない
# $tmp-in2の第1行は「 □a 01 □ 03 04 05 06 □」（□は全角空白を表わす）で8つのフィ-ルドからなる
# $tmp-ans2の第1行は「□a 1 □ 2 3 4 5 □」（□は全角空白を表わす）

cat << FIN > $tmp-in2
 　a 01 　 03 04 05 06 　
 b 001 002 003 004 005 006 007
FIN

cat << FIN > $tmp-ans2
　a 1 　 3 4 5 6 　
b 1 002 3 4 5 6 007
FIN

${com} 2 4/7 $tmp-in2 >$tmp-out
diff $tmp-ans2 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
