#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of zen
#
# usage: [<test-path>/]zen.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=zen # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
# バックスラッシュ/チルダ/円記号/オーバーラインの変換について
# ISO646日本版(JIS X 0201)において
# ASCII文字コードのIRV(International Reference Version)で
#  バックスラッシュ(0x5C)を円記号に
#  チルダ(0x7E)をオーバーラインに
# 設定しているが
# zenではUnicode半角全角対応表に従って
#  バックスラッシュとチルダについて
#  「\」(U+005C)半角バックスラッシュ→「＼」(U+FF3C)全角バックスラッシュ
#  「~」(U+007E)半角チルダ→「～」(U+FF5E)全角チルダ
# の変換をする
#  円記号とオーバーラインについては
#  「¥」(U+00A5)半角円記号→「￥」(U+FFE5)全角円記号
#  「‾」(U+203E)半角オーバーライン→「￣」(U+FFE3)全角オーバーライン
# の変換をする
#  マクロンについては
#  「¯」(U+00AF)半角マクロン→「￣」(U+FFE3)全角マクロン
# の変換をする
# ここで
#    使用するフォントによってはU+005Cは円記号に見えることがある
#    Unicode半角全角対応表でのU+FFE3の正式名称は「全角マクロン」であり「全角オーバーライン」は仮称である
#    「‾」(U+203E)半角オーバーラインと「¯」(U+00AF)半角マクロンの全角形はいずれも「￣」(U+FFE3)である

###########################################
#TEST1
#「¥」→「￥」の変換試験

cat << FIN > $tmp-in
ｱｲｳ¥
aBC
FIN

cat << FIN > $tmp-ans
アイウ￥
ａＢＣ
FIN

# 「¥」（U+00a5）半角円記号→「￥」（U+ffe5）全角円記号
${com} $tmp-in > $tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
#TEST2
# フィールド指定

cat << FIN > $tmp-in
001 abcｱｲｳ ｴｵxyz
FIN

cat << FIN > $tmp-ans
001 ａｂｃアイウ ｴｵxyz
FIN

${com} 2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"

cat $tmp-in | ${com} 2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

cat << FIN > $tmp-in
001 abcｱｲｳ ｴｵxyz 123 456 789
FIN

cat << FIN > $tmp-ans
001 ａｂｃアイウ ｴｵxyz １２３ ４５６ 789
FIN

${com} 2 5/4 2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-3 error"

###########################################
#TEST2k
# -k指定

cat << FIN > $tmp-in
001 abcｱｲｳ ｴｵxyz
FIN

cat << FIN > $tmp-ans
001 abcアイウ エオxyz
FIN

${com} -k $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2k-1 error"

cat $tmp-in | ${com} -k > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2k-2 error"

###########################################
#TEST3
# 「\」→「＼」の変換試験
# 「~」→「～」の変換試験

cat << FIN > $tmp-in
ｱｲｳ\\~
aBC
FIN

cat << FIN > $tmp-ans
アイウ＼～
ａＢＣ
FIN

# 「\」（U+005C）半角バックスラッシュ→「＼」（U+ff3c）全角バックスラッシュ
# 「~」（U+007E）半角チルダ→「～」（U+ff5e）全角チルダ
${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4
# -d指定

cat << FIN > $tmp-ans
００１　ａｂｃアイウ＼　エオｘｙｚ
FIN

${com} -d "001 abcｱｲｳ\\ ｴｵxyz" > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
#TEST5
# 半角英数記号→全角英数記号の全試験

cat << FIN > $tmp-in
 !"#$%&'()*+,-./
0123456789:;<=>?
@ABCDEFGHIJKLMNO
PQRSTUVWXYZ[\\]^_
\`abcdefghijklmno
pqrstuvwxyz{|}~
FIN

cat << FIN > $tmp-ans
　！＂＃＄％＆＇（）＊＋，－．／
０１２３４５６７８９：；＜＝＞？
＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯ
ＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿
｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏ
ｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～
FIN

# 「\」（U+005C）半角バックスラッシュ→「＼」（U+ff3c）全角バックスラッシュ
# 「~」（U+007E）半角チルダ→「～」（U+ff5e）全角チルダ
${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6
# 半角カタカナ記号→全角カタカナ記号の全試験

cat << FIN > $tmp-in
ｱ ｲ ｳ ｴ ｵ
ｶ ｷ ｸ ｹ ｺ
ｻ ｼ ｽ ｾ ｿ
ﾀ ﾁ ﾂ ﾃ ﾄ
ﾅ ﾆ ﾇ ﾈ ﾉ
ﾊ ﾋ ﾌ ﾍ ﾎ
ﾏ ﾐ ﾑ ﾒ ﾓ
ﾔ ﾕ ﾖ
ﾗ ﾘ ﾙ ﾚ ﾛ
ﾜ ｦ ﾝ
ｳﾞ
ｶﾞ ｷﾞ ｸﾞ ｹﾞ ｺﾞ
ｻﾞ ｼﾞ ｽﾞ ｾﾞ ｿﾞ
ﾀﾞ ﾁﾞ ﾂﾞ ﾃﾞ ﾄﾞ
ﾊﾞ ﾋﾞ ﾌﾞ ﾍﾞ ﾎﾞ
ﾊﾟ ﾋﾟ ﾌﾟ ﾍﾟ ﾎﾟ
ｧ ｨ ｩ ｪ ｫ
ｬ ｭ ｮ ｯ
｡ ｢ ｣ ､ ･ ｰ ﾞ ﾟ
ｶﾟ ｷﾟ ｸﾟ ｹﾟ ｺﾟ
ｾﾟ ﾂﾟ ﾄﾟ
ﾜﾞ ｦﾞ
FIN

cat << FIN > $tmp-ans
ア　イ　ウ　エ　オ
カ　キ　ク　ケ　コ
サ　シ　ス　セ　ソ
タ　チ　ツ　テ　ト
ナ　ニ　ヌ　ネ　ノ
ハ　ヒ　フ　ヘ　ホ
マ　ミ　ム　メ　モ
ヤ　ユ　ヨ
ラ　リ　ル　レ　ロ
ワ　ヲ　ン
ヴ
ガ　ギ　グ　ゲ　ゴ
ザ　ジ　ズ　ゼ　ゾ
ダ　ヂ　ヅ　デ　ド
バ　ビ　ブ　ベ　ボ
パ　ピ　プ　ペ　ポ
ァ　ィ　ゥ　ェ　ォ
ャ　ュ　ョ　ッ
。　「　」　、　・　ー　゛　゜
カ゚　キ゚　ク゚　ケ゚　コ゚
セ゚　ツ゚　ト゚
ヷ　ヺ
FIN

${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
#TEST7
# 半角ハングル→全角ハングルの全試験

cat << FIN > $tmp-in
ﾠﾡﾢﾣﾤﾥﾦﾧﾨﾩﾪﾫﾬﾭﾮﾯ
ﾰﾱﾲﾳﾴﾵﾶﾷﾸﾹﾺﾻﾼﾽﾾￂ
ￃￄￅￆￇￊￋￌￍￎￏￒￓￔￕￖ
ￗￚￛￜ
FIN

cat << FIN > $tmp-ans
ㅤㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿ
ㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏ
ㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟ
ㅠㅡㅢㅣ
FIN

${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7 error"

###########################################
#TEST8
# その他半角記号→その他全角記号の全試験

cat << FIN > $tmp-in
¢£¬‾¯¦¥₩
￨￩￪￫￬￭￮
FIN

cat << FIN > $tmp-ans
￠￡￢￣￣￤￥￦
│←↑→↓■○
FIN

# 「‾」半角オーバーライン（U+203e）→「￣」全角オーバーライン（U+ffe3）
# 「¯」半角マクロン（U+00af）→「￣」全角マクロン（U+ffe3）
# 「¥」（U+00a5）半角円記号→「￥」（U+ffe5）全角円記号
${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8 error"

###########################################
#TEST9
# 4バイト文字（Unicode符号位置がU+FFFF超の文字）を与える

cat <<FIN >$tmp-in
001 abcｱｲｳ\\𠆢 ｴｵxyz
FIN

cat << FIN > $tmp-ans
００１　ａｂｃアイウ＼𠆢　エオｘｙｚ
FIN

# 「𠆢」は𠆢(U+201A2)代用対では𠆢(U+D840-U+DDA2)

${com} $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9 error"

###########################################
#TEST10
# -d指定で4バイト文字（Unicode符号位置がU+FFFF超の文字）を与える

cat << FIN > $tmp-ans
００１　ａｂｃアイウ＼𠆢　エオｘｙｚ
FIN

# 「𠆢」は𠆢(U+201A2)代用対では𠆢(U+D840-U+DDA2)

${com} -d "001 abcｱｲｳ\\𠆢 ｴｵxyz" > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10 error"

###########################################
#TEST11
#TEST1の拡大版
# BOM付き/BOM無しと改行記号CRLF/CR/LFの試験
#「¥」→「￥」の変換試験

cat << FIN > $tmp-in
ｱｲｳ¥
aBC
FIN

cat << FIN > $tmp-ans
アイウ￥
ａＢＣ
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# 「¥」（U+00a5）半角円記号→「￥」（U+ffe5）全角円記号

# BOM付き/BOM無しと改行記号CRLF/CR/LFの検査

# BOM付きCRLF
${com} $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST11-1 error"

# BOM付きCR
${com} $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST11-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF | ${com} - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST11-3 error"

# BOM付きCR
cat $tmp-inBOMCR | ${com} - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST11-4 error"

###########################################
#TEST12
# TEST2の変型版
# キー指定の試験
#  キー指定に使用できる記号
#    /   a/bでフィールド番号aからフィールド番号bまでの区間を指定する a<=bの正順でもa>=bの逆順でもよい
#    NF  入力行にあるフィールドの数を表わす NF-nとすると最後（最右端）のフィールドから数えてn番前のフィールドを意味する
#    @   単一のフィールドまたはフィールド区間を連接するための区切りに使用する 複数回の連接もできる
#  指定したフィールドに重複があっても単一化される

cat << FIN > $tmp-in
001 abcｱｲｳ ｴｵxyz 123 456 789
FIN

cat << FIN > $tmp-ans
001 ａｂｃアイウ ｴｵxyz １２３ ４５６ 789
FIN

# コマンドの説明
# フィールド指定の「NF-1/NF-2@2 NF-4@4」はNF=6なので「5と4と2と4と4」となり重複を解消して整理すると「2と4と5」となる

${com} NF-1/NF-2@2 NF-4@4 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST12 error"

############################################
#TEST13
# TEST2の変型版
# 「全フィールドの全角化」と「行全体の全角化」の試験
# 「全フィールドの全角化」はフィールド指定に0を指定することによって実行する
#   行頭と行末にある半角空白は削除され中間にある区切りの半角空白は連続していれば単一の半角空白にされる
#   区切りとなる半角空白はそのまま半角で出力される
# 「行全体の全角化」はフィールド指定を省略することによって実行し
#   行頭と行末にある半角空白や連続する半角空白もそのまま全角化される

# フィールド指定にひとつでも0があると全フィールドを指定したことになる

cat << FIN > $tmp-in
 001 abcｱｲｳ  ｴｵxyz 123 456 ７８９ 
FIN
# $tmp-ansの1行の半角空白と全角空白を"#"と"＝"であらわして「」でくくると
#  「#001#abcｱｲｳ##ｴｵxyz#123#456#７８９#」

cat << FIN > $tmp-ans
００１ ａｂｃアイウ エオｘｙｚ １２３ ４５６ ７８９
FIN
# $tmp-ansの1行の半角空白と全角空白を"#"と"＝"であらわして「」でくくると
#  「００１#ａｂｃアイウ#エオｘｙｚ#１２３#４５６#789」

${com} 2 5/4 2 0 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST13-1 error"

# フィールド指定を省略すると全フィールドを指定したことになる

cat << FIN > $tmp-in
 001  abcｱｲｳ ｴｵxyz  123 456 ７８９ 
FIN
# $tmp-inの1行の半角空白と全角空白を"#"と"＝"であらわして「」でくくると
#  「#001##abcｱｲｳ#ｴｵxyz##123#456#７８９#」

cat << FIN > $tmp-ans
　００１　　ａｂｃアイウ　エオｘｙｚ　　１２３　４５６　７８９　
FIN
# $tmp-inの1行の半角空白と全角空白を"#"と"＝"であらわして「」でくくると
#  「＝００１＝＝ａｂｃアイウ＝エオｘｙｚ＝＝１２３＝４５６＝７８９＝」

${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST13-2 error"

##########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
