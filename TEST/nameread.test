#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of nameread
#
# usage: [<test-path>/]nameread.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=nameread # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
cat << FIN > $tmp-name
A01 1
A02 2
A03 3
A10 5
FIN

###########################################
#TEST1: ordinaly use

ANS=$( ${com} A01 $tmp-name )
[ "${ANS}" = "1" ] ; ERROR_CHECK "TEST1 error"

###########################################
#TEST2: regular expression

cat << FIN > $tmp-ans
1
2
3
FIN

${com} -e '^A0[0-9]$' $tmp-name > $tmp-out

diff $tmp-ans $tmp-out ; ERROR_CHECK "TEST2 error"

###########################################
#TEST3: regular expression with output of names

cat << FIN > $tmp-ans
A01 1
A02 2
A03 3
FIN

${com} -el '^A0[0-9]$' $tmp-name > $tmp-out

diff $tmp-ans $tmp-out ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4: -d指定

cat << FIN > $tmp-name
A usp
B usp laboratory
C
FIN

cat << FIN > $tmp-ans
usp_laboratory
FIN

${com} -d_ B $tmp-name > $tmp-out

diff $tmp-ans $tmp-out ; ERROR_CHECK "TEST4 error"

###########################################
#TEST5
# -d指定で4バイト文字（Unicode符号位置がU+FFFF超の文字）を与える

cat << FIN > $tmp-ans
usp𠆢laboratory
FIN

# 「𠆢」は𠆢(U+201A2)代用対では𠆢(U+D840-U+DDA2)

${com} -d𠆢 B $tmp-name > $tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6
# -d指定でIVS文字列を与える（IVS文字列の長さ判定の検査も行なう）

cat << FIN > $tmp-ans
usp邊󠄊laboratory
FIN

cat <<FIN >$tmp-errmsg
Error[nameread] : dオプションの値が2文字以上です
FIN

${com} -d渡邊󠄊 B $tmp-name > $tmp-out 2>$tmp-err

# 文字列「渡邊󠄊」を与えるのでエラーとなる

diff $tmp-errmsg $tmp-err
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

${com} -d邊󠄊 B $tmp-name > $tmp-out 2>$tmp-err

# 文字「邊󠄊」は1文字なのでエラーとはならない

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

# 「邊󠄊」はIVSの例で邊󠄊(U+908A;U+E010A)代用対では邊󠄊(U+908A;U+DB40-U+DD0A)

###########################################
#TEST7
# -d指定でnullを与える

cat << FIN > $tmp-ans
usplaboratory
FIN

${com} -d B $tmp-name > $tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7 error"

###########################################
#TEST8
# -i指定でnullデータの初期値を与える

cat << FIN > $tmp-ans
NULL
FIN

${com} -iNULL C $tmp-name > $tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8 error"

###########################################
#TEST9
# -i指定でnullデータの初期値としてIVS文字列を与える

cat << FIN > $tmp-ans
渡邊󠄊
FIN

${com} -i渡邊󠄊 C $tmp-name > $tmp-out

# 「邊󠄊」はIVSの例で邊󠄊(U+908A;U+E010A)代用対では邊󠄊(U+908A;U+DB40-U+DD0A)

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9 error"

###########################################
#TEST10
#TEST2の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-name
A01 1
A02 2
A03 3
A10 5
FIN

cat << FIN > $tmp-ans
1
2
3
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-name $tmp-nameBOMCRLF $tmp-nameBOMCR

# BOM付きCRLF
${com} -e '^A0[0-9]$' $tmp-nameBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-1 error"

# BOM付きCR
${com} -e '^A0[0-9]$' $tmp-nameBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-nameBOMCRLF | ${com} -e '^A0[0-9]$' - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-3 error"

# BOM付きCR
cat $tmp-nameBOMCR | ${com} -e '^A0[0-9]$' - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-4 error"

###########################################
#TEST11: regular expression
# TEST2の変形版
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する


# $tmp-name1の「がぎぐげご」はNFD
cat << FIN > $tmp-name1
がぎぐげご01 1
がぎぐげご02 2
がぎぐげご03 3
がぎぐげご10 5
FIN

# $tmp-name2の「がぎぐげご」はNFC
cat << FIN > $tmp-name2
がぎぐげご01 1
がぎぐげご02 2
がぎぐげご03 3
がぎぐげご10 5
FIN

cat << FIN > $tmp-ans
1
2
3
FIN

# 正規表現中の「がぎぐげご」はNFC
${com} -e '^がぎぐげご0[0-9]$' $tmp-name1 > $tmp-out
diff $tmp-ans $tmp-out ; ERROR_CHECK "TEST11-1 error"

# 正規表現中の「がぎぐげご」はNFD
${com} -e '^がぎぐげご0[0-9]$' $tmp-name2 > $tmp-out
diff $tmp-ans $tmp-out ; ERROR_CHECK "TEST11-1 error"

###########################################
#TEST12: regular expression
# TEST2の変形版
# 文字列の「ゆるい一致」の試験

cat << FIN > $tmp-name
齋藤 齋(U+9F4B)藤(U+85E4) UCS
齋󠄄藤 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
齋󠄅藤 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
齋󠄆藤 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
渡邉󠄐 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS
渡邉󠄑 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
渡邉󠄒 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
渡邉 渡(U+6E21)邉(U+9089) UCS
FIN

cat << FIN > $tmp-ans1
齋藤 齋(U+9F4B)藤(U+85E4) UCS
齋󠄆藤 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
FIN

cat << FIN > $tmp-ans2
齋藤 齋(U+9F4B)藤(U+85E4) UCS
齋󠄄藤 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
齋󠄅藤 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
齋󠄆藤 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
FIN

cat << FIN > $tmp-ans3
渡邉󠄐 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS
渡邉 渡(U+6E21)邉(U+9089) UCS
FIN

cat << FIN > $tmp-ans4
渡邉󠄐 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS
渡邉󠄑 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
渡邉󠄒 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
渡邉 渡(U+6E21)邉(U+9089) UCS
FIN

# 指定する名前部の「齋󠄆藤」はIVSで「齋󠄆(U+9F4B;U+E0106)藤(U+85E4)」nameファイル中の対応するIVSと「ゆるい一致」でUCSの「齋(U+9F4B)藤(U+85E4)UCS」をhitする
${com} -l '齋󠄆藤' $tmp-name > $tmp-out
diff $tmp-ans1 $tmp-out ; ERROR_CHECK "TEST12-1 error"

# 指定する名前部の「齋藤」はUCSで「齋(U+9F4B)藤(U+85E4)」nameファイル中の対応するUCSと「ゆるい一致」で「齋(U+9F4B)」を基底文字とするすべてのIVSをhitする
${com} -l '齋藤' $tmp-name > $tmp-out
diff $tmp-ans2 $tmp-out ; ERROR_CHECK "TEST12-2 error"

# 指定する名前部の「渡邉󠄐」は「渡(U+6E21)邉󠄐(U+9089;U+E0110)」はIVSでnameファイル中の対応するIVSと「ゆるい一致」でUCSの「渡(U+6E21)邉(U+9089)」をhitする
${com} -l '渡邉󠄐' $tmp-name > $tmp-out
diff $tmp-ans3 $tmp-out ; ERROR_CHECK "TEST12-3 error"

# 指定する名前部の「渡邉」は「渡(U+6E21)邉(U+9089)」はUCSでnameファイル中の対応するUCSと「ゆるい一致」で「邉(U+9089)」を基底文字とするすべてのIVSをhitする
${com} -l '渡邉' $tmp-name > $tmp-out
diff $tmp-ans4 $tmp-out ; ERROR_CHECK "TEST12-4 error"

###########################################
rm $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
