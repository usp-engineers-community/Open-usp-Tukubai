#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of join2
#
# usage: [<test-path>/]join2.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=join2 # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 A
0000004 B
FIN

cat << FIN > $tmp-ans
0000000 * 浜地______ 50 F 91 59 20 76 54
0000001 A 鈴田______ 50 F 46 39 8 5 21
0000003 * 杉山______ 26 F 30 50 71 36 30
0000004 B 白土______ 40 M 58 71 20 10 6
0000005 * 崎村______ 50 F 82 79 16 21 80
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

# tranのキーフィールドが「重複のある昇順」になっている例で実行は正常終了する

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000001 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 A
0000004 B
FIN

cat << FIN > $tmp-ans
0000000 * 浜地______ 50 F 91 59 20 76 54
0000001 A 鈴田______ 50 F 46 39 8 5 21
0000001 A 杉山______ 26 F 30 50 71 36 30
0000004 B 白土______ 40 M 58 71 20 10 6
0000005 * 崎村______ 50 F 82 79 16 21 80
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-2 error"

# masterのキーフィールドが「重複のない昇順」になっていない例

cat << FIN > $tmp-abc
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 A
0000004 B
0000004 C
FIN

# TEST1で「masterのキーフィールドが「重複のない昇順」になっていない例」を実行しエラーメッセージが出るように設定されている

${com} key=1 $tmp-master $tmp-tran > $tmp-out 2> /dev/null

# tranのキーフィールドが「昇順」になっていない例

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000000 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 A
0000004 B
FIN

# TEST1で「tranのキーフィールドが「昇順」になっていない例」を実行しエラーメッセージが出るように設定されている

${com} key=1 $tmp-master $tmp-tran > $tmp-out 2> /dev/null

###########################################
#TEST2
# dummy文字列の使用

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 xxx
0000002 AAAAA
0000004 yyyy
0000006 BB
FIN

cat << FIN > $tmp-ans
0000000 *** 浜地______ 50 F 91 59 20 76 54
0000001 xxx 鈴田______ 50 F 46 39 8 5 21
0000003 *** 杉山______ 26 F 30 50 71 36 30
0000004 yyyy 白土______ 40 M 58 71 20 10 6
0000005 **** 崎村______ 50 F 82 79 16 21 80
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
#TEST3
# 不連続キー

cat << FIN > $tmp-tran
x B z A x
x C x A x
x A w B x
x B y C x
FIN

cat << FIN > $tmp-master
B a A nameA1
C c A nameAC
FIN

cat << FIN > $tmp-ans
x B z A a nameA1 x
x C x A c nameAC x
x A w B * ****** x
x B y C * ****** x
FIN

${com} key=4@2@2@4 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out

[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4
# 連続するキー
# キー指定で「数値、範囲(/)、列挙(@)、NF、NF-<n>」の組み合わせ

cat << FIN > $tmp-tran
1 A 0000000 91 59 20 76 54
2 A 0000001 46 39 8  5  21
3 A 0000003 30 50 71 36 30
4 A 0000004 58 71 20 10 6
5 A 0000005 82 79 16 21 80
6 B 0000007 50 2  33 15 62
7 B 0000008 52 91 44 9  0
8 C 0000009 60 89 33 18 6
9 C 0000010 95 60 35 93 76
10 C 0000011 92 56 83 96 75
FIN

cat << FIN > $tmp-master
A 0000003 杉山______ 26 F
A 0000005 崎村______ 50 F
B 0000007 梶川______ 42 F
C 0000010 柳本______ 50 F
FIN

cat << FIN > $tmp-ans
1 A 0000000 ********** ** * 91 59 20 76 54
2 A 0000001 ********** ** * 46 39 8 5 21
3 A 0000003 杉山______ 26 F 30 50 71 36 30
4 A 0000004 ********** ** * 58 71 20 10 6
5 A 0000005 崎村______ 50 F 82 79 16 21 80
6 B 0000007 梶川______ 42 F 50 2 33 15 62
7 B 0000008 ********** ** * 52 91 44 9 0
8 C 0000009 ********** ** * 60 89 33 18 6
9 C 0000010 柳本______ 50 F 95 60 35 93 76
10 C 0000011 ********** ** * 92 56 83 96 75
FIN

${com} key=2/3 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

# コマンドの説明
# キー指定の「NF-5/NF-6@NF-5@NF-6@3/2@2/3@3@2@NF-6/NF-5」はNF=8で「3～2と3と2と3～2と2～3と3と2と2～3」となり重複を解消して「3,2」と整理される

${com} key=NF-5/NF-6@NF-5@NF-6@3/2@2/3@3@2@NF-6/NF-5 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

###########################################
#TEST5
# 代用対/結合文字列/IVS/SVSの処理検査

cat << FIN > $tmp-master
0000000 吉田______ 50 F 91 59 20 76 54
0000002 𠮷田______ 50 F 46 39 8  5  21
0000004 今川______ 26 F 30 50 71 36 30
0000006 𫝆川______ 40 M 58 71 20 10 6
0000008 𫝆󠄁川______ 40 F 82 79 16 21 80
0000010 渡邊______ 50 F 33 56 27 40 72
0000012 渡邊󠄊______ 36 F 51 30 15 22 81
0000014 渡邊󠄋______ 62 F 72 39 26 18 55
0000016 渡邊󠄌______ 52 F 33 48 33 33 25
0000018 神山______ 38 F 64 67 40 21 36
0000020 神︀山______ 25 F 45 36 5 16 72
0000022 羽田______ 18 F 76 75 22 32 25
0000024 羽︀田______ 53 F 47 64 43 7 2
0000026 か゚き゚く゚け゚こ゚ 45 F 88 43 9 37 62
FIN

# $tmp-masterの説明

#0000000 吉田______ 50 F 91 59 20 76 54 #吉(U+5409)
#0000002 𠮷田______ 50 F 46 39 8  5  21 #𠮷(U+20BB7)代用対では𠮷(U+D842-U+DFB7)
#0000004 今川______ 26 F 30 50 71 36 30 #今(U+4ECA)
#0000006 𫝆川______ 40 M 58 71 20 10 6 #𫝆(U+2B746)代用対では𫝆(U+D86D-U+DF46)
#0000008 𫝆󠄁川______ 40 F 82 79 16 21 80 #IVSの例で𫝆󠄁(U+2B746;U+E0101)代用対では𫝆󠄁(U+D86D-U+DF46;U+DB40-U+DD01)
#0000010 渡邊______ 50 F 33 56 27 40 72 #邊(U+908A)
#0000012 渡邊󠄊______ 36 F 51 30 15 22 81 #IVSの例で邊󠄊(U+908A;U+E010A)代用対では邊󠄊(U+908A;U+DB40-U+DD0A)
#0000014 渡邊󠄋______ 62 F 72 39 26 18 55 #IVSの例で邊󠄋(U+908A;U+E010B)代用対では邊󠄋(U+908A;U+DB40-U+DD0B)
#0000016 渡邊󠄌______ 52 F 33 48 33 33 25 #IVSの例で邊󠄌(U+908A;U+E010C)代用対では邊󠄌(U+908A;U+DB40-U+DD0C)
#0000018 神山______ 38 F 64 67 40 21 36 #神(U+795E)
#0000020 神︀山______ 25 F 45 36 5 16 72 #SVSの例で神︀(U+795E;U+FE00)
#0000022 羽田______ 18 F 76 75 22 32 25 #羽(U+7FBD)
#0000024 羽︀田______ 53 F 47 64 43 7 2 #SVSの例で羽︀(U+7FBD;U+FE00)
#0000026 か゚き゚く゚け゚こ゚ 45 F 88 43 9 37 62 #結合文字列の例でか゚(U+304B;U+309A)き゚(U+304D;U+309A)く゚(U+304F;U+309A)け゚(U+3051;U+309A)こ゚(U+3053;U+309A)

# 文字の正しい表示には適切なfontの使用が求められる
# Unicode符号位置を「字(U+xxxx)」の形式で表現する（符号位置が第2面のときは「字(U+xxxxx)」）
# 代用対は「字(U+xxxx-U+yyyy)」の形式で表現する
# 結合文字列/IVS/SVSは「字(U+xxxx;U+yyyy)」の形式で表現する

cat << FIN > $tmp-tran
0000000 A
0000001 B
0000002 C
0000003 D
0000004 E
0000005 F
0000006 G
0000007 H
0000008 I
0000009 J
0000010 K
0000011 L
0000012 M
0000013 N
0000014 O
0000015 P
0000016 Q
0000017 R
0000018 S
0000019 T
0000020 U
0000021 V
0000022 W
0000023 X
0000024 Y
0000025 Z
0000026 a
0000027 b
FIN

cat << FIN > $tmp-ans
0000000 吉田______ 50 F 91 59 20 76 54 A
0000001 ********** ** * ** ** ** ** ** B
0000002 𠮷田______ 50 F 46 39 8 5 21 C
0000003 ********** ** * ** ** * * ** D
0000004 今川______ 26 F 30 50 71 36 30 E
0000005 ********** ** * ** ** ** ** ** F
0000006 𫝆川______ 40 M 58 71 20 10 6 G
0000007 ********** ** * ** ** ** ** * H
0000008 𫝆󠄁川______ 40 F 82 79 16 21 80 I
0000009 ********** ** * ** ** ** ** ** J
0000010 渡邊______ 50 F 33 56 27 40 72 K
0000011 ********** ** * ** ** ** ** ** L
0000012 渡邊󠄊______ 36 F 51 30 15 22 81 M
0000013 ********** ** * ** ** ** ** ** N
0000014 渡邊󠄋______ 62 F 72 39 26 18 55 O
0000015 ********** ** * ** ** ** ** ** P
0000016 渡邊󠄌______ 52 F 33 48 33 33 25 Q
0000017 ********** ** * ** ** ** ** ** R
0000018 神山______ 38 F 64 67 40 21 36 S
0000019 ********** ** * ** ** ** ** ** T
0000020 神︀山______ 25 F 45 36 5 16 72 U
0000021 ********** ** * ** ** * ** ** V
0000022 羽田______ 18 F 76 75 22 32 25 W
0000023 ********** ** * ** ** ** ** ** X
0000024 羽︀田______ 53 F 47 64 43 7 2 Y
0000025 ********** ** * ** ** ** * * Z
0000026 か゚き゚く゚け゚こ゚ 45 F 88 43 9 37 62 a
0000027 ********** ** * ** ** * ** ** b
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6
# +<string>はダミーデータとして補完する文字を指定するオプション。+の後に補完で使用する文字を指定する。
# +<string>で4バイト文字（Unicode符号位置がU+FFFF超の文字）を与える

cat << FIN >$tmp-master
0000003 杉山______ 26 F
0000005 崎村______ 50 F
0000007 梶川______ 42 F
0000010 柳本______ 50 F
FIN

cat << FIN >$tmp-tran
0000000 91 59 20 76 54
0000001 46 39 8  5  21
0000003 30 50 71 36 30
0000004 58 71 20 10 6
0000005 82 79 16 21 80
0000007 50 2  33 15 62
0000008 52 91 44 9  0
0000009 60 89 33 18 6
0000010 95 60 35 93 76
0000011 92 56 83 96 75
FIN

cat << FIN >$tmp-ans
0000000 𠆢 𠆢 𠆢 91 59 20 76 54
0000001 𠆢 𠆢 𠆢 46 39 8 5 21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 𠆢 𠆢 𠆢 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
0000007 梶川______ 42 F 50 2 33 15 62
0000008 𠆢 𠆢 𠆢 52 91 44 9 0
0000009 𠆢 𠆢 𠆢 60 89 33 18 6
0000010 柳本______ 50 F 95 60 35 93 76
0000011 𠆢 𠆢 𠆢 92 56 83 96 75
FIN

${com} +𠆢 key=1 $tmp-master $tmp-tran >$tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

# 「𠆢」は𠆢(U+201A2)代用対では𠆢(U+D840-U+DDA2)

###########################################
#TEST7
#TEST1の拡大版
# BOM付き/BOM無しと改行記号CRLF/CR/LFの試験

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 A
0000004 B
FIN

cat << FIN > $tmp-ans
0000000 * 浜地______ 50 F 91 59 20 76 54
0000001 A 鈴田______ 50 F 46 39 8 5 21
0000003 * 杉山______ 26 F 30 50 71 36 30
0000004 B 白土______ 40 M 58 71 20 10 6
0000005 * 崎村______ 50 F 82 79 16 21 80
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-master $tmp-masterBOMCRLF $tmp-masterBOMCR
BOMandEOLvariation $tmp-tran $tmp-tranBOMCRLF $tmp-tranBOMCR

# tmp-masterの試験

# BOM付きCRLF
${com} key=1 $tmp-masterBOMCRLF $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-1 error"

# BOM付きCR
${com} key=1 $tmp-masterBOMCR $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-2 error"

# tmp-masterのpipe接続試験

# BOM付きCRLF
cat $tmp-masterBOMCRLF | ${com} key=1 - $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-3 error"

# BOM付きCR
cat $tmp-masterBOMCR | ${com} key=1 - $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-4 error"

# tmp-tranの試験

# BOM付きCRLF
${com} key=1 $tmp-master $tmp-tranBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-5 error"

# BOM付きCR
${com} key=1 $tmp-master $tmp-tranBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-6 error"

# tmp-tranのpipe接続試験

# BOM付きCRLF
cat $tmp-tranBOMCRLF | ${com} key=1 $tmp-master -  > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-7 error"

# BOM付きCR
cat $tmp-tranBOMCR | ${com} key=1 $tmp-master -  > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-8 error"

###########################################
#TEST8
# キーに0を指定すると「全欄指定」となる

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000000 太田______ 50 F 91 59 20 76 54 A
0000001 鈴田______ 50 F 46 39 8  5  21 B
0000003 上田______ 26 F 30 50 71 36 30 C
0000004 白土______ 40 M 58 71 20 10 6 D
0000005 上田______ 50 F 82 79 16 21 80 E
FIN

cat << FIN > $tmp-ans
0000000 浜地______ 50 F 91 59 20 76 54 *
0000001 鈴田______ 50 F 46 39 8 5 21 B
0000003 杉山______ 26 F 30 50 71 36 30 *
0000004 白土______ 40 M 58 71 20 10 6 D
0000005 崎村______ 50 F 82 79 16 21 80 *
FIN

${com} key=0 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-1 error"

# キー指定にひとつでも0があれば全欄指定となる

${com} key=0@5/3 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-2 error"

###########################################
#TEST9
# TEST1の変形
# tranの欄数に変化がある例
# 
cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 A
0000004 B
FIN

cat << FIN > $tmp-ans
0000000 * 浜地______ 50 F 91 59 20 76 54
0000001 A 鈴田______ 50 F 46 39 8 5 21
0000003 * 杉山______ 26 F 30 50 71 36
0000004 B 白土______ 40 M 58 71 20 10 6
0000005 * 崎村______ 50 F 82 79 16 21 80
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
