#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of check_date_name
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=check_date_name # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}


###########################################
# TEST1
# 通常のチェック
#  Aは日付け
#  Bは週
#  Cは月
#  Dはチェック無し

cat << FIN > $tmp-check
A D
B W
C M
D _
FIN

cat << FIN > $tmp-data
A 20081010
B 200852
C_001 200813
C_002 _
C_003 200804
D 9999
FIN

cat << FIN > $tmp-ans
C_001 M
FIN

${com} $tmp-check $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
# TEST2
# 通常のチェック
#  4年/100年/400年で割り切れる年の２月について検査

cat << FIN > $tmp-check
A D
B W
C M
D _
FIN

cat << FIN > $tmp-data
A_001 20040229
A_002 21000229
A_003 20000229
B 200852
C_001 200813
C_002 _
C_003 200804
D 9999
FIN

cat << FIN > $tmp-ans
A_002 D
C_001 M
FIN

${com} $tmp-check $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
# TEST3
# TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験
# 通常のチェック
#  Aは日付け
#  Bは週
#  Cは月
#  Dはチェック無し

cat << FIN > $tmp-check
A D
B W
C M
D _
FIN

cat << FIN > $tmp-data
A 20081010
B 200852
C_001 200813
C_002 _
C_003 200804
D 9999
FIN

cat << FIN > $tmp-ans
C_001 M
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-data $tmp-dataBOMCRLF $tmp-dataBOMCR
BOMandEOLvariation $tmp-check $tmp-checkBOMCRLF $tmp-checkBOMCR

# BOM付きUTF8ファイルCRLF
${com} $tmp-checkBOMCRLF $tmp-dataBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

# BOM付きUTF8ファイルCR
${com} $tmp-checkBOMCR $tmp-dataBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

# pipe接続

# BOM付きUTF8ファイルCRLF
cat $tmp-dataBOMCRLF | ${com} $tmp-checkBOMCRLF - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-3 error"

# BOM付きUTF8ファイルCR
cat $tmp-dataBOMCR | ${com} $tmp-checkBOMCR - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-4 error"

###########################################
# TEST4
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

# チェック項目
#  「がぎぐげご」は日付け
#  「ざじずぜぞ」は週
#  「だぢづでど」は月
#  「ばびぶべぼ」はチェック無し

# checkファイルのname部はNFC
cat << FIN > $tmp-check
がぎぐげご D
ざじずぜぞ W
だぢづでど M
ばびぶべぼ _
FIN

# nameファイルのname部はNFD
cat << FIN > $tmp-data
がぎぐげご 20081010
ざじずぜぞ 200852
だぢづでど_001 200813
だぢづでど_002 _
だぢづでど_003 200804
ばびぶべぼ 9999
FIN

# --through文字列の指定
# 4行目のdata部に検査をthroughさせるための文字列「ゔ」（NFD）を置いた

# nameファイルのname部はNFD
cat << FIN > $tmp-data-through
がぎぐげご 20081010
ざじずぜぞ 200852
だぢづでど_001 200813
だぢづでど_002 ゔ
だぢづでど_003 200804
ばびぶべぼ 9999
FIN

# 正解出力のname部はNFC化される
cat << FIN > $tmp-ans
だぢづでど_001 M
FIN

${com} $tmp-check $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

# --through指定文字列に「_」と「ゔ」(NFC)を指定する
${com} $tmp-check $tmp-data-through --through _ --through ゔ > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

#  4年/100年/400年で割り切れる年の２月について検査

# nameファイルのname部はNFD
cat << FIN > $tmp-data
がぎぐげご_001 20040229
がぎぐげご_002 21000229
がぎぐげご_003 20000229
ざじずぜぞ 200852
だぢづでど_001 200813
だぢづでど_002 _
だぢづでど_003 200804
ばびぶべぼ 9999
FIN

# 正解出力のname部はNFC化される
cat << FIN > $tmp-ans
がぎぐげご_002 D
だぢづでど_001 M
FIN

${com} $tmp-check $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-3 error"

###########################################
# TEST5
#  TEST4のNFC/NFD反転版
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

# チェック項目
#  「がぎぐげご」は日付け
#  「ざじずぜぞ」は週
#  「だぢづでど」は月
#  「ばびぶべぼ」はチェック無し

# checkファイルのname部はNFD
cat << FIN > $tmp-check
がぎぐげご D
ざじずぜぞ W
だぢづでど M
ばびぶべぼ _
FIN

# nameファイルのname部はNFC
cat << FIN > $tmp-data
がぎぐげご 20081010
ざじずぜぞ 200852
だぢづでど_001 200813
だぢづでど_002 _
だぢづでど_003 200804
ばびぶべぼ 9999
FIN

# --through文字列の指定
# 4行目のdata部に検査をthroughさせるための文字列「ゔ」（NFC）を置いた

# nameファイルのname部はNFC
cat << FIN > $tmp-data-through
がぎぐげご 20081010
ざじずぜぞ 200852
だぢづでど_001 200813
だぢづでど_002 ゔ
だぢづでど_003 200804
ばびぶべぼ 9999
FIN

# 正解出力のname部はNFC化される
cat << FIN > $tmp-ans
だぢづでど_001 M
FIN

${com} $tmp-check $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-1 error"

# --through指定文字列に「_」と「ゔ」(NFD)を指定する
${com} $tmp-check $tmp-data-through --through _ --through ゔ > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-2 error"

#  4年/100年/400年で割り切れる年の２月について検査

# nameファイルのname部はNFC
cat << FIN > $tmp-data
がぎぐげご_001 20040229
がぎぐげご_002 21000229
がぎぐげご_003 20000229
ざじずぜぞ 200852
だぢづでど_001 200813
だぢづでど_002 _
だぢづでど_003 200804
ばびぶべぼ 9999
FIN

# 正解出力のname部はNFC化される
cat << FIN > $tmp-ans
がぎぐげご_002 D
だぢづでど_001 M
FIN

${com} $tmp-check $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-3 error"

###########################################
# TEST6
# 文字列の「ゆるい一致」の試験

# 一般的な実行例

# 「齋藤」の「齋」と「渡邉󠄐」の「渡」はUCS
cat << FIN > $tmp-check1
齋藤 D
渡邉 M
FIN

# $tmp-check1の内容説明
# $tmp-dataのIVSは基底文字が同じならchecklist（$tmp-check1）のUCSとmatchする
#齋藤 D 齋(U+9F4B)藤(U+85E4) UCS 第2欄がDなので日付けとして検査
#渡邉 M 渡(U+6E21)邉(U+9089) UCS 第2欄がMなので月として検査

cat << FIN > $tmp-data
齋藤 20081010
齋󠄄藤 200852
齋󠄅藤 200804
齋󠄆藤 渡
齋藤_001 20081010
齋󠄄藤_002 200852
齋󠄅藤_003 200804
齋󠄆藤_004 渡
渡邉󠄐 齋󠄅
渡邉󠄑 200804
渡邉󠄒 200852
渡邉 20081010
渡邉󠄐_001 齋󠄅
渡邉󠄑_002 20081010
渡邉󠄒_003 200852
渡邉_004 200804
FIN

# $tmp-dataの内容説明
#齋藤 20081010 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤 200852 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤 200804 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤 渡 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS 第2欄がコマンドのthrough文字列「渡」と一致するので検査されない
#齋藤_001 20081010 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤_002 200852 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤_003 200804 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤_004 渡 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
#渡邉󠄐 齋󠄅 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS 第2欄がコマンドのthrough文字列「齋󠄅」と一致するので検査されない
#渡邉󠄑 200804 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒 200852 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉 20081010 渡(U+6E21)邉(U+9089) UCS
#渡邉󠄐_001 齋󠄅 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS
#渡邉󠄑_002 20081010 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒_003 200852 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉_004 200804 渡(U+6E21)邉(U+9089) UCS

# checkにひっかかるdata 第2欄にchecklist（$tmp-check1）における検査対象日付形式を挿入
# コマンドの実行で各行の（「#」を除く）第1欄と第2欄が$tmp-outに出力される
#齋󠄄藤 D 200852 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤 D 200804 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄄藤_002 D 200852 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤_003 D 200804 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#渡邉󠄒 M 200852 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉 M 20081010 渡(U+6E21)邉(U+9089) UCS
#渡邉󠄑_002 M20081010 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒_003 M 200852 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS

cat << FIN > $tmp-ans1
齋󠄄藤 D
齋󠄅藤 D
齋󠄄藤_002 D
齋󠄅藤_003 D
渡邉󠄒 M
渡邉 M
渡邉󠄑_002 M
渡邉󠄒_003 M
FIN

# コマンドで指定するthrough文字列
#「齋󠄅」は「齋󠄅(U+9F4B;U+E0105)」でIVS
#「渡」は「邉󠄑(U+9089;U+E0111)」でIVS

${com} $tmp-check1 $tmp-data --through 齋󠄅 --through 渡 > $tmp-out
diff $tmp-ans1 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

# 特殊な実行例

# checkファイルの「齋藤」と「渡邉󠄐」は「齋」と「渡」についてUCSとIVSの両方がある
cat << FIN > $tmp-check2
齋藤 D
齋󠄄藤 W
齋󠄅藤 M
齋󠄆藤 渡
渡邉󠄐 D
渡邉󠄑 W
渡邉󠄒 M
渡邉 齋󠄅
FIN

# $tmp-check2の内容説明
#齋藤 D 齋(U+9F4B)藤(U+85E4) UCS 第2欄がDなので日付けとして検査
#齋󠄄藤 W 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS 第2欄がWなので週として検査
#齋󠄅藤 M 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS 第2欄がMなので月として検査
#齋󠄆藤 渡 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS 第2欄がコマンドのthrough文字列「渡」と一致するので検査しない
#渡邉󠄐 D 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS 第2欄がDなので日付けとして検査
#渡邉󠄑 W 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS 第2欄がWなので週として検査
#渡邉󠄒 M 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS 第2欄がMなので月として検査
#渡邉 齋󠄅 渡(U+6E21)邉(U+9089) UCS 第2欄がコマンドのthrough文字列「齋󠄅」と一致するので検査しない

# $tmp-dataはTEST6-1と同じ
cat << FIN > $tmp-data
齋藤 20081010
齋󠄄藤 200852
齋󠄅藤 200804
齋󠄆藤 渡
齋藤_001 20081010
齋󠄄藤_002 200852
齋󠄅藤_003 200804
齋󠄆藤_004 渡
渡邉󠄐 齋󠄅
渡邉󠄑 200804
渡邉󠄒 200852
渡邉 20081010
渡邉󠄐_001 齋󠄅
渡邉󠄑_002 20081010
渡邉󠄒_003 200852
渡邉_004 200804
FIN

# $tmp-dataの内容説明 TEST6-1と同じ
#齋藤 20081010 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤 200852 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤 200804 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤 渡 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS 第2欄がコマンドのthrough文字列「渡」と一致するので検査されない
#齋藤_001 20081010 齋(U+9F4B)藤(U+85E4) UCS
#齋󠄄藤_002 200852 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤_003 200804 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄆藤_004 渡 齋󠄆(U+9F4B;U+E0106)藤(U+85E4) IVS
#渡邉󠄐 齋󠄅 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS 第2欄がコマンドのthrough文字列「齋󠄅」と一致するので検査されない
#渡邉󠄑 200804 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒 200852 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉 20081010 渡(U+6E21)邉(U+9089) UCS
#渡邉󠄐_001 齋󠄅 渡(U+6E21)邉󠄐(U+9089;U+E0110) IVS
#渡邉󠄑_002 20081010 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒_003 200852 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉_004 200804 渡(U+6E21)邉(U+9089) UCS

# checkにひっかかるdata 第2欄にchecklist（$tmp-check2）における検査対象日付形式を挿入
# コマンドの実行で各行の（「#」を除く）第1欄と第2欄が$tmp-outに出力される
#齋󠄄藤 D 200852 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤 D 200804 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#齋󠄄藤_002 D 200852 齋󠄄(U+9F4B;U+E0104)藤(U+85E4) IVS
#齋󠄅藤_003 D 200804 齋󠄅(U+9F4B;U+E0105)藤(U+85E4) IVS
#渡邉󠄒 M 200852 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉󠄑_002 W  20081010 渡(U+6E21)邉󠄑(U+9089;U+E0111) IVS
#渡邉󠄒_003 M 200852 渡(U+6E21)邉󠄒(U+9089;U+E0112) IVS
#渡邉_004 D 200804 渡(U+6E21)邉(U+9089) UCS

cat << FIN > $tmp-ans2
齋󠄄藤 D
齋󠄅藤 D
齋󠄄藤_002 D
齋󠄅藤_003 D
渡邉󠄒 M
渡邉󠄑_002 W
渡邉󠄒_003 M
渡邉_004 D
FIN

# コマンドで指定するthrough文字列
#「齋󠄅」は「齋󠄅(U+9F4B;U+E0105)」でIVS
#「渡」は「邉󠄑(U+9089;U+E0111)」IVS

${com} $tmp-check2 $tmp-data --through 齋󠄅 --through 渡 > $tmp-out
diff $tmp-ans2 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
