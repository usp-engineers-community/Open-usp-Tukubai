#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of sm2
#
# usage: [<test-path>/]sm2.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=sm2 # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
marumecom="${pythonversion} ${commandpath}/marume" # marumeコマンドを使用するため
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

 [ -e  ${commandpath}/marume ];  ERROR_CHECK "marumeコマンドがみつからない"


###########################################
#TEST1

cat << FIN > $tmp-in
001 1
001 1.11
001 -2.1
002 0.0
002 1.101
FIN

cat << FIN > $tmp-ans
001 0.010
002 1.101
FIN

${com} 1 1 2 2 $tmp-in 		|
${marumecom} 2.3			> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
#TEST2

cat << FIN > $tmp-in
001 1
001 1.11
001 -2.1
002 0.0
002 1.101
FIN

cat << FIN > $tmp-ans
1.111
FIN

${com} 0 0 2 2 $tmp-in		|
${marumecom} 1.3			> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
#TEST3

cat << FIN > $tmp-in
001 1
001 1.11
001 -2.1
002 0.0
002 1.101
FIN

cat << FIN > $tmp-ans
001 3 0.010
002 2 1.101
FIN

${com} +count 1 1 2 2 $tmp-in 	|
${marumecom} 3.3			> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

cat $tmp-in			|
${com} +count 1 1 2 2 		|
${marumecom} 3.3			> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

###########################################
#TEST4 Support of Scientific Representation

cat << FIN > $tmp-in
-1.0e+1
-1.0e+0
FIN

cat << FIN > $tmp-ans
-11
FIN

cat $tmp-in			|
${com} 0 0 1 1			|
${marumecom} 1.0 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
#TEST5 Invalid word
# 「Error[sm2] : 数値変換できません。」でerrorとなる

cat << FIN > $tmp-in
あ
FIN

# TEST5はエラーで終了するように設定されている

cat $tmp-in	|
${com} 0 0 1 1 2> /dev/null > $tmp-out
#if exit status is zero, it's an error
[ ! $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6 a bugfix (The value disappears when the value is zero. )

cat << FIN > $tmp-in
a 1
a 3
a 2
b 0
b 0
c 5
c 6
d 0
d 2
FIN

cat << FIN > $tmp-ans
a 6
b 0
c 11
d 2
FIN

cat $tmp-in    |
${com} 1 1 2 2 |
diff $tmp-ans -
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
#TEST7
# フィールドの降順指定

cat << FIN > $tmp-in
0001 新橋店 20060201 91 59 20 76 54
0001 新橋店 20060202 46 39 8  5  21
0001 新橋店 20060203 82 0  23 84 10
0002 池袋店 20060201 30 50 71 36 30
0002 池袋店 20060202 78 13 44 28 51
0002 池袋店 20060203 58 71 20 10 6
0003 新宿店 20060201 82 79 16 21 80
0003 新宿店 20060202 50 2  33 15 62
0003 新宿店 20060203 52 91 44 9  0
0004 上野店 20060201 60 89 33 18 6
0004 上野店 20060202 95 60 35 93 76
0004 上野店 20060203 92 56 83 96 75
FIN

cat << FIN > $tmp-ans
0001 新橋店 219 98 51 165 85
0002 池袋店 166 134 135 74 87
0003 新宿店 184 172 93 45 142
0004 上野店 247 205 151 207 157
FIN

${com} 1 2 4 8 $tmp-in >$tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-1 error"

${com} 2 1 8 4 $tmp-in >$tmp-out

diff $tmp-ans $tmp-out >  /dev/null
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-2 error"

###########################################
#TEST8
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-in
001 1
001 1.11
001 -2.1
002 0.0
002 1.101
FIN

cat << FIN > $tmp-ans
001 0.010
002 1.101
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きCRLF
${com} 1 1 2 2  $tmp-inBOMCRLF | ${marumecom} 2.3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-1 error"

# BOM付きCR
${com} 1 1 2 2  $tmp-inBOMCR | ${marumecom} 2.3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF | ${com} 1 1 2 2  - | ${marumecom} 2.3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-3 error"

# BOM付きCR
cat $tmp-inBOMCR | ${com} 1 1 2 2  - | ${marumecom} 2.3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-4 error"

###########################################
#TEST8
# TEST7の変型
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

cat << FIN > $tmp-in
0002 ざじずぜぞ 濁音NFC 20060203 58 71 20 10 6
0001 がぎぐげご 濁音NFC 20060201 91 59 20 76 54
0003 だぢづでど 濁音NFC 20060201 82 79 16 21 80
0001 がぎぐげご 濁音NFD 20060202 46 39 8  5  21
0004 ぱぴぷぺぽ 半濁音NFC 20060201 60 89 33 18 6
0002 ざじずぜぞ 濁音NFD 20060202 78 13 44 28 51
0001 がぎぐげご 濁音NFC 20060203 82 0  23 84 10
0004 ぱぴぷぺぽ 半濁音NFD 20060202 95 60 35 93 76
0003 だぢづでど 濁音NFD 20060202 50 2  33 15 62
0002 ざじずぜぞ 濁音NFC 20060201 30 50 71 36 30
0004 ぱぴぷぺぽ 半濁音NFC 20060203 92 56 83 96 75
0003 だぢづでど 濁音NFC 20060203 52 91 44 9  0
FIN

cat << FIN > $tmp-ans
0001 がぎぐげご 219 98 51 165 85
0002 ざじずぜぞ 166 134 135 74 87
0003 だぢづでど 184 172 93 45 142
0004 ぱぴぷぺぽ 247 205 151 207 157
FIN

cat $tmp-in	|
sort -k1,1 -k2,2 -k4,4 |
${com} 1 2 5 9 - >$tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8 error"

###########################################
#TEST9 sums up every value in an input.

seq 1 10 > $tmp-in

echo 55 > $tmp-out

cat $tmp-in |
${com}      > $tmp-ans

diff $tmp-ans $tmp-out

[ $? -eq 0 ] ; ERROR_CHECK "TEST9 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
