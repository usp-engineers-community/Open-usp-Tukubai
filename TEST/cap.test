#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of cap
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=cap # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
# TEST1
# フィールドを指定する場合
# フィールドの列挙指定と範囲指定の連続混用および重複指定解消の試験

cat << FIN > $tmp-data
001 japan america
002 england russia
FIN

cat << FIN > $tmp-ans
001 JAPAN america
002 ENGLAND russia
FIN

${com} 1 2 $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

${com} 1/2@1@2@NF-1/1 2/1@2@1@1/NF-2 $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-2 error"

###########################################
# TEST2
# -d (direct) 指定の場合

cat << FIN > $tmp-ans
JAPAN
FIN

${com} -d japan > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
# TEST2-1
# -d指定で4バイト文字（Unicode符号位置がU+FFFF超の文字）を与える

cat << FIN > $tmp-ans
JAPAN𠆢日本
FIN

# 「𠆢」は𠆢(U+201A2)代用対では𠆢(U+D840-U+DDA2)

${com} -d japan𠆢日本 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"

###########################################
# TEST3
# 全フィールドを対象とするふたつの方法
#  フィールド指定を省略する
#  フィールド番号に0を指定する（このとき同時に指定した他のフィールド番号は無視される）

cat << FIN > $tmp-data
001 japan america
002 england russia
FIN

cat << FIN > $tmp-ans
001 JAPAN AMERICA
002 ENGLAND RUSSIA
FIN

${com} $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

${com} 0 4 $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

###########################################
# TEST4
# -d (direct) で空白のある文字列を指定する場合

cat << FIN > $tmp-ans
JAPAN AMERICA
FIN

${com} -d "japan america" > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
# TEST4-1
# -d (direct) で空白のある文字列を指定する場合
# -d指定で4バイト文字（Unicode符号位置がU+FFFF超の文字）を与える

cat << FIN > $tmp-ans
JAPAN𠆢日本 AMERICA𠆢米国
FIN

# 「𠆢」は𠆢(U+201A2)代用対では𠆢(U+D840-U+DDA2)

${com} -d "japan𠆢日本 america𠆢米国" > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

###########################################
# TEST5
# TEST1の拡大版
# BOM付き/BOM無しと改行記号CRLF/CR/LFの試験
# フィールドを指定する場合

cat << FIN > $tmp-data
001 japan america
002 england russia
FIN

cat << FIN > $tmp-ans
001 JAPAN america
002 ENGLAND russia
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-data $tmp-dataBOMCRLF $tmp-dataBOMCR

# BOM付きCRLF
${com} 1 2 $tmp-dataBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-1 error"

# BOM付きCR
${com} 1 2 $tmp-dataBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-dataBOMCRLF | ${com} 1 2 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-3 error"

# BOM付きCR
cat $tmp-dataBOMCR | ${com} 1 2 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-4 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
