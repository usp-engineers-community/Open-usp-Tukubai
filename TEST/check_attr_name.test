#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of check_attr_name
#
# usage: [<test-path>/]check_attr_name.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=check_attr_name # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1
# 通常のチェック

cat << FIN > $tmp-check
A N3
B n4
C x3
D X6
E Z14
F z8
FIN

cat << FIN > $tmp-data
A 200
B 12345
C abcde
D_001 xxxxxx
D_002 xxxxx
D_003 xxxx
E あいうえお漢字
F アイウエオ
FIN

cat << FIN > $tmp-ans
B n4
C x3
D_002 X6
D_003 X6
F z8
FIN

${com} $tmp-check $tmp-data >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
#TEST2
# --through オプションでチェックしない値を指定する

cat  << FIN > $tmp-data2
A 200
B _
C _
D_001 xxxxxx
D_002 _
D_003 _
FIN

cat << FIN > $tmp-ans
FIN

${com}  --through _ $tmp-check $tmp-data2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

######################################################################################
#TEST3
# 代用対/結合文字列/IVS/SVSの処理検査

cat << FIN > $tmp-check
A N3
B n4
C x3
D X6
E Z4
F Z4
G Z4
H Z4
I Z4
J Z4
K Z4
L Z4
M Z4
N Z4
O Z4
P Z4
Q Z4
R Z10
FIN

cat << FIN > $tmp-data
A 200
B 12345
C abcde
D_001 xxxxxx
D_002 xxxxx
D_003 xxxx
E 吉田
F 𠮷田
G 今川
H 𫝆川
I 𫝆󠄁川
J 渡邊
K 渡邊󠄊
L 渡邊󠄋
M 渡邊󠄌
N 神山
O 神︀山
P 羽田
Q 羽︀田
R か゚き゚く゚け゚こ゚
FIN

# $tmp-dataの説明
#E 吉田 #吉(U+5409)
#F 𠮷田 #𠮷(U+20BB7)代用対では𠮷(U+D842-U+DFB7)
#G 今川 #今(U+4ECA)
#H 𫝆川 #𫝆(U+2B746)代用対では𫝆(U+D86D-U+DF46)
#I 𫝆󠄁川 #IVSの例で𫝆󠄁(U+2B746;U+E0101)代用対では𫝆󠄁(U+D86D-U+DF46;U+DB40-U+DD01)
#J 渡邊 #邊(U+908A)
#K 渡邊󠄊 #IVSの例で邊󠄊(U+908A;U+E010A)代用対では邊󠄊(U+908A;U+DB40-U+DD0A)
#L 渡邊󠄋 #IVSの例で邊󠄋(U+908A;U+E010B)代用対では邊󠄋(U+908A;U+DB40-U+DD0B)
#M 渡邊󠄌 #IVSの例で邊󠄌(U+908A;U+E010C)代用対では邊󠄌(U+908A;U+DB40-U+DD0C)
#N 神山 #神(U+795E)
#O 神︀山 #SVSの例で神︀(U+795E;U+FE00)
#P 羽田 #羽(U+7FBD)
#Q 羽︀田 #SVSの例で羽︀(U+7FBD;U+FE00)
#R か゚き゚く゚け゚こ゚ #結合文字列の例でか゚(U+304B;U+309A)き゚(U+304D;U+309A)く゚(U+304F;U+309A)け゚(U+3051;U+309A)こ゚(U+3053;U+309A)

# 文字の正しい表示には適切なfontの使用が求められる
# Unicode符号位置を「字(U+xxxx)」の形式で表現する（符号位置が第2面のときは「字(U+xxxxx)」）
# 代用対は「字(U+xxxx-U+yyyy)」の形式で表現する
# 結合文字列/IVS/SVSは「字(U+xxxx;U+yyyy)」の形式で表現する

cat << FIN > $tmp-ans
B n4
C x3
D_002 X6
D_003 X6
FIN

${com} $tmp-check $tmp-data > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4
# --through オプションで4バイト文字（Unicode符号位置がU+FFFF超の文字）を指定する

cat << FIN > $tmp-check
A N3
B n4
C x3
D X6
E Z14
F z8
FIN

cat  << FIN > $tmp-data2
A 200
B _
C 𠆢
D_001 xxxxxx
D_002 𠆢
D_003 _
FIN

# 「𠆢」は𠆢(U+201A2)代用対では𠆢(U+D840-U+DDA2)

cat << FIN > $tmp-ans
FIN

${com}  --through _ --through 𠆢 $tmp-check $tmp-data2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
#TEST5
# 各種検査

cat << FIN > $tmp-check
n n4
N N4
s s4
S S4
f f1.1
F F1.2
v v1.1
V V1.2
e e4
E E4
a a4
A A4
b b4
B B4
h h4
H H4
z z4
Z Z4
k k8
K K8
x x4
X X4
c c4
C C4
o o4
O O4
j j21
J J18
FIN

cat << FIN > $tmp-data
n 123
N 1234
s +123
S +1234
f 1.0
F 1.00
v +1.0
V +1.00
e abc
E abcd
a a1@
A a1@~
b b12
B b123
h ｶﾀｶ
H abｶﾀ
z 全
Z 全角
k アアア
K カタカナ
x a1+
X a1+-
c 550
C 2345
o ABC
O ABCD
j 東京都千代田区渡邊󠄊1A
J 東京都千代田区渡邊󠄊
FIN

#	s S は数字部分の桁数を指定する
#	f F v V	の桁数は「整数部.小数部」で指定する
#	c C の区別はない (各桁の和+偶数桁の2倍和)%==0 を検査している

#j 東京都千代田区渡邊󠄊1A #IVSの例で邊󠄊(U+908A;U+E010A)代用対では邊󠄊(U+908A;U+DB40-U+DD0A)
#J 東京都千代田区渡邉󠄗 #IVSの例で邉󠄗(U+9089;U+E0117)代用対では邉󠄗(U+9089;U+DB40-U+DD17)

cat << FIN > $tmp-ans
FIN

${com} $tmp-check $tmp-data	> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6
#TEST1の拡大版
# BOM付きと改行記号CRLF/CRの試験
# BOM削除をしなくてもたまたまOKとなる例

cat << FIN > $tmp-check
A N3
B n4
C x3
D X6
E Z14
F z8
FIN

cat << FIN > $tmp-data
A 200
B 12345
C abcde
D_001 xxxxxx
D_002 xxxxx
D_003 xxxx
E あいうえお漢字
F アイウエオ
FIN

cat << FIN > $tmp-ans
B n4
C x3
D_002 X6
D_003 X6
F z8
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-check $tmp-checkBOMCRLF $tmp-checkBOMCR
BOMandEOLvariation $tmp-data $tmp-dataBOMCRLF $tmp-dataBOMCR

${com} $tmp-checkBOMCRLF $tmp-dataBOMCRLF >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

${com} $tmp-checkBOMCRLF $tmp-dataBOMCR >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

${com} $tmp-checkBOMCR $tmp-dataBOMCRLF >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-3 error"

# これは<check_file>の先頭行と<name_file>の先頭行の名前部が「BOM+A」で一致しているのでエラーにならない

###########################################
#TEST7
#TEST1の拡大版
# BOM付きと改行記号CRLF/CRの試験

cat << FIN > $tmp-check
A N3
B n4
C x3
D X6
E Z14
F z8
FIN

cat << FIN > $tmp-data
B 12345
A 2000
C abcde
D_001 xxxxxx
D_002 xxxxx
D_003 xxxx
E あいうえお漢字
F アイウエオ
FIN

cat << FIN > $tmp-ans
B n4
A N3
C x3
D_002 X6
D_003 X6
F z8
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-check $tmp-checkBOMCRLF $tmp-checkBOMCR
BOMandEOLvariation $tmp-data $tmp-dataBOMCRLF $tmp-dataBOMCR

# BOM削除が正しくできれば
# <check_file>先頭の「A N3」によって<name_file>の「A 2000」がエラーとなり
# <name_file>先頭の「B 12345」は<check_file>の「B n4」によってエラーとなる
# BOM削除ができていないと
# <check_file>先頭の「A N3」による<name_file>の検査ができず「A 2000」はパスされる
# <name_file>先頭の「B 12345」は<check_file>の「B n4」による検査ができずパスされる
# この結果コマンドの出力には
# B n4
# A N3
# の2行が現われない

# BOM付きCRLF改行
${com} $tmp-checkBOMCRLF $tmp-dataBOMCRLF >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-1 error"

# BOM付きCR改行
${com} $tmp-checkBOMCR $tmp-dataBOMCR >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-2 error"

# pipe接続（tmp-check/tmp-data）

# BOM付きCRLF改行
cat $tmp-checkBOMCRLF | ${com} - $tmp-dataBOMCRLF >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-3 error"

cat $tmp-dataBOMCRLF | ${com} $tmp-checkBOMCRLF - >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-4 error"

# BOM付きCR改行
cat $tmp-checkBOMCR | ${com} - $tmp-dataBOMCR >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-5 error"

cat $tmp-dataBOMCR | ${com} $tmp-checkBOMCR - >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-6 error"

###########################################
#TEST8
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

cat << FIN > $tmp-check1
A N3
B n4
C x3
D X6
E Z10
F z8
ゔ Z14
H Z10
I Z10
J Z10
K Z10
FIN

# throughオプションを使用する実行例のためのcheckファイル
cat << FIN > $tmp-check2
A N3
B n4
C x3
D X6
E Z10
F z8
ゔ Z14
H Z9
I Z9
J Z9
K Z9
FIN

# $tmp-checkのtag「ゔ」はNFC

cat << FIN > $tmp-data
A 200
B 12345
C abcde
D_001 xxxxxx
D_002 xxxxx
D_003 xxxx
E あいうえお
F かきくけこ
ゔ がぎぐげご漢字
H パピプペポ
I パピプペポ
J ヷヸヴヹヺ
K ヷヸヴヹヺ
FIN

# $tmp-dataの説明
# ゔ がぎぐげご漢字 tag「ゔ」はNFD 値「がぎぐげご」もNFD
# H パピプペポ 半濁音NFC
# I パピプペポ 半濁音NFD
# J ヷヸヴヹヺ 濁音NFC
# K ヷヸヴヹヺ 濁音NFD

cat << FIN > $tmp-ngword
がぎぐげご か行濁音NFD
パピプペポ ハ行半濁音NFD
ヷヸヴヹヺ ワ行濁音NFD
FIN

# $tmp-ngwordの説明
# がぎぐげご か行濁音NFD #先頭文字列の先頭文字「が(U+304B;U+3099)」（NFD）が「が(U+304C)」（NFC）に変換されてngwordとして使用される
# パピプペポ ハ半濁音NFD #先頭文字列の先頭文字「パ(U+30CF;U+309A)」（NFD）が「パ(U+30D1)」（NFC）に変換されてngwordとして使用される
# ヷヸヴヹヺ ワ濁音NFD #先頭文字列の先頭文字「ヷ(U+30EF;U+3099)」（NFD）が「ヷ(U+30F7)」（NFC）に変換されてngwordとして使用される

# $tmp-ngwordがngwordのファイルとして指定されたとき
# 「ゔ がぎぐげご漢字」はNFC変換をするとngword「が(U+304C)」を含むので「ゔ Z14」はエラーとなる
# 「H パピプペポ」はngword「パ(U+30D1)」を含むので「H Z10」はエラーとなる
# 「I パピプペポ 半濁音NFD」はNFC変換をするとngword「パ(U+30D1)」を含むので「I Z10」はエラーとなる
# 「J ヷヸヴヹヺ 濁音NFC」はngword「ヷ(U+30F7)」を含むので「J Z10」はエラーとなる
# 「K ヷヸヴヹヺ 濁音NFD」はNFC変換をするとngword「ヷ(U+30F7)」を含むので「K Z10」はエラーとなる

cat << FIN > $tmp-ans1
B n4
C x3
D_002 X6
D_003 X6
F z8
FIN

cat << FIN > $tmp-ans2
B n4
C x3
D_002 X6
D_003 X6
F z8
ゔ Z14
H Z10
I Z10
J Z10
K Z10
FIN

${com} $tmp-check1 $tmp-data >$tmp-out
diff $tmp-ans1 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-1 error"

# ngwordオプションの使用
${com} --ngword $tmp-ngword $tmp-check1 $tmp-data >$tmp-out
diff $tmp-ans2 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-2 error"

# throughオプションの使用
# throughオプション文字列の「パピプペポ」と「ヷヸヴヹヺ」はともにNFCだが$tmp-data中のNFDの文字列「パピプペポ」「ヷヸヴヹヺ」にも（NFC変換によって）一致する
# これにより$tmp-dataのtag H/I/J/Kの行に対する検査はthroughされる

${com} --through パピプペポ --through ヷヸヴヹヺ $tmp-check2 $tmp-data >$tmp-out
diff $tmp-ans1 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-3 error"

###########################################
#TEST9
#  「ゆるい文字列一致」の検査のために改修した
# 代用対/結合文字列/IVS/SVSの処理検査ngwordあり
# ngwordファイルがBOM付きCRLF/CR改行のファイルで標準入力となった場合も検査する

cat << FIN > $tmp-check
A N3
B n4
C x3
D X6
E Z4
F Z4
G Z4
H Z4
I Z4
J Z4
K Z4
L Z4
M Z4
N Z4
O Z4
P Z4
Q Z4
R Z10
FIN

cat << FIN > $tmp-data
A 200
B 12345
C abcde
D_001 xxxxxx
D_002 xxxxx
D_003 xxxx
E 吉田
F 𠮷田
G 今川
H 𫝆川
I 𫝆󠄁川
J 渡邊
K 渡邊󠄊
L 渡邊󠄋
M 渡邊󠄌
N 神山
O 神︀山
P 羽田
Q 羽︀田
R か゚き゚く゚け゚こ゚
FIN

cat << FIN > $tmp-ngword
   邊 ア
FIN

# $tmp-ngwordの説明
#邊 ア # 邊(U+908A)
# これにより「J 渡邊」はngword「邊(U+908A)」を含むので「J Z4」はエラーとなる
# また、UCSとIVSとの「ゆるい文字列一致」により「K 渡邊󠄊」/「L 渡邊󠄋」/「M 渡邊󠄌」もngword「邊(U+908A)」と「ゆるく一致」するIVS文字を含むので
# 「K Z4」「L Z4」「M Z4」ともにエラーとなる

# $tmp-dataの一部の説明
#J 渡邊	#邊(U+908A)
#K 渡邊󠄊 #IVSの例で邊󠄊(U+908A;U+E010A)代用対では邊󠄊(U+908A;U+DB40-U+DD0A)
#L 渡邊󠄋 #IVSの例で邊󠄋(U+908A;U+E010B)代用対では邊󠄋(U+908A;U+DB40-U+DD0B)
#M 渡邊󠄌 #IVSの例で邊󠄌(U+908A;U+E010C)代用対では邊󠄌(U+908A;U+DB40-U+DD0C)

cat << FIN > $tmp-ans
B n4
C x3
D_002 X6
D_003 X6
J Z4
K Z4
L Z4
M Z4
FIN

${com} --ngword $tmp-ngword $tmp-check $tmp-data	> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-1 error"

# ngwordファイルが標準入力となった場合の追加分
BOMandEOLvariation $tmp-ngword $tmp-ngwordBOMCRLF $tmp-ngwordBOMCR

cat $tmp-ngwordBOMCRLF | ${com} --ngword - $tmp-check $tmp-data	> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-2 error"

cat $tmp-ngwordBOMCR | ${com} --ngword - $tmp-check $tmp-data	> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-3 error"

###########################################
#TEST10
#  「ゆるい文字列一致」の検査のために改修した
# 代用対/結合文字列/IVS/SVSの処理検査ngwordあり

cat << FIN > $tmp-check
A N3
B n4
C x3
D X6
E Z4
F Z4
G Z4
H Z4
I Z4
J Z4
K Z4
L Z4
M Z4
N Z4
O Z4
P Z4
Q Z4
R Z10
FIN

cat << FIN > $tmp-data
A 200
B 12345
C abcde
D_001 xxxxxx
D_002 xxxxx
D_003 xxxx
E 吉田
F 𠮷田
G 今川
H 𫝆川
I 𫝆󠄁川
J 渡邊
K 渡邊󠄊
L 渡邊󠄋
M 渡邊󠄌
N 神山
O 神︀山
P 羽田
Q 羽︀田
R か゚き゚く゚け゚こ゚
FIN

cat << FIN > $tmp-ngword
邊󠄊なべ イ
邊󠄋なべ ウ
邊󠄌なべ エ
FIN

# $tmp-ngwordの説明
#邊󠄊なべ イ #IVSの例で邊󠄊(U+908A;U+E010A)代用対では邊󠄊(U+908A;U+DB40-U+DD0A)
#邊󠄋なべ ウ #IVSの例で邊󠄋(U+908A;U+E010B)代用対では邊󠄋(U+908A;U+DB40-U+DD0B)
#邊󠄌なべ エ #IVSの例で邊󠄌(U+908A;U+E010C)代用対では邊󠄌(U+908A;U+DB40-U+DD0C)

# $tmp-dataの一部の説明
#J 渡邊	#邊(U+908A)
#K 渡邊󠄊 #IVSの例で邊󠄊(U+908A;U+E010A)代用対では邊󠄊(U+908A;U+DB40-U+DD0A)
#L 渡邊󠄋 #IVSの例で邊󠄋(U+908A;U+E010B)代用対では邊󠄋(U+908A;U+DB40-U+DD0B)
#M 渡邊󠄌 #IVSの例で邊󠄌(U+908A;U+E010C)代用対では邊󠄌(U+908A;U+DB40-U+DD0C)

# これにより「J 渡邊」はngwordの同じ基底文字を持つIVSすべてと「ゆいる一致」をするUCS「邊(U+908A)」を含むので「J Z4」はエラーとなる
# これにより「K 渡邊󠄊」はngword「邊󠄊(U+908A;U+E010A)」を含むので「K Z4」はエラーとなる
# これにより「L 渡邊󠄋」はngword「邊󠄋(U+908A;U+E010B)」を含むので「L Z4」はエラーとなる
# これにより「M 渡邊󠄌」はngword「邊󠄊(U+908A;U+E010C)」を含むので「M Z4」はエラーとなる

cat << FIN > $tmp-ans
B n4
C x3
D_002 X6
D_003 X6
J Z4
K Z4
L Z4
M Z4
FIN

${com} --ngword $tmp-ngword $tmp-check $tmp-data	> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10 error"

###########################################
#TEST11
# TEST1の変形版
#  「ゆるい文字列一致」の検査
# 通常のチェック
cat << FIN > $tmp-check
A N3
B n4
C x3
邉 X6
E Z14
F z8
FIN

# 「邉 X6」の名前部は「邉(U+9089)」で異体字選択子を持たないUCS

cat << FIN > $tmp-data
A 200
B 12345
C abcde
邉󠄐_001 xxxxxx
邉󠄑_002 xxxxx
邉󠄒_003 xxxx
E あいうえお漢字
F アイウエオ
FIN

# 「邉󠄐_001 xxxxxx」の名前部の連番部前は「邉󠄐(U+9089;U+E0110)」でIVS
# 「邉󠄑_002 xxxxx」の名前部の連番部前は「邉󠄑(U+9089;U+E0111)」でIVS
# 「邉󠄒_003 xxxx」の名前部の連番部前は「邉󠄒(U+9089;U+E0112)」でIVS

cat << FIN > $tmp-ans
B n4
C x3
邉󠄑_002 X6
邉󠄒_003 X6
F z8
FIN

# <check-file>の「邉(U+9089)」は<name-file>では基底部がU+9089のIVS異体字組「邉󠄐(U+9089;U+E0110)」/「邉󠄑(U+9089;U+E0111)」/「邉󠄒(U+9089;U+E0112)」のいずれとも（ゆるく）一致する
# しかし、邉󠄑_002/邉󠄒_003は値部の属性が<check-file>で指定された「X6」と一致しないため（エラーとして）出力される

${com} $tmp-check $tmp-data >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST11-1 error"

# check-file側にIVSを置きname-file側にUCSを置く

cat << FIN > $tmp-check
A N3
B n4
C x3
邉󠄑 X6
E Z14
F z8
FIN

# 「邉󠄑 X6」の名前部は「邉󠄑(U+9089;U+E0111)」でIVS

cat << FIN > $tmp-data
A 200
B 12345
C abcde
邉_001 xxxxxx
邉󠄐_002 xxxxx
邉󠄒_003 xxxx
E あいうえお漢字
F アイウエオ
FIN

# 「邉_001 xxxxxx」の名前部の連番部前は「邉(U+9089)」でUCS
# 「邉󠄐_002 xxxxx」の名前部の連番部前は「邉󠄐(U+9089;U+E0110)」でIVS
# 「邉󠄒_003 xxxx」の名前部の連番部前は「邉󠄒(U+9089;U+E0112)」でIVS
cat << FIN > $tmp-ans
B n4
C x3
F z8
FIN

# <check-file>の「邉󠄑 X6」は<name-file>の「邉_001 xxxxxx」とのみtag部が（ゆるく）一致するので検査が行なわれ「邉󠄐_002 xxxxx」/「邉󠄒_003 xxxx」は検査されない

${com} $tmp-check $tmp-data >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST11-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
