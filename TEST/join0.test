#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of join0
#
# usage: [<test-path>/]join0.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=join0 # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001
0000004
FIN

cat << FIN > $tmp-ans
0000001 鈴田______ 50 F 46 39 8 5 21
0000004 白土______ 40 M 58 71 20 10 6
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

# tranのキーフィールドが「重複のある昇順」になっている例で実行は正常終了する

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000001 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001
0000004
FIN

cat << FIN > $tmp-ans
0000001 鈴田______ 50 F 46 39 8 5 21
0000001 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-2 error"

# masterのキーフィールドが「重複のない昇順」になっていない例

cat << FIN > $tmp-master
0000001
0000004
0000004
FIN

# TEST1で「masterのキーフィールドが「重複のない昇順」になっていない例」を実行しエラーメッセージが出るように設定されている

${com} key=1 $tmp-master $tmp-tran > $tmp-out 2> /dev/null

# tranのキーフィールドが「昇順」になっていない例

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000000 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001
0000004
FIN

# TEST1で「tranのキーフィールドが「昇順」になっていない例」を実行しエラーメッセージが出るように設定されている

${com} key=1 $tmp-master $tmp-tran > $tmp-out 2> /dev/null

###########################################
#TEST2

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001
0000004
FIN

cat << FIN > $tmp-ans
0000001 鈴田______ 50 F 46 39 8 5 21
0000004 白土______ 40 M 58 71 20 10 6
FIN

cat << FIN > $tmp-ng
0000000 浜地______ 50 F 91 59 20 76 54
0000003 杉山______ 26 F 30 50 71 36 30
0000005 崎村______ 50 F 82 79 16 21 80
FIN

${com} +ng key=1 $tmp-master $tmp-tran > $tmp-out 2> $tmp-out2
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"
diff $tmp-ng $tmp-out2
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

###########################################
#TEST3
# キー指定で「数値、範囲(/)、列挙(@)、NF、NF-<n>」の組み合わせ

cat << FIN > $tmp-tran
AAA 001 上田 
BBB 002 堅田
CCC 003 太田
DDD 004 山田
FIN

cat << FIN > $tmp-master
002 堅田
003 太田
FIN

cat << FIN > $tmp-ans
BBB 002 堅田
CCC 003 太田
FIN

# 【注意】 キーとなるフィールドのうち名前の部分は大小関係が「上田 < 堅田 < 太田 < 山田」になっているのでkey=2/3とkey=3/2で実行結果に違いは出ない

${com} key=2/3 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

# コマンドの説明
# キー指定の「NF-1/NF@NF@NF-1@3/2@2/3@3@2@NF/NF-1」はNF=3で「2～3と3と2と3～2と2～3と3と2と3～2」となり重複を解消して「2,3」と整理される

${com} key=NF-1/NF@NF@NF-1@3/2@2/3@3@2@NF/NF-1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

# コマンドの説明
# キー指定の「NF/NF-1@NF@NF-1@3/2@2/3@3@2@NF-1/NF」はNF=3で「3～2と3と2と3～2と2～3と3と2と2～3」となり重複を解消して「3,2」と整理される

${com} key=NF/NF-1@NF@NF-1@3/2@2/3@3@2@NF-1/NF $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-3 error"

###########################################
#TEST4

cat << FIN > $tmp-tran
02 73900
03 77204045
04 100887035
05 17844598
07 4068131
08 864000
09 1731501
10 506000
11 2482922
12 12697028
FIN

cat << FIN > $tmp-master
02 aaa
03 bbb
04 ccc
05 ddd
06 eee 
07 fff
08 ggg
09 hhh
10 iii
11 jjj
12 kkk
FIN

cat << FIN > $tmp-ans
02 73900
03 77204045
04 100887035
05 17844598
07 4068131
08 864000
09 1731501
10 506000
11 2482922
12 12697028
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
#TEST5
# 不連続キー

cat << FIN > $tmp-master
B a A nameA1
C c A nameAC
FIN

cat << FIN > $tmp-tranOld
x A w B x
x B z A x
x B y C x
x C x A x
FIN

cat << FIN > $tmp-tran
x B z A x
x C x A x
x A w B x
x B y C x
FIN

cat << FIN > $tmp-ans
x B z A x
x C x A x
FIN

${com} key=4@2@2@4 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out

[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6
#TEST1の拡大版
# BOM付き/BOM無しと改行記号CRLF/CR/LFの試験

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001
0000004
FIN

cat << FIN > $tmp-ans
0000001 鈴田______ 50 F 46 39 8 5 21
0000004 白土______ 40 M 58 71 20 10 6
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-master $tmp-masterBOMCRLF $tmp-masterBOMCR
BOMandEOLvariation $tmp-tran $tmp-tranBOMCRLF $tmp-tranBOMCR

# tmp-masterの試験

# BOM付きCRLF
${com} key=1 $tmp-masterBOMCRLF $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

# BOM付きCR
${com} key=1 $tmp-masterBOMCR $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

# tmp-masterのpipe接続試験

# BOM付きCRLF
cat $tmp-masterBOMCRLF | ${com} key=1 - $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-3 error"

# BOM付きCR
cat $tmp-masterBOMCR | ${com} key=1 - $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-4 error"

# tmp-tranの試験

# BOM付きCRLF
${com} key=1 $tmp-master $tmp-tranBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-5 error"

# BOM付きCR
${com} key=1 $tmp-master $tmp-tranBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-6 error"

# tmp-tranのpipe接続試験

# BOM付きCRLF
cat $tmp-tranBOMCRLF | ${com} key=1 $tmp-master -  > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-7 error"

# BOM付きCR
cat $tmp-tranBOMCR | ${com} key=1 $tmp-master -  > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-8 error"

###########################################
#TEST7
# キーに0を指定すると「全欄指定」となる

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000000 太田______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 上田______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 上田______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-ans
0000001 鈴田______ 50 F 46 39 8 5 21
0000004 白土______ 40 M 58 71 20 10 6
FIN

${com} key=0 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-1 error"

# キー指定にひとつでも0があれば全欄指定となる

${com} key=0@5/3 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-2 error"

###########################################
#TEST8
# TEST1の変形
# tranの欄数に変化がある例
# 
cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 杉山______ 26 F 30 50 71 36
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001
0000004
FIN

cat << FIN > $tmp-ans
0000001 鈴田______ 50 F 46 39 8 5 21
0000004 白土______ 40 M 58 71 20 10 6
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
