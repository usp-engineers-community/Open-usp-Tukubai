#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of comma
#
# usage: [<test-path>/]comma.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=comma # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1

cat << FIN > $tmp-in
0.124 12412553 12345 -1242.32 2.24144
FIN

cat << FIN > $tmp-ans
0.124 12,412,553 12345 -1,242.32 2.24144
FIN

${com} 2 4 5 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

${com} 2 5/4 2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-2 error"

###########################################
#TEST2
# 3桁カンマ

cat << FIN > $tmp-in
20060201 296030 6710000
20060202 1300100 3130000
20060203 309500 20100
20060204 16300 300100
20060205 41000 210000
20060206 771100 400000
FIN

cat << FIN > $tmp-ans
20060201 296,030 6,710,000
20060202 1,300,100 3,130,000
20060203 309,500 20,100
20060204 16,300 300,100
20060205 41,000 210,000
20060206 771,100 400,000
FIN

${com} 2 3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
#TEST3
# 4桁カンマ

cat << FIN > $tmp-in
20060201 296030 6710000
20060202 1300100 3130000
20060203 309500 20100
20060204 16300 300100
20060205 41000 210000
20060206 771100 400000
FIN

cat << FIN > $tmp-ans
20060201 29,6030 671,0000
20060202 130,0100 313,0000
20060203 30,9500 2,0100
20060204 1,6300 30,0100
20060205 4,1000 21,0000
20060206 77,1100 40,0000
FIN

${com} -4 2 3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4
# 先頭行を除いてカンマ変換する

cat << FIN > $tmp-in
年月日 売上高 発注高
20060201 296030 6710000
20060202 1300100 3130000
20060203 309500 20100
20060204 16300 300100
20060205 41000 210000
20060206 771100 400000
FIN

cat << FIN > $tmp-ans
年月日 売上高 発注高
20060201 296,030 6,710,000
20060202 1,300,100 3,130,000
20060203 309,500 20,100
20060204 16,300 300,100
20060205 41,000 210,000
20060206 771,100 400,000
FIN

${com} +h 2 3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
#TEST5
# 数字の文字列を直接引数に指定してカンマを追加する
# 負数に対してもカンマ処理が実施される
# Python3でも（Python2での処理と同様にするため）全角数字は数字として認識させない

cat << FIN > $tmp-ans
1,234,567
FIN

${com} -d 1234567 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-1 error"

cat << FIN > $tmp-ans
-1,234,567.890
FIN

${com} -d -1234567.890 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-2 error"

cat << FIN > $tmp-ans
123,4567
FIN

${com} -d4 1234567 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-3 error"

# echo 次のコマンド実行ではパラメータに全角数字を与えるので「フィールド値が数値の形式ではありません。」のメッセージが出てエラーとなるのが正しい
# TEST5-4はエラーで終了するように設定されている

${com} -d １２３４５６７ > $tmp-out 2>  /dev/null
[ $? -eq 1 ] ; ERROR_CHECK "TEST5-4 error"

###########################################
#TEST6
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-in
0.124 12412553 12345 -1242.32 2.24144
FIN

cat << FIN > $tmp-ans
0.124 12,412,553 12345 -1,242.32 2.24144
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きCRLF
${com} 2 4 5 $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

# BOM付きCR
${com} 2 4 5 $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF | ${com} 2 4 5 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-3 error"

# BOM付きCR
cat $tmp-inBOMCR | ${com} 2 4 5 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-4 error"

# フィールド範囲指定

# BOM付きCRLF
${com} 2 5/4 2 $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-5 error"

# BOM付きCR
${com} 2 5/4 2 $tmp-inBOMCR > $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-6 error"

###########################################
#TEST7
# TEST1の拡大版
# キー指定の試験
#  キー指定に使用できる記号
#    /   a/bでフィールド番号aからフィールド番号bまでの区間を指定する a<=bの正順でもa>=bの逆順でもよい
#    NF  入力行にあるフィールドの数を表わす NF-nとすると最後（最右端）のフィールドから数えてn番前のフィールドを意味する
#    @   単一のフィールドまたはフィールド区間を連接するための区切りに使用する 複数回の連接もできる
#  指定したフィールドに重複があっても単一化される

cat << FIN > $tmp-in
0.124 12412553 12345 -1242.32 2.24144
FIN

cat << FIN > $tmp-ans
0.124 12,412,553 12,345 -1,242.32 2.24144
FIN

# コマンドの説明
# フィールド指定の「3@NF-3@5/4@NF-1/NF」はNF=5なので「3と2と(5～4)と(4～5)」となり重複を解消して整理すると「2,3,4,5」となる

${com} 3@NF-3@5/4@NF-1/NF $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7 error"

###########################################
#TEST8
# 全フィールドを対象とするふたつの方法
#  フィールド指定を省略する
#  フィールド番号に0を指定する（このとき同時に指定した他のフィールド番号は無視される）

cat << FIN > $tmp-in
20060201 296030 6710000
20060202 1300100 3130000
20060203 309500 20100
20060204 16300 300100
20060205 41000 210000
20060206 771100 400000
FIN

cat << FIN > $tmp-ans
20,060,201 296,030 6,710,000
20,060,202 1,300,100 3,130,000
20,060,203 309,500 20,100
20,060,204 16,300 300,100
20,060,205 41,000 210,000
20,060,206 771,100 400,000
FIN

${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-1 error"

${com} 0 4 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-2 error"

###########################################
#TEST9
# 3桁カンマ
# TEST1の変形
#  欄数が変化する場合の試験
#  行頭/行末の空白除去試験
#  連続空白の単空白化試験

cat << FIN > $tmp-in
20060201 296030 6710000
20060202 1300100 3130000
 20060203 309500 20100    123 
20060204 16300 300100
20060205 41000 210000
20060206 771100 400000
FIN

cat << FIN > $tmp-ans
20060201 296,030 6,710,000
20060202 1,300,100 3,130,000
20060203 309,500 20,100 123
20060204 16,300 300,100
20060205 41,000 210,000
20060206 771,100 400,000
FIN

${com} 2 3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
