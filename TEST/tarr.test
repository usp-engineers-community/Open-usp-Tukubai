#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of tarr
#
# usage: [<test-path>/]tarr.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=tarr # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1

cat << FIN > $tmp-in
あ 1 い 2 う
FIN

cat << FIN > $tmp-ans
あ
1
い
2
う
FIN

${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

cat $tmp-in		|
${com} - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-2 error"

###########################################
#TEST2

cat << FIN > $tmp-in
001 あ 1 い 2 う
001 123 345
002 1 2
002 1 2 3
FIN

cat << FIN > $tmp-ans
001 あ
001 1
001 い
001 2
001 う
001 123
001 345
002 1
002 2
002 1
002 2
002 3
FIN

${com} num=1 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"

cat $tmp-in	|
${com} num=1 -	> $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

###########################################
#TEST3

cat << FIN > $tmp-in
001 あ 1 い 2 う
001 2
001 123 345
002 1 2
002 1 2 3
FIN

cat << FIN > $tmp-ans
001 あ 1
001 い 2
001 う
001 2
001 123 345
002 1 2
002 1 2
002 3
FIN

${com} num=1 -2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4 江頭泣き別れ問題

cat << FIN > $tmp-in
001 江頭 1 い 2 江頭
001 2
001 123 345
002 1 2
002 1 2 3
FIN

cat << FIN > $tmp-ans
001 江頭 1
001 い 2
001 江頭
001 2
001 123 345
002 1 2
002 1 2
002 3
FIN

${com} num=1 -2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
#TEST5 -d指定

cat <<FIN >$tmp-in
0000000 浜地______ 50 F 91@59@20@76@54
0000001 鈴田______ 50 F 46@39@8@5@21
0000003 杉山______ 26 F 30@50@71@36@30
0000004 白土______ 40 M 58@71@20@10@6
FIN

cat <<FIN >$tmp-ans
0000000 浜地______ 50 F 91
0000000 浜地______ 50 F 59
0000000 浜地______ 50 F 20
0000000 浜地______ 50 F 76
0000000 浜地______ 50 F 54
0000001 鈴田______ 50 F 46
0000001 鈴田______ 50 F 39
0000001 鈴田______ 50 F 8
0000001 鈴田______ 50 F 5
0000001 鈴田______ 50 F 21
0000003 杉山______ 26 F 30
0000003 杉山______ 26 F 50
0000003 杉山______ 26 F 71
0000003 杉山______ 26 F 36
0000003 杉山______ 26 F 30
0000004 白土______ 40 M 58
0000004 白土______ 40 M 71
0000004 白土______ 40 M 20
0000004 白土______ 40 M 10
0000004 白土______ 40 M 6
FIN

${com} -d@ num=4 $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6
# -d指定で4バイト文字（Unicode符号位置がU+FFFF超の文字）を与える


cat <<FIN >$tmp-in
0000000 浜地______ 50 F 91𠆢59𠆢20𠆢76𠆢54
0000001 鈴田______ 50 F 46𠆢39𠆢8𠆢5𠆢21
0000003 杉山______ 26 F 30𠆢50𠆢71𠆢36𠆢30
0000004 白土______ 40 M 58𠆢71𠆢20𠆢10𠆢6
FIN

# 「𠆢」は𠆢(U+201A2)代用対では𠆢(U+D840-U+DDA2)

cat <<FIN >$tmp-ans
0000000 浜地______ 50 F 91
0000000 浜地______ 50 F 59
0000000 浜地______ 50 F 20
0000000 浜地______ 50 F 76
0000000 浜地______ 50 F 54
0000001 鈴田______ 50 F 46
0000001 鈴田______ 50 F 39
0000001 鈴田______ 50 F 8
0000001 鈴田______ 50 F 5
0000001 鈴田______ 50 F 21
0000003 杉山______ 26 F 30
0000003 杉山______ 26 F 50
0000003 杉山______ 26 F 71
0000003 杉山______ 26 F 36
0000003 杉山______ 26 F 30
0000004 白土______ 40 M 58
0000004 白土______ 40 M 71
0000004 白土______ 40 M 20
0000004 白土______ 40 M 10
0000004 白土______ 40 M 6
FIN

${com} -d𠆢 num=4 $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
#TEST7
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-in
あ 1 い 2 う
え 3 お 4 か
FIN

cat << FIN > $tmp-ans
あ
1
い
2
う
え
3
お
4
か
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きCRLF
${com} $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-1 error"

# BOM付きCR
${com} $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF | ${com} - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-3 error"

# BOM付きCR
cat $tmp-inBOMCR | ${com} - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-4 error"

###########################################
#TEST8
# TEST6の変型版
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する
# 縦展開するフィールドのフィールドセパレータに関してNFD文字があるときの処理

# 入力ファイルtmp-in1の中の「が」は「が(U+304B;U+3099)」でNFD
cat <<FIN >$tmp-in1
0000000 浜地______ 50 F 91が59が20が76が54
0000001 鈴田______ 50 F 46が39が8が5が21
0000003 杉山______ 26 F 30が50が71が36が30
0000004 白土______ 40 M 58が71が20が10が6
FIN

# 入力ファイルtmp-in2の中の「が」は「が(U+304C)」でNFC
cat <<FIN >$tmp-in2
0000000 浜地______ 50 F 91が59が20が76が54
0000001 鈴田______ 50 F 46が39が8が5が21
0000003 杉山______ 26 F 30が50が71が36が30
0000004 白土______ 40 M 58が71が20が10が6
FIN

cat <<FIN >$tmp-ans
0000000 浜地______ 50 F 91
0000000 浜地______ 50 F 59
0000000 浜地______ 50 F 20
0000000 浜地______ 50 F 76
0000000 浜地______ 50 F 54
0000001 鈴田______ 50 F 46
0000001 鈴田______ 50 F 39
0000001 鈴田______ 50 F 8
0000001 鈴田______ 50 F 5
0000001 鈴田______ 50 F 21
0000003 杉山______ 26 F 30
0000003 杉山______ 26 F 50
0000003 杉山______ 26 F 71
0000003 杉山______ 26 F 36
0000003 杉山______ 26 F 30
0000004 白土______ 40 M 58
0000004 白土______ 40 M 71
0000004 白土______ 40 M 20
0000004 白土______ 40 M 10
0000004 白土______ 40 M 6
FIN

# -dオプション指定値「が」は「が(U+304C)」でNFC
${com} -dが num=4 $tmp-in1 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-1 error"

# -dオプション指定値「が」は「が(U+304B;U+3099)」でNFD
${com} -dが num=4 $tmp-in2 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-2 error"

###########################################
#TEST9
# TEST6の変型版
# 文字列の「ゆるい一致」の試験
# 「ゆるい一致」で縦展開するフィールドのフィールドセパレータと入力行中の文字列との比較をする

# 入力ファイルtmp-in1の中の「齋󠄅」は「齋󠄅(U+9F4B;U+E0105)」でIVS
cat <<FIN >$tmp-in1
0000000 浜地______ 50 F 91齋󠄅59齋󠄅20齋󠄅76齋󠄅54
0000001 鈴田______ 50 F 46齋󠄅39齋󠄅8齋󠄅5齋󠄅21
0000003 杉山______ 26 F 30齋󠄅50齋󠄅71齋󠄅36齋󠄅30
0000004 白土______ 40 M 58齋󠄅71齋󠄅20齋󠄅10齋󠄅6
FIN

# 入力ファイルtmp-in2の中の「齋」は「齋(U+9F4B)」でUCS
cat <<FIN >$tmp-in2
0000000 浜地______ 50 F 91齋59齋20齋76齋54
0000001 鈴田______ 50 F 46齋39齋8齋5齋21
0000003 杉山______ 26 F 30齋50齋71齋36齋30
0000004 白土______ 40 M 58齋71齋20齋10齋6
FIN

cat <<FIN >$tmp-ans
0000000 浜地______ 50 F 91
0000000 浜地______ 50 F 59
0000000 浜地______ 50 F 20
0000000 浜地______ 50 F 76
0000000 浜地______ 50 F 54
0000001 鈴田______ 50 F 46
0000001 鈴田______ 50 F 39
0000001 鈴田______ 50 F 8
0000001 鈴田______ 50 F 5
0000001 鈴田______ 50 F 21
0000003 杉山______ 26 F 30
0000003 杉山______ 26 F 50
0000003 杉山______ 26 F 71
0000003 杉山______ 26 F 36
0000003 杉山______ 26 F 30
0000004 白土______ 40 M 58
0000004 白土______ 40 M 71
0000004 白土______ 40 M 20
0000004 白土______ 40 M 10
0000004 白土______ 40 M 6
FIN

# -dオプション指定値「齋」は「齋(U+9F4B)」でUCS
${com} -d齋 num=4 $tmp-in1 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-1 error"

# -dオプション指定値「齋󠄅」は「齋󠄅(U+9F4B;U+E0105)」でIVS
${com} -d齋󠄅 num=4 $tmp-in2 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
