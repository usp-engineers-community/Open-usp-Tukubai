#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of divsen
#
# usage: [<test-path>/]divsen.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=divsen # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$
marumecom="${pythonversion} ${commandpath}/marume" # marumeコマンドを使用するため

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r\n/g' -e 's/$/\r/' $1 >$2	# $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r/g' $1 | tr '\n' '\r' >$3	# $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1

cat << FIN > $tmp-in
0.124 12412553 12345 -1242.32 2.24144
FIN

cat << FIN > $tmp-ans
0.124 12413 12345 -1 0
FIN

${com} 2 4 5 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

cat $tmp-in	|
${com} 2 4 5 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-2 error"

${com} 2 5/4 2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-3 error"

# フィールド指定にひとつでも0があれば全フィールド指定となる

cat << FIN > $tmp-ans
0 12413 12 -1 0
FIN

${com} 2 5/4 0 2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-4 error"

###########################################
#TEST2

cat << FIN > $tmp-in
0.124 12412553 12345 -1242.32 2.24144
FIN

cat << FIN > $tmp-ans
0.124 12412.553 12345 -1.24232 0.00224144
FIN

${com} -s 2 4 5 $tmp-in 	|
${marumecom} 2.6 4.8 5.11            > $tmp-out
cat $tmp-ans		|
${marumecom} 2.6 4.8 5.11     |
diff - $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"

cat $tmp-in	|
${com} -s 2 4 5 |
${marumecom} 2.6 4.8 5.11            > $tmp-out
cat $tmp-ans		|
${marumecom} 2.6 4.8 5.11     |
diff - $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

###########################################
#TEST3
# ファイルからの入力

cat << FIN > $tmp-in
20060201 296030 6710000
20060202 1300100 3130000
20060203 309500 20100
20060204 16300 300100
20060205 41000 210000
20060206 771100 400000
FIN

cat << FIN > $tmp-ans
20060201 296 6710
20060202 1300 3130
20060203 310 20
20060204 16 300
20060205 41 210
20060206 771 400
FIN

${com} 2 3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-in
0.124 12412553 12345 -1242.32 2.24144
FIN

cat << FIN > $tmp-ans
0.124 12413 12345 -1 0
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きUTF8ファイルCRLF
${com} 2 4 5 $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

# BOM付きUTF8ファイルCR
${com} 2 4 5 $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

# pipe接続

# BOM付きUTF8ファイルCRLF
cat $tmp-inBOMCRLF | ${com} 2 4 5 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-3 error"

# BOM付きUTF8ファイルCR
cat $tmp-inBOMCR | ${com} 2 4 5 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-4 error"

# フィールド範囲指定

# BOM付きUTF8ファイルCRLF
${com} 2 5/4 2 $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-5 error"

# BOM付きUTF8ファイルCR
${com} 2 5/4 2 $tmp-inBOMCR > $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-6 error"

###########################################
#TEST5
# データ行の欄数がコマンドパラメータで指定された（処理対象）欄位置リスト中の最大値を超える場合の処理試験

echo "1 2 3 4 5" | ${com} -s 2 3 4 > $tmp-out

cat << FIN > $tmp-ans
1 0.002 0.003 0.004 5
FIN

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-1 error"

# 欄位置指定の変種（重複/降順/範囲/NF）の処理試験

echo "1 2 3 4 5" | ${com} -s 2 3 3 2 NF-1/2 > $tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-2 error"

###########################################
#TEST6
# TEST3の拡大版
# キー指定の試験
#  キー指定に使用できる記号
#    /   a/bでフィールド番号aからフィールド番号bまでの区間を指定する a<=bの正順でもa>=bの逆順でもよい
#    NF  入力行にあるフィールドの数を表わす NF-nとすると最後（最右端）のフィールドから数えてn番前のフィールドを意味する
#    @   単一のフィールドまたはフィールド区間を連接するための区切りに使用する 複数回の連接もできる
#  指定したフィールドに重複があっても単一化される

cat << FIN > $tmp-in
20060201 296030 6710000 100
20060202 1300100 3130000 1000
20060203 309500 20100 10000
20060204 16300 300100 100000
20060205 41000 210000 1000000
20060206 771100 400000 10000000
FIN

cat << FIN > $tmp-ans
20060201 296 6710 0
20060202 1300 3130 1
20060203 310 20 10
20060204 16 300 100
20060205 41 210 1000
20060206 771 400 10000
FIN

${com} 2/4 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

${com} 2 NF/3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

${com} NF@3/2@2/4 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-3 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
