#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of calclock
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=calclock # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r\n/g' -e 's/$/\r/' $1 >$2	# $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r/g' $1 | tr '\n' '\r' >$3	# $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}
###########################################
#TEST1

EPO=$(echo 19700101 | ${com} 1 - | awk '{print $2}')
[ "$EPO" -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

EPO=$(echo 0 | ${com} -r 1 - | awk '{print $2}')
[ "$EPO" -eq 19700101000000 ] ; ERROR_CHECK "TEST1-2 error"

###########################################
#TEST2

cat << FIN > $tmp-in
0001 0000007 20060201 20060206 117 8335 -145
0001 0000007 20060203 20060206 221 15470 0
0001 0000007 20060205 20060206 85 5950 0
0001 0000007 20060206 20060206 293 20527 -17
0001 0000007 20060207 20060206 445 31150 0
0002 0000007 20060208 20060206 150 11768 -1268
0002 0000007 20060209 20060206 588 41160 0
0002 0000007 20060210 20060206 444 31080 0
FIN

cat << FIN > $tmp-ans
0001 0000007 20060201 1138752000 20060206 1139184000 117 8335 -145
0001 0000007 20060203 1138924800 20060206 1139184000 221 15470 0
0001 0000007 20060205 1139097600 20060206 1139184000 85 5950 0
0001 0000007 20060206 1139184000 20060206 1139184000 293 20527 -17
0001 0000007 20060207 1139270400 20060206 1139184000 445 31150 0
0002 0000007 20060208 1139356800 20060206 1139184000 150 11768 -1268
0002 0000007 20060209 1139443200 20060206 1139184000 588 41160 0
0002 0000007 20060210 1139529600 20060206 1139184000 444 31080 0
FIN

${com} 3 4 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
#TEST3

cat << FIN > $tmp-in
0001 0000007 20060201 117 8335 -145
0001 0000007 20060203 221 15470 0
0001 0000007 20060205 85 5950 0
0001 0000007 20060206 293 20527 -17
0001 0000007 20060207 445 31150 0
0002 0000007 20060208 150 11768 -1268
0002 0000007 20060209 588 41160 0
0002 0000007 20060210 444 31080 0
FIN

cat << FIN > $tmp-ans
20060204
20060206
20060208
20060209
20060210
20060211
20060212
20060213
FIN

${com} 3 $tmp-in                |
awk '{print $4+86400*3}'        |
${com} -r 1 -                   |
awk '{print substr($2,1,8)}'  	> $tmp-out     
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-in
0001 0000007 20060201 20060206 117 8335 -145
0001 0000007 20060203 20060206 221 15470 0
0001 0000007 20060205 20060206 85 5950 0
0001 0000007 20060206 20060206 293 20527 -17
0001 0000007 20060207 20060206 445 31150 0
0002 0000007 20060208 20060206 150 11768 -1268
0002 0000007 20060209 20060206 588 41160 0
0002 0000007 20060210 20060206 444 31080 0
FIN

cat << FIN > $tmp-ans
0001 0000007 20060201 1138752000 20060206 1139184000 117 8335 -145
0001 0000007 20060203 1138924800 20060206 1139184000 221 15470 0
0001 0000007 20060205 1139097600 20060206 1139184000 85 5950 0
0001 0000007 20060206 1139184000 20060206 1139184000 293 20527 -17
0001 0000007 20060207 1139270400 20060206 1139184000 445 31150 0
0002 0000007 20060208 1139356800 20060206 1139184000 150 11768 -1268
0002 0000007 20060209 1139443200 20060206 1139184000 588 41160 0
0002 0000007 20060210 1139529600 20060206 1139184000 444 31080 0
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きCRLF
${com} 3 4 $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

# BOM付きCR
${com} 3 4 $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF | ${com} 3 4 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-3 error"

# BOM付きCR
cat $tmp-inBOMCR | ${com} 3 4 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-4 error"

###########################################
#TEST5
# TEST1の拡大版
# キー指定の試験
#  キー指定に使用できる記号
#    /   a/bでフィールド番号aからフィールド番号bまでの区間を指定する a<=bの正順でもa>=bの逆順でもよい
#    NF  入力行にあるフィールドの数を表わす NF-nとすると最後（最右端）のフィールドから数えてn番前のフィールドを意味する
#    @   単一のフィールドまたはフィールド区間を連接するための区切りに使用する 複数回の連接もできる
#  指定したフィールドに重複があっても単一化される

cat << FIN > $tmp-in
0001 0000007 20060201 20060206 20060211 117 8335 -145
0001 0000007 20060203 20060206 20060211 221 15470 0
0001 0000007 20060205 20060206 20060211 85 5950 0
0001 0000007 20060206 20060206 20060211 293 20527 -17
0001 0000007 20060207 20060206 20060211 445 31150 0
0002 0000007 20060208 20060206 20060211 150 11768 -1268
0002 0000007 20060209 20060206 20060211 588 41160 0
0002 0000007 20060210 20060206 20060211 444 31080 0
FIN

cat << FIN > $tmp-ans
0001 0000007 20060201 1138752000 20060206 1139184000 20060211 1139616000 117 8335 -145
0001 0000007 20060203 1138924800 20060206 1139184000 20060211 1139616000 221 15470 0
0001 0000007 20060205 1139097600 20060206 1139184000 20060211 1139616000 85 5950 0
0001 0000007 20060206 1139184000 20060206 1139184000 20060211 1139616000 293 20527 -17
0001 0000007 20060207 1139270400 20060206 1139184000 20060211 1139616000 445 31150 0
0002 0000007 20060208 1139356800 20060206 1139184000 20060211 1139616000 150 11768 -1268
0002 0000007 20060209 1139443200 20060206 1139184000 20060211 1139616000 588 41160 0
0002 0000007 20060210 1139529600 20060206 1139184000 20060211 1139616000 444 31080 0
FIN

# コマンドの説明
# フィールド指定の「NF-4@3@5/4@NF-5/NF-3」はNF=8なので「4と3と(5～4)と(3～5)」となり重複を解消して整理すると「3,4,5」となる

${com} NF-4@3@5/4@NF-5/NF-3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6
# 全フィールドを対象とするふたつの方法
#  フィールド指定を省略する
#  フィールド番号に0を指定する（このとき同時に指定した他のフィールド番号は無視される）

cat << FIN > $tmp-in
20060201 20060206
20060203 20060206
20060205 20060206
20060206 20060206
20060207 20060206
20060208 20060206
20060209 20060206
20060210 20060206
FIN

cat << FIN > $tmp-ans
20060201 1138752000 20060206 1139184000
20060203 1138924800 20060206 1139184000
20060205 1139097600 20060206 1139184000
20060206 1139184000 20060206 1139184000
20060207 1139270400 20060206 1139184000
20060208 1139356800 20060206 1139184000
20060209 1139443200 20060206 1139184000
20060210 1139529600 20060206 1139184000
FIN

${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

${com} 0 3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

###########################################
#TEST7
# 入力ファイルのフィールド数が変化する場合の処理試験

cat << FIN > $tmp-in
20060201 20060206
20060203
20060205 20060206
20060206 20060206
20060207 20060206
20060208 20060206
20060209 20060206
20060210 20060206
FIN

cat << FIN > $tmp-ans
20060201 1138752000 20060206 1139184000
20060203 1138924800
20060205 1139097600 20060206 1139184000
20060206 1139184000 20060206 1139184000
20060207 1139270400 20060206 1139184000
20060208 1139356800 20060206 1139184000
20060209 1139443200 20060206 1139184000
20060210 1139529600 20060206 1139184000
FIN

${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
