#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of calclock
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=calclock # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
elif test "$2" = "runghc"; then
	pythonversion="runghc --"
else
	pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

###########################################
#TEST1

EPO=$(echo 19700101 | ${com} 1 - | awk '{print $2}')
[ "$EPO" -eq 0 ] ; ERROR_CHECK "TEST1.1 error"

echo ${com} -r 1 -
EPO=$(echo 0 | ${com} -r 1 - | awk '{print $2}')
[ "$EPO" -eq 19700101000000 ] ; ERROR_CHECK "TEST1.2 error"

###########################################
#TEST2

cat << FIN > $tmp-in
0001 0000007 20060201 20060206 117 8335 -145
0001 0000007 20060203 20060206 221 15470 0
0001 0000007 20060205 20060206 85 5950 0
0001 0000007 20060206 20060206 293 20527 -17
0001 0000007 20060207 20060206 445 31150 0
0002 0000007 20060208 20060206 150 11768 -1268
0002 0000007 20060209 20060206 588 41160 0
0002 0000007 20060210 20060206 444 31080 0
FIN

cat << FIN > $tmp-ans
0001 0000007 20060201 1138752000 20060206 1139184000 117 8335 -145
0001 0000007 20060203 1138924800 20060206 1139184000 221 15470 0
0001 0000007 20060205 1139097600 20060206 1139184000 85 5950 0
0001 0000007 20060206 1139184000 20060206 1139184000 293 20527 -17
0001 0000007 20060207 1139270400 20060206 1139184000 445 31150 0
0002 0000007 20060208 1139356800 20060206 1139184000 150 11768 -1268
0002 0000007 20060209 1139443200 20060206 1139184000 588 41160 0
0002 0000007 20060210 1139529600 20060206 1139184000 444 31080 0
FIN

${com} 3 4 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
#TEST3

cat << FIN > $tmp-in
0001 0000007 20060201 117 8335 -145
0001 0000007 20060203 221 15470 0
0001 0000007 20060205 85 5950 0
0001 0000007 20060206 293 20527 -17
0001 0000007 20060207 445 31150 0
0002 0000007 20060208 150 11768 -1268
0002 0000007 20060209 588 41160 0
0002 0000007 20060210 444 31080 0
FIN

cat << FIN > $tmp-ans
20060204
20060206
20060208
20060209
20060210
20060211
20060212
20060213
FIN

${com} 3 $tmp-in                |
awk '{print $4+86400*3}'        |
${com} -r 1 -                   |
awk '{print substr($2,1,8)}'  	> $tmp-out     
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
