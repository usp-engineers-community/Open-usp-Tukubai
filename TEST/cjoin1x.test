#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of cjoin1x
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=cjoin1x # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
# TEST1
# 通常の連結

cat << FIN > $tmp-master
1 東京1
1 東京2
2 大阪1
2 大阪2
FIN

cat << FIN > $tmp-tran
3 栄
2 京橋
3 金山
1 上野
1 新宿
4 天神
2 難波
3 熱田
2 梅田
4 博多
FIN

cat << FIN > $tmp-ans
2 大阪1 京橋
2 大阪2 京橋
1 東京1 上野
1 東京2 上野
1 東京1 新宿
1 東京2 新宿
2 大阪1 難波
2 大阪2 難波
2 大阪1 梅田
2 大阪2 梅田
FIN

${com} key=1 $tmp-master $tmp-tran >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
# TEST2

cat << FIN > $tmp-ng-ans
3 栄
3 金山
4 天神
3 熱田
4 博多
FIN

# ngオプションを使ってマッチしないレコードをファイルディスクリプター指定をして出力します。

${com} +ng3 key=1 $tmp-master $tmp-tran > $tmp-ok-out 3> $tmp-ng-out
diff $tmp-ng-ans $tmp-ng-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"

# ngオプションでファイルディスクリプター指定を省略すると、マッチしないレコードは標準エラー出力へ出力します。

${com} +ng key=1 $tmp-master $tmp-tran > $tmp-ok-out 2> $tmp-ng-out
diff $tmp-ng-ans $tmp-ng-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

###########################################
# TEST3
# 連続するキーフィールドを指定して連結

cat << FIN > $tmp-master
A A nameA1
A A nameA2
A B nameAB
FIN

cat << FIN > $tmp-tran
x x B A x x
x x A B x x
x x A A x x
FIN

cat << FIN > $tmp-ans
x x A B nameAB x x
x x A A nameA1 x x
x x A A nameA2 x x
FIN

${com} key=3/4 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
# TEST4
# 離れたキーフィールドの場合(通常は使用しません)

cat << FIN > $tmp-master
B a A nameA1
B b A nameA2
C c A nameAC
FIN

cat << FIN > $tmp-tran
x A w B x
x C x A x
x B y C x
x B z A x
FIN

cat << FIN > $tmp-ans
x C x A c nameAC x
x B z A a nameA1 x
x B z A b nameA2 x
FIN

${com} key=4@2 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
# TEST5
# 離れたキーフィールドの場合(通常は使用しません)←3フィールド

cat << FIN > $tmp-master
x B a A nameA1
x B b A nameA2
x C c A nameAC
FIN

cat << FIN > $tmp-tran
x A w B x
x C x A x
x B y C x
x B z A x
FIN

cat << FIN > $tmp-ans
x C x A c nameAC x
x B z A a nameA1 x
x B z A b nameA2 x
FIN

${com} key=4@1@2 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6
# キーリストの重複解消試験(1)←3フィールドの重複解消

cat << FIN > $tmp-master
B a A nameA1
B b A nameA2
C c A nameAC
FIN

cat << FIN > $tmp-tran
x A w B x
x C x A x
x B y C x
x B z A x
FIN

cat << FIN > $tmp-ans
x C x A c nameAC x
x B z A a nameA1 x
x B z A b nameA2 x
FIN

${com} key=4@2@2@4@4@2 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
# TEST7
# キーリストの重複解消試験(2)←2フィールドの重複解消

cat << FIN > $tmp-master
x B a A nameA1
x B b A nameA2
x C c A nameAC
FIN

cat << FIN > $tmp-ans
x C x A c nameAC x
x B z A a nameA1 x
x B z A b nameA2 x
FIN

${com} key=4@1@2@1@2@4 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7 error"

###########################################
# TEST8
# キーフィールドの列挙指定と範囲指定の連続混用および重複指定解消の試験
# キーフィールドの指定に絶対位置指定とNF相対位置指定を混在させた場合は
# tranのフィールド数は固定でなければならない

cat << FIN > $tmp-master
A A nameA1
A A nameA2
A B nameAB
FIN

cat << FIN > $tmp-tran
x x B A x x
x x A B x x
x x A A x x
FIN

cat << FIN > $tmp-ans
x x A B nameAB x x
x x A A nameA1 x x
x x A A nameA2 x x
FIN

${com} key=3/4@4@3@NF-3/NF-2@4/3 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8 error"

###########################################
# TEST9
# TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験
# 通常の連結

cat << FIN > $tmp-master
1 東京1
1 東京2
2 大阪1
2 大阪2
FIN

cat << FIN > $tmp-tran
3 栄
2 京橋
3 金山
1 上野
1 新宿
4 天神
2 難波
3 熱田
2 梅田
4 博多
FIN

cat << FIN > $tmp-ans
2 大阪1 京橋
2 大阪2 京橋
1 東京1 上野
1 東京2 上野
1 東京1 新宿
1 東京2 新宿
2 大阪1 難波
2 大阪2 難波
2 大阪1 梅田
2 大阪2 梅田
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-master $tmp-masterBOMCRLF $tmp-masterBOMCR
BOMandEOLvariation $tmp-tran $tmp-tranBOMCRLF $tmp-tranBOMCR

# BOM付きCRLF
${com} key=1 $tmp-masterBOMCRLF $tmp-tranBOMCRLF >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-1 error"

# BOM付きCR
${com} key=1 $tmp-masterBOMCR $tmp-tranBOMCR >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-2 error"

# pipe接続 master

# BOM付きCRLF
cat $tmp-masterBOMCRLF | ${com} key=1 - $tmp-tranBOMCRLF >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-3 error"

# BOM付きCR
cat $tmp-masterBOMCR | ${com} key=1 - $tmp-tranBOMCR >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-4 error"

# pipe接続 tran

# BOM付きCRLF
cat $tmp-tranBOMCRLF | ${com} key=1 $tmp-masterBOMCRLF - >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-5 error"

# BOM付きCR
cat $tmp-tranBOMCR | ${com} key=1 $tmp-masterBOMCR - >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-6 error"

###########################################
# TEST10

# key指定に絶対位置指定とNF相対位置指定を混在させない場合は
# tranのフィールド数は一定でなくてもよい

# tranの後尾の欄をkeyとする試験

cat << FIN > $tmp-master
1 東京1
1 東京2
2 大阪1
2 大阪2
FIN

cat << FIN > $tmp-tran
栄 a 3
京橋 b x 2
金山 c 3
上野 d 1
新宿 e y z 1
天神 f 4
難波 g 2
熱田 h 3
梅田 i 2
博多 j 4
FIN

cat << FIN > $tmp-ans
京橋 b x 2 大阪1
京橋 b x 2 大阪2
上野 d 1 東京1
上野 d 1 東京2
新宿 e y z 1 東京1
新宿 e y z 1 東京2
難波 g 2 大阪1
難波 g 2 大阪2
梅田 i 2 大阪1
梅田 i 2 大阪2
FIN

${com} key=NF $tmp-master $tmp-tran >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-1 error"

# key指定に絶対位置指定とNF相対位置指定を混在させた場合は
# tranのフィールド数は固定でなければならない

# tranの先頭と後尾の欄をkeyとする試験

cat << FIN > $tmp-master
1 東京1 A 10 X Y
1 東京2 B 20 Z P
1 東京3 D 20 F Q
1 東京4 G 30 I V
2 大阪1 J 10 R b
2 大阪2 O 10 S c
2 大阪3 K 20 T d
2 大阪4 M 20 U e
FIN

cat << FIN > $tmp-tran
3 栄 a 30
2 京橋 b 20
3 金山 c 30
1 上野 d 10
1 新宿 e 20
4 天神 f 40
2 難波 g 20
3 熱田 h 30
2 梅田 i 20
4 博多 j 40
FIN

cat << FIN > $tmp-ans
2 京橋 b 20 大阪3 K T d
2 京橋 b 20 大阪4 M U e
1 上野 d 10 東京1 A X Y
1 新宿 e 20 東京2 B Z P
1 新宿 e 20 東京3 D F Q
2 難波 g 20 大阪3 K T d
2 難波 g 20 大阪4 M U e
2 梅田 i 20 大阪3 K T d
2 梅田 i 20 大阪4 M U e
FIN

${com} key=1@NF $tmp-master $tmp-tran >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
