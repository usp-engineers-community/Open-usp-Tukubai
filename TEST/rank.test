#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of rank
#
# usage: [<test-path>/]rank.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=rank # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r\n/g' -e 's/$/\r/' $1 >$2	# $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r/g' $1 | tr '\n' '\r' >$3	# $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1
# 引数を何も指定しないときは、単純に行番号を追加する

cat << FIN > $tmp-in
JPN 杉山______ 26
JPN 崎村______ 27
JPN 梶川______ 27
JPN 柳本______ 30
USA BOB_______ 25
USA GEROGE____ 29
USA SAM_______ 29
USA TOM_______ 35
FIN

cat << FIN > $tmp-ans
1 JPN 杉山______ 26
2 JPN 崎村______ 27
3 JPN 梶川______ 27
4 JPN 柳本______ 30
5 USA BOB_______ 25
6 USA GEROGE____ 29
7 USA SAM_______ 29
8 USA TOM_______ 35
FIN

${com} $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
#TEST2
# ref指定

cat << FIN > $tmp-ans
1 JPN 杉山______ 26
2 JPN 崎村______ 27
3 JPN 梶川______ 27
4 JPN 柳本______ 30
1 USA BOB_______ 25
2 USA GEROGE____ 29
3 USA SAM_______ 29
4 USA TOM_______ 35
FIN

${com} ref=1 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"

cat $tmp-in | ${com} ref=1 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

###########################################
#TEST3
# key指定

cat << FIN > $tmp-ans
1 JPN 杉山______ 26
2 JPN 崎村______ 27
2 JPN 梶川______ 27
4 JPN 柳本______ 30
5 USA BOB_______ 25
6 USA GEROGE____ 29
6 USA SAM_______ 29
8 USA TOM_______ 35
FIN

${com} key=3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

cat $tmp-in | ${com} key=3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

###########################################
#TEST4
# refとkey指定

cat << FIN > $tmp-ans
1 JPN 杉山______ 26
2 JPN 崎村______ 27
2 JPN 梶川______ 27
4 JPN 柳本______ 30
1 USA BOB_______ 25
2 USA GEROGE____ 29
2 USA SAM_______ 29
4 USA TOM_______ 35
FIN

${com} ref=1 key=3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
#TEST5
# refとkey指定
#   ref指定については「数値、範囲(/)、列挙(@)、NF、NF-<n>」の組み合わせ
#   key指定についてはNFとNF-<n>の使用の検査

cat << FIN > $tmp-in
JPN 東 杉山______ 26
JPN 東 崎村______ 27
JPN 西 梶川______ 27
JPN 西 柳本______ 30
USA East BOB_______ 25
USA East GEROGE____ 29
USA West SAM_______ 29
USA West TOM_______ 35
FIN

cat << FIN > $tmp-ans
1 JPN 東 杉山______ 26
2 JPN 東 崎村______ 27
1 JPN 西 梶川______ 27
2 JPN 西 柳本______ 30
1 USA East BOB_______ 25
2 USA East GEROGE____ 29
1 USA West SAM_______ 29
2 USA West TOM_______ 35
FIN

${com} ref=NF-3/NF-2@NF-3@NF-2@2/1@1/2@2@1@NF-2/NF-3 key=NF $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
#TEST6
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験
# 引数を何も指定しないときは、単純に行番号を追加する

cat << FIN > $tmp-in
JPN 杉山______ 26
JPN 崎村______ 27
JPN 梶川______ 27
JPN 柳本______ 30
USA BOB_______ 25
USA GEROGE____ 29
USA SAM_______ 29
USA TOM_______ 35
FIN

cat << FIN > $tmp-ans
1 JPN 杉山______ 26
2 JPN 崎村______ 27
3 JPN 梶川______ 27
4 JPN 柳本______ 30
5 USA BOB_______ 25
6 USA GEROGE____ 29
7 USA SAM_______ 29
8 USA TOM_______ 35
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きCRLF
${com} $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

# BOM付きCR
${com} $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF | ${com} - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-3 error"

# BOM付きCR
cat $tmp-inBOMCR | ${com} - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-4 error"

###########################################
#TEST7
# refとkey指定
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

cat << FIN > $tmp-in
がぎぐげご 杉山______ あいうえお 「がぎぐげご」は濁音NFC
がぎぐげご 崎村______ だぢづでど 「がぎぐげご」は濁音NFD「だぢづでど」は濁音NFC
がぎぐげご 梶川______ だぢづでど 「がぎぐげご」は濁音NFC「だぢづでど」は濁音NFD
がぎぐげご 柳本______ かきくけこ 「がぎぐげご」は濁音NFD
ざじずぜぞ BOB_______ さしすせそ 「ざじずぜぞ」は濁音NFC
ざじずぜぞ GEROGE____ ばびぶべぼ 「ざじずぜぞ」は濁音NFD「ばびぶべぼ」は濁音NFC
ざじずぜぞ SAM_______ ばびぶべぼ 「ざじずぜぞ」は濁音NFC「ばびぶべぼ」は濁音NFD
ざじずぜぞ TOM_______ たちつてと 「ざじずぜぞ」は濁音NFD
FIN

cat << FIN > $tmp-ans
1 がぎぐげご 杉山______ あいうえお 「がぎぐげご」は濁音NFC
2 がぎぐげご 崎村______ だぢづでど 「がぎぐげご」は濁音NFD「だぢづでど」は濁音NFC
2 がぎぐげご 梶川______ だぢづでど 「がぎぐげご」は濁音NFC「だぢづでど」は濁音NFD
4 がぎぐげご 柳本______ かきくけこ 「がぎぐげご」は濁音NFD
1 ざじずぜぞ BOB_______ さしすせそ 「ざじずぜぞ」は濁音NFC
2 ざじずぜぞ GEROGE____ ばびぶべぼ 「ざじずぜぞ」は濁音NFD「ばびぶべぼ」は濁音NFC
2 ざじずぜぞ SAM_______ ばびぶべぼ 「ざじずぜぞ」は濁音NFC「ばびぶべぼ」は濁音NFD
4 ざじずぜぞ TOM_______ たちつてと 「ざじずぜぞ」は濁音NFD
FIN

${com} ref=1 key=3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7 error"

###########################################
#TEST8
# 行の欄数変化への対応と行中行端の空白処理の試験
# TEST5の変形
# refとkey指定
#   ref指定については「数値、範囲(/)、列挙(@)、NF、NF-<n>」の組み合わせ
#   key指定についてはNFを使用

cat << FIN > $tmp-in
JPN       杉山______ A   東 26
JPN       崎村______ A B 東 27
JPN       梶川______     西 27
JPN       柳本______ C   西 30
USA D     E          F East 25
 USA      GEROGE____ G East 29 
USA       SAM_______   West 29
USA       TOM_______ H West 35
FIN

cat << FIN > $tmp-ans
1 JPN 杉山______ A 東 26
2 JPN 崎村______ A B 東 27
1 JPN 梶川______ 西 27
2 JPN 柳本______ C 西 30
1 USA D E F East 25
2 USA GEROGE____ G East 29
1 USA SAM_______ West 29
2 USA TOM_______ H West 35
FIN

${com} ref=1@NF-1 key=NF $tmp-in > $tmp-out
#${com} ref=NF-3/NF-2@NF-3@NF-2@2/1@1/2@2@1@NF-2/NF-3 key=NF $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
