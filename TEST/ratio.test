#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of ratio
#
# usage: [<test-path>/]ratio.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=ratio # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r\n/g' -e 's/$/\r/' $1 >$2	# $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	sed -e 's/^/\xEF\xBB\xBF/' -e ':LoopTop; N; $! b LoopTop; s/\n/\r/g' $1 | tr '\n' '\r' >$3	# $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1

cat << FIN > $tmp-in
a店 1日目 103  62
b店 1日目 210 113
c店 1日目 81   52
d店 1日目 75   48
e店 1日目 211 140
FIN

cat << FIN > $tmp-ans
a店 1日目 103 15.1 62
b店 1日目 210 30.9 113
c店 1日目 81 11.9 52
d店 1日目 75 11.0 48
e店 1日目 211 31.0 140
FIN

${com} key=3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

cat $tmp-in | ${com} key=3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-2 error"

cat $tmp-in | ${com} key=3 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-3 error"

cat $tmp-in | ${com} key=NF-1 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-4 error"

###########################################
#TEST2

cat << FIN > $tmp-in
a店 1日目 103  62
a店 2日目 157  94
a店 3日目  62  30
b店 1日目 210 113
b店 2日目 237 121
b店 3日目 150  82
c店 1日目  81  52
c店 2日目  76  49
c店 3日目  38  21
d店 1日目  75  48
d店 2日目  72  42
d店 3日目  34  19
e店 1日目 211 140
e店 2日目 149  91
e店 3日目 120  73
FIN

cat << FIN > $tmp-ans
a店 1日目 103 15.1 62
b店 1日目 210 30.9 113
c店 1日目 81 11.9 52
d店 1日目 75 11.0 48
e店 1日目 211 31.0 140
a店 2日目 157 22.7 94
b店 2日目 237 34.3 121
c店 2日目 76 11.0 49
d店 2日目 72 10.4 42
e店 2日目 149 21.6 91
a店 3日目 62 15.3 30
b店 3日目 150 37.1 82
c店 3日目 38 9.4 21
d店 3日目 34 8.4 19
e店 3日目 120 29.7 73
FIN

cat $tmp-in		|
sort -k2,2 -k1,1	|
${com} ref=2 key=3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
#TEST3

cat << FIN > $tmp-in
a店 1日目 103  62
b店 1日目 210 113
c店 1日目 81   52
d店 1日目 75   48
e店 1日目 211 140
FIN

cat << FIN > $tmp-ans
a店 1日目 103 15.147 62
b店 1日目 210 30.882 113
c店 1日目 81 11.912 52
d店 1日目 75 11.029 48
e店 1日目 211 31.029 140
FIN

${com} -3 key=3 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

${com} -3 key=NF-1 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

###########################################
#TEST4
# ref指定/key指定の重複解消と非昇順の昇順化
# ref指定/key指定で「数値、範囲(/)、列挙(@)、NF、NF-<n>」の組み合わせ

cat << FIN > $tmp-in
a店 1日目 103  62
a店 2日目 157  94
a店 3日目  62  30
b店 1日目 210 113
b店 2日目 237 121
b店 3日目 150  82
c店 1日目  81  52
c店 2日目  76  49
c店 3日目  38  21
d店 1日目  75  48
d店 2日目  72  42
d店 3日目  34  19
e店 1日目 211 140
e店 2日目 149  91
e店 3日目 120  73
FIN

cat << FIN > $tmp-ans
a店 1日目 103 15.1 62 14.9
b店 1日目 210 30.9 113 27.2
c店 1日目 81 11.9 52 12.5
d店 1日目 75 11.0 48 11.6
e店 1日目 211 31.0 140 33.7
a店 2日目 157 22.7 94 23.7
b店 2日目 237 34.3 121 30.5
c店 2日目 76 11.0 49 12.3
d店 2日目 72 10.4 42 10.6
e店 2日目 149 21.6 91 22.9
a店 3日目 62 15.3 30 13.3
b店 3日目 150 37.1 82 36.4
c店 3日目 38 9.4 21 9.3
d店 3日目 34 8.4 19 8.4
e店 3日目 120 29.7 73 32.4
FIN

cat $tmp-in		|
sort -k2,2 -k1,1	|
${com} ref=2@2 key=4/3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

cat $tmp-in		|
sort -k2,2 -k1,1	|
${com} ref=2@2 key=NF/NF-1@NF@NF-1@4/3@3/4@4@3@NF-1/NF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

###########################################
#TEST5
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-in
a店 1日目 103  62
b店 1日目 210 113
c店 1日目 81   52
d店 1日目 75   48
e店 1日目 211 140
FIN

cat << FIN > $tmp-ans
a店 1日目 103 15.1 62
b店 1日目 210 30.9 113
c店 1日目 81 11.9 52
d店 1日目 75 11.0 48
e店 1日目 211 31.0 140
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きCRLF
${com} key=3 $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-1 error"

# BOM付きCR
${com} key=3 $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF | ${com} key=3 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-3 error"

# BOM付きCR
cat $tmp-inBOMCR | ${com} key=3 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-4 error"

# keyにNFを使用する

# BOM付きCRLF
${com} key=NF-1 $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-5 error"

# BOM付きCRLF
${com} key=NF-1 $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-6 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF | ${com} key=NF-1 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-7 error"

# BOM付きCRLF
cat $tmp-inBOMCR | ${com} key=NF-1 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-8 error"

###########################################
#TEST6
# ref指定
# TEST2の変型版
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

cat << FIN > $tmp-in
a店 がぎぐげご 濁音NFC 103  62
b店 がぎぐげご 濁音NFD 210 113
c店 がぎぐげご 濁音NFC  81  52
d店 がぎぐげご 濁音NFD  75  48
e店 がぎぐげご 濁音NFC 211 140
a店 ざじずぜぞ 濁音NFC 157  94
b店 ざじずぜぞ 濁音NFD 237 121
c店 ざじずぜぞ 濁音NFC  76  49
d店 ざじずぜぞ 濁音NFD  72  42
e店 ざじずぜぞ 濁音NFC 149  91
a店 だぢづでど 濁音NFC  62  30
b店 だぢづでど 濁音NFD 150  82
c店 だぢづでど 濁音NFC  38  21
d店 だぢづでど 濁音NFD  34  19
e店 だぢづでど 濁音NFC 120  73
FIN

cat << FIN > $tmp-ans
a店 がぎぐげご 濁音NFC 103 15.1 62
b店 がぎぐげご 濁音NFD 210 30.9 113
c店 がぎぐげご 濁音NFC 81 11.9 52
d店 がぎぐげご 濁音NFD 75 11.0 48
e店 がぎぐげご 濁音NFC 211 31.0 140
a店 ざじずぜぞ 濁音NFC 157 22.7 94
b店 ざじずぜぞ 濁音NFD 237 34.3 121
c店 ざじずぜぞ 濁音NFC 76 11.0 49
d店 ざじずぜぞ 濁音NFD 72 10.4 42
e店 ざじずぜぞ 濁音NFC 149 21.6 91
a店 だぢづでど 濁音NFC 62 15.3 30
b店 だぢづでど 濁音NFD 150 37.1 82
c店 だぢづでど 濁音NFC 38 9.4 21
d店 だぢづでど 濁音NFD 34 8.4 19
e店 だぢづでど 濁音NFC 120 29.7 73
FIN

${com} ref=2 key=4 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
#TEST7
# 欄数変化に対応する処理の試験
# TEST1を原型とする
# 行頭と行末の空白削除と行中の連続空白を単空白に変換する試験も行なう

cat << FIN > $tmp-in
a店 1日目 103  62
b店 1日目 処理済 210 113
 c店 1日目 処理済 81   52 
d店 1日目 処理済 75   48
e店 1日目 211 140
FIN

cat << FIN > $tmp-ans
a店 1日目 103 15.1 62
b店 1日目 処理済 210 30.9 113
c店 1日目 処理済 81 11.9 52
d店 1日目 処理済 75 11.0 48
e店 1日目 211 31.0 140
FIN

cat $tmp-in | ${com} key=NF-1 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-4 error"

###########################################
#TEST8
# ref指定とkey指定の順序自由の確認

cat << FIN > $tmp-in
a店 1日目 103  62
a店 2日目 157  94
a店 3日目  62  30
b店 1日目 210 113
b店 2日目 237 121
b店 3日目 150  82
c店 1日目  81  52
c店 2日目  76  49
c店 3日目  38  21
d店 1日目  75  48
d店 2日目  72  42
d店 3日目  34  19
e店 1日目 211 140
e店 2日目 149  91
e店 3日目 120  73
FIN

cat << FIN > $tmp-ans
a店 1日目 103 15.1 62
b店 1日目 210 30.9 113
c店 1日目 81 11.9 52
d店 1日目 75 11.0 48
e店 1日目 211 31.0 140
a店 2日目 157 22.7 94
b店 2日目 237 34.3 121
c店 2日目 76 11.0 49
d店 2日目 72 10.4 42
e店 2日目 149 21.6 91
a店 3日目 62 15.3 30
b店 3日目 150 37.1 82
c店 3日目 38 9.4 21
d店 3日目 34 8.4 19
e店 3日目 120 29.7 73
FIN

cat $tmp-in		|
sort -k2,2 -k1,1	|
${com} ref=2 key=3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-1 error"

cat $tmp-in		|
sort -k2,2 -k1,1	|
${com} key=3 ref=2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-2 error"

###########################################
#TEST9
# ヘッダーのあるデータ

cat << FIN > $tmp-in
店   日付 売数 客数
a店 1日目  103   62
b店 1日目  210  113
c店 1日目   81   52
d店 1日目   75   48
e店 1日目  211  140
FIN

# ヘッダーとなる先頭行を飛ばして売数(第3フィールド)の店別構成比を求めて売数の次（第4フィールド）に挿入する。
# ヘッダー行は計算対象にはならず出力時に構成比の欄を「@」で示す

cat << FIN > $tmp-ans
店 日付 売数 @ 客数
a店 1日目 103 15.1 62
b店 1日目 210 30.9 113
c店 1日目 81 11.9 52
d店 1日目 75 11.0 48
e店 1日目 211 31.0 140
FIN

${com} +h key=3 $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9 error"

###########################################
#TEST10
# 欄数変化において許容できない場合の試験

# TEST10-1
# 欄数変化がなく正常に終了する例

cat << FIN > $tmp-in
a店 1日目 103  62 あ
b店 1日目 210 113 い
c店 1日目 81   52 う
d店 1日目 75   48 え
e店 1日目 211 140 お
FIN

cat << FIN > $tmp-ans
a店 1日目 103 15.1 62 14.9 あ
b店 1日目 210 30.9 113 27.2 い
c店 1日目 81 11.9 52 12.5 う
d店 1日目 75 11.0 48 11.6 え
e店 1日目 211 31.0 140 33.7 お
FIN

${com} key=3@NF-1 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-1 error"

# TEST10-2
# 第3行で欄数（NF）が減少して4になっているので キー指定「3」と「NF-1」の両者（両群）が交叉する
# この欄数変化に際してはエラーとなる

# ${name}のTEST10-2はエラーで終了するように設定されている

cat << FIN > $tmp-in
a店 1日目 103  62 あ
b店 1日目 210 113 い
c店 1日目 81   52
d店 1日目 75   48 え
e店 1日目 211 140 お
FIN

${com} key=3@NF-1 $tmp-in 2> /dev/null > $tmp-out
[ $? -ne 0 ] ; ERROR_CHECK "TEST10-2 error"

# TEST10-3
# 先頭行で絶対欄位置指定群とNF相対欄位置指定群の交叉があってもその後に欄数変化がなければエラーとはしない
# 先頭からの2行ではキー指定の「3」と「NF-1」はNF=4なので単一の「3」として集計処理される
# しかし、第3行で行末に欄数が増えたためエラーとなる

# ${name}のTEST10-3はエラーで終了するように設定されている

cat << FIN > $tmp-in
a店 1日目 103  62
b店 1日目 210 113
c店 1日目 81   52 う
d店 1日目 75   48 え
e店 1日目 211 140 お
FIN

${com} key=3@NF-1 $tmp-in 2> /dev/null > $tmp-out
[ $? -ne 0 ] ; ERROR_CHECK "TEST10-3 error"

# TEST10-4
# keyまたはrefで「/」を使用した区間指定で前端と後端の一方が絶対欄位置指定て他方がNF相対欄位置指定のときは
# 欄数の変化があるとエラーとなる
# 下の例では第3行目で欄数が変化してエラーとなる

cat << FIN > $tmp-in
a店 1日目 103  62 あ
b店 1日目 210 113 い
c店 1日目 81   52
d店 1日目 75   48 え
e店 1日目 211 140 お
FIN

# ${name}のTEST10-4はエラーで終了するように設定されている

${com} key=3/NF-1 $tmp-in 2> /dev/null > $tmp-out
[ $? -ne 0 ] ; ERROR_CHECK "TEST10-4 error"

###########################################
#TEST11
# keyに全欄指定の試験

# TEST11-1
# key指定にひとつでも0があると全欄をkeyとする

cat << FIN > $tmp-in
103  62
210 113
81   52
75   48
211 140
FIN

cat << FIN > $tmp-ans
103 15.1 62 14.9
210 30.9 113 27.2
81 11.9 52 12.5
75 11.0 48 11.6
211 31.0 140 33.7
FIN

${com} key=1@0@NF $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST11-1 error"

# TEST11-2
# keyとして全欄が指定がされているときは欄数の変化があるとエラーとなる
# 下の例では第3行目で欄数が変化しているのでエラーとなる

# ${name}のTEST11-2はエラーで終了するように設定されている

cat << FIN > $tmp-in
103  62
210 113
81   52 100
75   48
211 140
FIN

${com} key=1@0@NF $tmp-in 2> /dev/null > $tmp-out
[ $? -ne 0 ] ; ERROR_CHECK "TEST11-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
