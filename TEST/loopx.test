#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of loopx
#
# usage: [<test-path>/]loopx.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=loopx # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1

cat << FIN > $tmp-in1
0000000 浜地______
0000001 鈴田______
0000003 杉山______
0000004 白土______
0000005 崎村______
FIN

cat << FIN > $tmp-in2
1 2
3 4
FIN

cat << FIN > $tmp-ans
0000000 浜地______ 1 2
0000000 浜地______ 3 4
0000001 鈴田______ 1 2
0000001 鈴田______ 3 4
0000003 杉山______ 1 2
0000003 杉山______ 3 4
0000004 白土______ 1 2
0000004 白土______ 3 4
0000005 崎村______ 1 2
0000005 崎村______ 3 4
FIN

${com} $tmp-in1 $tmp-in2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
#TEST2
# 標準入力を使用

cat << FIN > $tmp-in1
0000000 浜地______
0000001 鈴田______
0000003 杉山______
0000004 白土______
0000005 崎村______
FIN

cat << FIN > $tmp-in2
1 2
3 4
FIN

cat << FIN > $tmp-ans
0000000 浜地______ 1 2
0000000 浜地______ 3 4
0000001 鈴田______ 1 2
0000001 鈴田______ 3 4
0000003 杉山______ 1 2
0000003 杉山______ 3 4
0000004 白土______ 1 2
0000004 白土______ 3 4
0000005 崎村______ 1 2
0000005 崎村______ 3 4
FIN

cat $tmp-in1 | ${com} - $tmp-in2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
#TEST3
# 標準入力を使用

cat << FIN > $tmp-in1
0000000 浜地______
0000001 鈴田______
0000005 崎村______
FIN

cat << FIN > $tmp-in2
1 2
3 4
FIN

cat << FIN > $tmp-in3
abc
def
FIN

cat << FIN > $tmp-ans
0000000 浜地______ 1 2 abc
0000000 浜地______ 1 2 def
0000000 浜地______ 3 4 abc
0000000 浜地______ 3 4 def
0000001 鈴田______ 1 2 abc
0000001 鈴田______ 1 2 def
0000001 鈴田______ 3 4 abc
0000001 鈴田______ 3 4 def
0000005 崎村______ 1 2 abc
0000005 崎村______ 1 2 def
0000005 崎村______ 3 4 abc
0000005 崎村______ 3 4 def
FIN

cat $tmp-in2 | ${com} $tmp-in1 - $tmp-in3 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4
# /dev/fd/xxを使用

cat << FIN > $tmp-ans
1 1
1 2
1 3
2 1
2 2
2 3
FIN

${com} <(seq 1 2) <(seq 1 3) > $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

###########################################
#TEST5
# 入力を重複指定で使用

cat << FIN > $tmp-in
0
1
FIN

cat << FIN > $tmp-ans
0 0 0
0 0 1
0 1 0
0 1 1
1 0 0
1 0 1
1 1 0
1 1 1
FIN

${com} $tmp-in $tmp-in $tmp-in > $tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-1 error"

cat $tmp-in | ${com} - - - > $tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-2 error"

cat $tmp-in | ${com} - /dev/fd/0 - > $tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-3 error"

cat $tmp-in | ${com} /dev/fd/0 /dev/fd/0 /dev/fd/0 > $tmp-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-4 error"

###########################################
#TEST6
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-in1
0000000 浜地______
0000001 鈴田______
0000003 杉山______
0000004 白土______
0000005 崎村______
FIN

cat << FIN > $tmp-in2
1 2
3 4
FIN

cat << FIN > $tmp-ans
0000000 浜地______ 1 2
0000000 浜地______ 3 4
0000001 鈴田______ 1 2
0000001 鈴田______ 3 4
0000003 杉山______ 1 2
0000003 杉山______ 3 4
0000004 白土______ 1 2
0000004 白土______ 3 4
0000005 崎村______ 1 2
0000005 崎村______ 3 4
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in1 $tmp-inBOMCRLF1 $tmp-inBOMCR1
BOMandEOLvariation $tmp-in2 $tmp-inBOMCRLF2 $tmp-inBOMCR2

# BOM付きCRLF
${com} $tmp-inBOMCRLF1 $tmp-inBOMCRLF2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-1 error"

# BOM付きCR
${com} $tmp-inBOMCR1 $tmp-inBOMCR2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-2 error"

# pipe接続

# BOM付きCRLF
cat $tmp-inBOMCRLF1 | ${com} - $tmp-inBOMCRLF2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-3 error"

# BOM付きCR
cat $tmp-inBOMCR1 | ${com} - $tmp-inBOMCR2 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6-4 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
