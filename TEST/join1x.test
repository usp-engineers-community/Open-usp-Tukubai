#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of join1x
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=join1x # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}


###########################################
# TEST1
# 通常の連結

cat << FIN > $tmp-master
1 すすきの
1 月寒
2 青葉町
2 広瀬町
3 上野
3 新宿
4 金山
4 栄
4 熱田
5 烏丸
5 伏見
6 梅田
6 難波
7 博多
7 天神
FIN

cat << FIN > $tmp-tran
1 札幌
3 東京
5 京都
7 福岡
FIN

cat << FIN > $tmp-ans
1 すすきの 札幌
1 月寒 札幌
3 上野 東京
3 新宿 東京
5 烏丸 京都
5 伏見 京都
7 博多 福岡
7 天神 福岡
FIN

${com} key=1 $tmp-master $tmp-tran >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
# TEST2
# +ng オプションの使い方

cat << FIN > $tmp-master
1 すすきの
1 月寒
3 上野
3 新宿
5 烏丸
5 伏見
7 博多
7 天神
FIN

cat << FIN > $tmp-tran
1 札幌
2 仙台
3 東京
4 名古屋
5 京都
6 大阪
7 福岡
FIN

cat << FIN > $tmp-ans
1 すすきの 札幌
1 月寒 札幌
3 上野 東京
3 新宿 東京
5 烏丸 京都
5 伏見 京都
7 博多 福岡
7 天神 福岡
FIN

cat << FIN > $tmp-ng-ans
2 仙台
4 名古屋
6 大阪
FIN

${com} +ng3 key=1 $tmp-master $tmp-tran > $tmp-out 3> $tmp-ng-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"
diff $tmp-ng-ans $tmp-ng-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

#ng指定で<fd> を省略すると、マッチしないレコードは標準エラー出力へ出力します。
${com} +ng key=1 $tmp-master $tmp-tran > $tmp-out 2> $tmp-ng-out

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-3 error"
diff $tmp-ng-ans $tmp-ng-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-4 error"

###########################################
# TEST3
# masterをstdinから入力

cat $tmp-master | ${com} +ng3 key=1 - $tmp-tran  >$tmp-out 3>$tmp-ng-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

diff $tmp-ng-ans $tmp-ng-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

###########################################
# TEST4
# tranをstdinから入力

cat $tmp-tran | ${com} +ng3 key=1 $tmp-master  >$tmp-out 3>$tmp-ng-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

diff $tmp-ng-ans $tmp-ng-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

###########################################
# TEST5
# 連続するキーフィールドの場合

cat << FIN > $tmp-master
A A nameA1
A A nameA2
A B nameAB
FIN

cat << FIN > $tmp-tran
x x A A x x
x x A B x x
x x B A x x
FIN

cat << FIN > $tmp-ans
x x A A nameA1 x x
x x A A nameA2 x x
x x A B nameAB x x
FIN

${com} key=3/4 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
# TEST6
# 離れたキーフィールドの場合(通常は使用しません)

cat << FIN > $tmp-master
B a A nameA1
B b A nameA2
C c A nameAC
FIN

cat << FIN > $tmp-tran
x B z A x
x C x A x
x A w B x
x B y C x
FIN

cat << FIN > $tmp-ans
x B z A a nameA1 x
x B z A b nameA2 x
x C x A c nameAC x
FIN

${com} key=4@2 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
# TEST7
# キーリストの重複解消試験

${com} key=4@2@2@4@4@2 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7 error"

###########################################
# TEST8
# キーフィールドの列挙指定と範囲指定の連続混用および重複指定解消の試験
# キーフィールドの指定に絶対位置指定とNF相対位置指定を混在させた場合は
# tranのフィールド数は固定でなければならない

cat << FIN > $tmp-master
A A nameA1
A A nameA2
A B nameAB
FIN

cat << FIN > $tmp-tran
x x A A x x
x x A B x x
x x B A x x
FIN

cat << FIN > $tmp-ans
x x A A nameA1 x x
x x A A nameA2 x x
x x A B nameAB x x
FIN

${com} key=3/4@4@3@NF-3/NF-2@4/3 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8 error"

###########################################
# TEST9
# TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験
# 通常の連結

cat << FIN > $tmp-master
1 すすきの
1 月寒
2 青葉町
2 広瀬町
3 上野
3 新宿
4 金山
4 栄
4 熱田
5 烏丸
5 伏見
6 梅田
6 難波
7 博多
7 天神
FIN

cat << FIN > $tmp-tran
1 札幌
3 東京
5 京都
7 福岡
FIN

cat << FIN > $tmp-ans
1 すすきの 札幌
1 月寒 札幌
3 上野 東京
3 新宿 東京
5 烏丸 京都
5 伏見 京都
7 博多 福岡
7 天神 福岡
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-master $tmp-masterBOMCRLF $tmp-masterBOMCR
BOMandEOLvariation $tmp-tran $tmp-tranBOMCRLF $tmp-tranBOMCR

# tmp-masterの試験

# BOM付きCRLF
${com} key=1 $tmp-masterBOMCRLF $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-1 error"

# BOM付きCR
${com} key=1 $tmp-masterBOMCR $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-2 error"

# tmp-masterのpipe接続試験

# BOM付きUTF8ファイルCRLF
cat $tmp-masterBOMCRLF | ${com} key=1 - $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-3 error"

# BOM付きUTF8ファイルCR
cat $tmp-masterBOMCR | ${com} key=1 - $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-4 error"

# tmp-tranの試験

# BOM付きCRLF
${com} key=1 $tmp-master $tmp-tranBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-5 error"

# BOM付きCR
${com} key=1 $tmp-master $tmp-tranBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-6 error"

# tmp-tranのpipe接続試験

# BOM付きCRLF
cat $tmp-tranBOMCRLF | ${com} key=1 $tmp-master -  > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-7 error"

# BOM付きCR
cat $tmp-tranBOMCR | ${com} key=1 $tmp-master -  > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9-8 error"

###########################################
# TEST10
# tranの後尾の欄をkeyとする試験

# key指定に絶対位置指定とNF相対位置指定を混在させない場合
# tranのフィールド数は変化してもよい

cat << FIN > $tmp-master
10 東京1
10 東京2
20 大阪1
20 大阪2
40 福岡1
40 福岡2
FIN

cat << FIN > $tmp-tran
新宿 a 10
上野 b x 11
京橋 e y z 20
梅田 c 21
難波 d 22
金山 f 30
栄 g 31
熱田 h 32
博多 i 40
天神 j 41
FIN

cat << FIN > $tmp-ans
新宿 a 10 東京1
新宿 a 10 東京2
京橋 e y z 20 大阪1
京橋 e y z 20 大阪2
博多 i 40 福岡1
博多 i 40 福岡2
FIN

${com} key=NF $tmp-master $tmp-tran >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-1 error"

# key指定に絶対位置指定とNF相対位置指定を混在させた場合
# tranのフィールド数は固定でなければならない

cat << FIN > $tmp-master
1 東京1 A 10 ab
1 東京2 B 20 cd
1 東京3 D 20 ef
1 東京4 G H gh
2 大阪1 J 20 ij
2 大阪2 O 20 kl
2 大阪3 K 21 mn
2 大阪4 M 30 op
FIN

cat << FIN > $tmp-tran
1 上野 d 10
1 新宿 e 20
2 京橋 b 20
2 難波 g 21
2 梅田 i 30
3 金山 c 30
3 栄 a 30
3 熱田 h 30
4 天神 f 40
4 博多 j 40
FIN

cat << FIN > $tmp-ans
1 上野 d 10 東京1 A ab
1 新宿 e 20 東京2 B cd
1 新宿 e 20 東京3 D ef
2 京橋 b 20 大阪1 J ij
2 京橋 b 20 大阪2 O kl
2 難波 g 21 大阪3 K mn
2 梅田 i 30 大阪4 M op
FIN

${com} key=1@NF $tmp-master $tmp-tran >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
