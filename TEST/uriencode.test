#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of uriencode
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=uriencode # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

###########################################
# TEST1
# 行単位エンコード : <file> のみを指定した場合

cat << FIN > $tmp-input
a b c d e
あ い\\ う\n え お
か き く け こ
FIN

cat << FIN > $tmp-answer
a%20b%20c%20d%20e
%E3%81%82%20%E3%81%84%5C%20%E3%81%86%0A%20%E3%81%88%20%E3%81%8A
%E3%81%8B%20%E3%81%8D%20%E3%81%8F%20%E3%81%91%20%E3%81%93
FIN

${com} "$tmp-input" > "$tmp-output"
diff $tmp-answer $tmp-output
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

${com} < "$tmp-input" > "$tmp-output"
diff $tmp-answer $tmp-output
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-2 error"

###########################################
# TEST2
# フィールドエンコード : フィールドを指定した場合

cat << FIN > $tmp-answer
a b c d e
%E3%81%82 い\\ %E3%81%86%0A え %E3%81%8A
%E3%81%8B き %E3%81%8F け %E3%81%93
FIN

${com} 1 3 5 "$tmp-input" > "$tmp-output"
diff $tmp-answer $tmp-output
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"

${com} 1 3 5 < "$tmp-input" > "$tmp-output"
diff $tmp-answer $tmp-output
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

###########################################
# TEST3
# 先頭スキップエンコード : num オプションを指定した場合

cat << FIN > $tmp-answer
a b c%20d%20e
あ い\\ %E3%81%86%0A%20%E3%81%88%20%E3%81%8A
か き %E3%81%8F%20%E3%81%91%20%E3%81%93
FIN

${com} num=2 "$tmp-input" > "$tmp-output"
diff $tmp-answer $tmp-output
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

${com} num=2 < "$tmp-input" > "$tmp-output"
diff $tmp-answer $tmp-output
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

###########################################
# TEST4
# 先頭スキップエンコード : num オプションを指定した場合

echo > $tmp-answer -n 'a%20b%20c%20d%20e%0A%E3%81%82%20%E3%81%84%5C%5C%20%E3%81%86%5Cn%20%E3%81%88%20%E3%81%8A%0A%E3%81%8B%20%E3%81%8D%20%E3%81%8F%20%E3%81%91%20%E3%81%93%0A'

${com} -a "$tmp-input" > "$tmp-output"
diff $tmp-answer $tmp-output
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

${com} -a < "$tmp-input" > "$tmp-output"
diff $tmp-answer $tmp-output
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK

exit 0
