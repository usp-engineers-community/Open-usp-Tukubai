#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of cjoin1
#
# usage: [<test-path>/]cjoin1.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=cjoin1 # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000004 白土______ 40 M 58 71 20 10 6
0000003 杉山______ 26 F 30 50 71 36 30
0000001 鈴田______ 50 F 46 39 8  5  21
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 B
0000004 A
FIN

cat << FIN > $tmp-ans
0000004 A 白土______ 40 M 58 71 20 10 6
0000001 B 鈴田______ 50 F 46 39 8 5 21
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
#TEST2

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000004 白土______ 40 M 58 71 20 10 6
0000005 崎村______ 50 F 82 79 16 21 80
0000003 杉山______ 26 F 30 50 71 36 30
0000001 鈴田______ 50 F 46 39 8  5  21
FIN

cat << FIN > $tmp-master
0000001 A
0000004 B
FIN

cat << FIN > $tmp-ans
0000004 B 白土______ 40 M 58 71 20 10 6
0000001 A 鈴田______ 50 F 46 39 8 5 21
FIN

cat << FIN > $tmp-ng
0000000 浜地______ 50 F 91 59 20 76 54
0000005 崎村______ 50 F 82 79 16 21 80
0000003 杉山______ 26 F 30 50 71 36 30
FIN

${com} +ng key=1 $tmp-master $tmp-tran > $tmp-out 2> $tmp-out2

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"
diff $tmp-ng $tmp-out2
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

${com} +ng3 key=1 $tmp-master $tmp-tran > $tmp-out 3> $tmp-out2

diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-3 error"
diff $tmp-ng $tmp-out2
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-4 error"

###########################################
#TEST3

cat << FIN > $tmp-tran
CCC 003 太田
AAA 001 山田 
BBB 002 上田
DDD 004 堅田
FIN

cat << FIN > $tmp-master
002 上田 富山
003 太田 石川
FIN

cat << FIN > $tmp-ans
003 太田 石川 CCC
002 上田 富山 BBB
FIN

${com} key=2/3 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
#TEST4

cat << FIN > $tmp-tran
DDD 004 堅田 へへへ
AAA 001 山田 あはは
CCC 003 太田 ふふふ
BBB 002 上田 おほほ
FIN

cat << FIN > $tmp-master
002 上田 富山
003 太田 石川
FIN

cat << FIN > $tmp-ans
003 太田 石川 CCC ふふふ
002 上田 富山 BBB おほほ
FIN

${com} key=2/3 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"


###########################################
#TEST5
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-tran
0000004 白土______ 40 M 58 71 20 10 6
0000000 浜地______ 50 F 91 59 20 76 54
0000003 杉山______ 26 F 30 50 71 36 30
0000001 鈴田______ 50 F 46 39 8  5  21
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 B
0000004 A
FIN

cat << FIN > $tmp-ans
0000004 A 白土______ 40 M 58 71 20 10 6
0000001 B 鈴田______ 50 F 46 39 8 5 21
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-master $tmp-masterBOMCRLF $tmp-masterBOMCR
BOMandEOLvariation $tmp-tran $tmp-tranBOMCRLF $tmp-tranBOMCR

# BOM付きUTF8ファイルCRLF
${com} key=1 $tmp-masterBOMCRLF $tmp-tranBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-1 error"

# BOM付きCR
${com} key=1 $tmp-masterBOMCR $tmp-tranBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-2 error"

# pipe接続（tmp-baster/tmp-tran）

# BOM付きCRLF
cat $tmp-masterBOMCRLF | ${com} key=1 - $tmp-tranBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-3 error"

cat $tmp-tranBOMCRLF | ${com} key=1 $tmp-masterBOMCRLF -  > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-4 error"

# BOM付きCR
cat $tmp-masterBOMCR | ${com} key=1 - $tmp-tranBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-5 error"

cat $tmp-tranBOMCR | ${com} key=1 $tmp-masterBOMCR - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5-6 error"

###########################################
#TEST6
# TEST1の変形版
# masterがキー値について昇順でなくキー値の同じものも複数ある場合の試験

cat << FIN > $tmp-tran
0000000 浜地______ 50 F 91 59 20 76 54
0000004 白土______ 40 M 58 71 20 10 6
0000003 杉山______ 26 F 30 50 71 36 30
0000001 鈴田______ 50 F 46 39 8  5  21
0000005 崎村______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-master
0000001 B
0000004 A
0000001 Z
FIN

# masterからはキー値が同じ類のうち最後に現われたものが有効になる
cat << FIN > $tmp-ans
0000004 A 白土______ 40 M 58 71 20 10 6
0000001 Z 鈴田______ 50 F 46 39 8 5 21
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
#TEST7
# TEST1の変形版
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

# tranの第1欄は濁音NFD
cat << FIN > $tmp-tran
0000000がぎぐげご 浜地______ 50 F 91 59 20 76 54
0000004ばびぶべぼ 白土______ 40 M 58 71 20 10 6
0000003だぢづでど 杉山______ 26 F 30 50 71 36 30
0000001ざじずぜぞ 鈴田______ 50 F 46 39 8  5  21
0000005ぱぴぷぺぽ 崎村______ 50 F 82 79 16 21 80
FIN

# masterの第1欄は濁音NFC
cat << FIN > $tmp-master
0000001ざじずぜぞ B
0000004ばびぶべぼ A
FIN

# 出力は全欄がNFCとなる
cat << FIN > $tmp-ans
0000004ばびぶべぼ A 白土______ 40 M 58 71 20 10 6
0000001ざじずぜぞ B 鈴田______ 50 F 46 39 8 5 21
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-1 error"

# tranとmasterのNFC/NFDを入れ替える

# tranの第1欄は濁音NFC
cat << FIN > $tmp-tran
0000000がぎぐげご 浜地______ 50 F 91 59 20 76 54
0000004ばびぶべぼ 白土______ 40 M 58 71 20 10 6
0000003だぢづでど 杉山______ 26 F 30 50 71 36 30
0000001ざじずぜぞ 鈴田______ 50 F 46 39 8  5  21
0000005ぱぴぷぺぽ 崎村______ 50 F 82 79 16 21 80
FIN

# masterの第1欄は濁音NFD
cat << FIN > $tmp-master
0000001ざじずぜぞ B
0000004ばびぶべぼ A
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-2 error"

###########################################
#TEST8
# 文字列の「ゆるい一致」の試験

cat << FIN > $tmp-tran
浜地 0000000 50 F 91 59 20 76 54
渡邉 0000001 50 F 46 39 8  5  21
杉山 0000003 26 F 30 50 71 36 30
渡邉󠄐 0000004 40 M 58 71 20 10 6
崎村 0000005 50 F 82 79 16 21 80
FIN

# tmp-tranの説明
# 2行目先頭欄の「渡邉」は「渡(U+6E21)邉(U+9089)」で2字目はUCS
# 4行目先頭欄の「渡邉󠄐」は「渡(U+6E21)邉󠄐(U+9089;U+E0110)」で2字目はIVS

cat << FIN > $tmp-master
渡邉󠄐 A
渡邉󠄑 B
渡邉󠄒 C
FIN

# tmp-masterの説明
# 1行目の「渡邉󠄐」は「渡(U+6E21)邉󠄐(U+9089;U+E0110)」で2字目はIVS
# 2行目の「渡邉󠄑」は「渡(U+6E21)邉󠄑(U+9089;U+E0111)」で2字目はIVS
# 3行目の「渡邉󠄒」は「渡(U+6E21)邉󠄒(U+9089;U+E0112)」で2字目はIVS

# tmp-tranの2行目先頭欄は2字目がUCSの「邉(U+9089)」なのでtmp-masterのU+9089を基底文字とするすべてのIVSと一致する
#  （実際にはtmp-masterの最終行の「渡(U+6E21)邉󠄒(U+9089;U+E0112)」と一致してその値部「C」が連結に使用される）←tmp-masterは後方からscanされるため
# tmp-tranの4行目先頭欄は2字目がIVSの「邉󠄐(U+9089;U+E0110)」なのでtmp-masterの先頭行と一致してその値部「A」が連結に使用される

cat << FIN > $tmp-ans
渡邉 C 0000001 50 F 46 39 8 5 21
渡邉󠄐 A 0000004 40 M 58 71 20 10 6
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-1 error"

# tmp-masterにUCSがある場合のtmp-tranのIVSとのmatching

cat << FIN > $tmp-tran
浜地 0000000 50 F 91 59 20 76 54
渡邉󠄐 0000001 50 F 46 39 8  5  21
杉山 0000003 26 F 30 50 71 36 30
渡邉󠄑 0000004 40 M 58 71 20 10 6
崎村 0000005 50 F 82 79 16 21 80
渡邉󠄒 0000006 40 M 55 72 21 8 20
FIN

# tmp-tranの説明
# 2行目先頭欄の「渡邉󠄐」は「渡(U+6E21)邉󠄐(U+9089;U+E0110)」で2字目はIVS
# 4行目先頭欄の「渡邉󠄑」は「渡(U+6E21)邉󠄑(U+9089;U+E0111)」で2字目はIVS
# 6行目先頭欄の「渡邉󠄒」は「渡(U+6E21)邉󠄒(U+9089;U+E0112)」で2字目はIVS

cat << FIN > $tmp-master
渡邉 B
崎村 A
FIN

# tmp-masterの説明
# 1行目先頭欄の「渡邉」は「渡(U+6E21)邉(U+9089)」で2字目はUCS

# tmp-masterの1行目は2字目がUCSの「邉(U+9089)」なのでtmp-tranにあるU+9089を基底文字とするすべてのIVSと一致する

cat << FIN > $tmp-ans
渡邉󠄐 B 0000001 50 F 46 39 8 5 21
渡邉󠄑 B 0000004 40 M 58 71 20 10 6
崎村 A 0000005 50 F 82 79 16 21 80
渡邉󠄒 B 0000006 40 M 55 72 21 8 20
FIN

${com} key=1 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST8-2 error"

###########################################
#TEST9
# TEST4の変型
# キー指定の試験
#  キー指定に使用できる記号
#    /   a/bでフィールド番号aからフィールド番号bまでの区間を指定する a<=bの正順でもa>=bの逆順でもよい
#    NF  入力行にあるフィールドの数を表わす NF-nとすると最後（最右端）のフィールドから数えてn番前のフィールドを意味する
#    @   単一のフィールドまたはフィールド区間を連接するための区切りに使用する 複数回の連接もできる
#  指定したフィールドに重複があっても単一化される

cat << FIN > $tmp-tran
DDD 004 堅田 へへへ 丁
AAA 001 山田 あはは 甲
CCC 003 太田 ふふふ 丙
BBB 002 上田 おほほ 乙
FIN

cat << FIN > $tmp-master
002 上田 富山 乙
003 太田 石川 丙
FIN

cat << FIN > $tmp-ans
003 太田 丙 石川 CCC ふふふ
002 上田 乙 富山 BBB おほほ
FIN

# コマンドの説明
# キー指定の「3/2@NF」は「3～2と5」となり「2,3,5」と整理される

${com} key=3/2@NF $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST9 error"

###########################################
#TEST10
# キーに0を指定すると「全欄指定」となる

cat << FIN > $tmp-tran
0000001 鈴田______
0000004 白土______
FIN

cat << FIN > $tmp-master
0000000 太田______ 50 F 91 59 20 76 54
0000001 鈴田______ 50 F 46 39 8  5  21
0000003 上田______ 26 F 30 50 71 36 30
0000004 白土______ 40 M 58 71 20 10 6
0000005 上田______ 50 F 82 79 16 21 80
FIN

cat << FIN > $tmp-ans
0000001 鈴田______ 50 F 46 39 8 5 21
0000004 白土______ 40 M 58 71 20 10 6
FIN

${com} key=0 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-1 error"

# キー指定にひとつでも0があれば全欄指定となる

${com} key=0@5/3 $tmp-master $tmp-tran > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST10-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
