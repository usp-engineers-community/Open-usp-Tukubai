#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of haba
#
# usage: [<test-path>/]calclock.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=haba # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
# TEST1
# 指定ファイルの表示幅を出します。

cat << FIN > $tmp-in
1234
東京
ｵｵｻｶ
オオサカ
FIN

cat << FIN > $tmp-ans
4
4
4
8
FIN

${com} $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1 error"

###########################################
# TEST2
# -v オプションで表示幅に変化のあった行番号を出力します。

cat << FIN > $tmp-ans
1 4
4 8
FIN

${com} -v $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2 error"

###########################################
# TEST3
# -f オプションでファイル名もあわせて出力します。標準入力の場合は、ファイル名は STDIN となります。

cat << FIN > $tmp-in1
1234
FIN

cat << FIN > $tmp-in2
abcdef
FIN

cat << FIN > $tmp-ans
$tmp-in1 4
$tmp-in2 6
FIN

${com} -f $tmp-in1 $tmp-in2 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3 error"

###########################################
# TEST4
# -v オプションと併用すると、ファイル名、行番号、表示幅の順になります。

cat << FIN > $tmp-ans
$tmp-in1 1 4
$tmp-in2 1 6
FIN

${com} -vf $tmp-in1 $tmp-in2 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4 error"

###########################################
# TEST5
# 標準入力から入力する

cat << FIN > $tmp-ans
STDIN 4
$tmp-in2 6
FIN

cat $tmp-in1 | ${com} -f - $tmp-in2 >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST5 error"

###########################################
# TEST6
# 代用対/結合文字列/IVS/SVSの処理検査

cat << FIN > $tmp-in
吉田
𠮷田
今川
𫝆川
𫝆󠄁川
渡邊
渡邊󠄊
渡邊󠄋
渡邊󠄌
神山
神︀山
羽田
羽︀田
か゚き゚く゚け゚こ゚
FIN

# $tmp-inの説明
#吉田 #吉(U+5409)
#𠮷田 #𠮷(U+20BB7)代用対では𠮷(U+D842-U+DFB7)
#今川 #今(U+4ECA)
#𫝆川 #𫝆(U+2B746)代用対では𫝆(U+D86D-U+DF46)
#𫝆󠄁川 #IVSの例で𫝆󠄁(U+2B746;U+E0101)代用対では𫝆󠄁(U+D86D-U+DF46;U+DB40-U+DD01)
#渡邊 #邊(U+908A)
#渡邊󠄊 #IVSの例で邊󠄊(U+908A;U+E010A)代用対では邊󠄊(U+908A;U+DB40-U+DD0A)
#渡邊󠄋 #IVSの例で邊󠄋(U+908A;U+E010B)代用対では邊󠄋(U+908A;U+DB40-U+DD0B)
#渡邊󠄌 #IVSの例で邊󠄌(U+908A;U+E010C)代用対では邊󠄌(U+908A;U+DB40-U+DD0C)
#神山 #神(U+795E)
#神︀山 #SVSの例で神︀(U+795E;U+FE00)
#羽田 #羽(U+7FBD)
#羽︀田 #SVSの例で羽︀(U+7FBD;U+FE00)
#か゚き゚く゚け゚こ゚ #結合文字列の例でか゚(U+304B;U+309A)き゚(U+304D;U+309A)く゚(U+304F;U+309A)け゚(U+3051;U+309A)こ゚(U+3053;U+309A)

# 文字の正しい表示には適切なfontの使用が求められる
# Unicode符号位置を「字(U+xxxx)」の形式で表現する（符号位置が第2面のときは「字(U+xxxxx)」）
# 代用対は「字(U+xxxx-U+yyyy)」の形式で表現する
# 結合文字列/IVS/SVSは「字(U+xxxx;U+yyyy)」の形式で表現する

cat << FIN > $tmp-ans
4
4
4
4
4
4
4
4
4
4
4
4
4
10
FIN

${com} $tmp-in >$tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST6 error"

###########################################
# TEST7
# TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験
# 指定ファイルの表示幅を出します。

cat << FIN > $tmp-in
1234
東京
ｵｵｻｶ
オオサカ
FIN

cat << FIN > $tmp-ans
4
4
4
8
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きUTF8ファイルCRLF
${com} $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-1 error"

# BOM付きUTF8ファイルCR
${com} $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-2 error"

# pipe接続

# BOM付きUTF8ファイルCRLF
cat $tmp-inBOMCRLF | ${com} - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-3 error"

# BOM付きUTF8ファイルCR
cat $tmp-inBOMCR | ${com} - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST7-4 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
