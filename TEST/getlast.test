#!/bin/bash
#!/usr/local/bin/bash -xv # コマンド処理系の変更例
#
# test script of getlast
#
# usage: [<test-path>/]getlast.test [<command-path> [<python-version>]]
#
#            <test-path>は
#                    「現ディレクトリーからみた」本スクリプトの相対パス
#                    または本スクリプトの完全パス
#                    省略時は現ディレクトリーを仮定する
#            <command-path>は
#                    「本スクリプトのディレクトリーからみた」test対象コマンドの相対パス
#                    またはtest対象コマンドの完全パス
#                    省略時は本スクリプトと同じディレクトリーを仮定する
#                    値があるときまたは空値（""）で省略を示したときはあとにつづく<python-version>を指定できる
#            <python-version>は
#                    使用するpython処理系のversion（minor versionまで指定可）を指定する
#                    （例 python2 python2.6 phthon3 python3.4など）
#                    単にpythonとしたときは現実行環境下でのdefault versionのpythonを使用する
#                    文字列"python"は大文字/小文字の区別をしない
#                    省略時はpythonを仮定する
name=getlast # test対象コマンドの名前
testpath=$(dirname $0) # 本スクリプト実行コマンドの先頭部($0)から本スクリプトのディレトリー名をとりだす
cd $testpath # 本スクリプトのあるディレクトリーへ移動
if test "$2" = ""; # <python-version>($2)がなければ
	then pythonversion="python" # default versionのpythonとする
	else pythonversion="$2" # <python-version>($2)があれば指定versionのpythonとする
fi
if test "$1" = ""; # <command-path>($1)がなければ
	then commandpath="." # test対象コマンドは現ディレクトリーにある
	else commandpath="$1" # <command-path>($1)があればtest対象コマンドは指定のディレクトリーにある
fi
com="${pythonversion} ${commandpath}/${name}" # python処理系によるtest対象コマンド実行の先頭部
tmp=/tmp/$$

ERROR_CHECK(){
	[ "$(echo ${PIPESTATUS[@]} | tr -d ' 0')" = "" ] && return
	echo $1
	echo "${pythonversion} ${name}" NG
	rm -f $tmp-*
	exit 1
}

BOMandEOLvariation(){	# BOM無しLF改行ファイル（$1）からBOM付きCRLF改行ファイル（$2）とBOM付きCR改行ファイル（$3）を生成する
	 [ $# -eq 3 ]; ERROR_CHECK "TESTスクリプト内のBOMandEOLvariation()でファイル指定が不正"
	awk '{print '\xEF\xBB\xBF' $0}' $1 > $2 # $1の先頭にBOMを付け全行をCRLFで連接し終端にCRを付加して$2に出力
	awk 'BEGIN {ORS = "\r"}  {print '\xEF\xBB\xBF' $0}' $1 > $3 # $1の先頭にBOMを付け全行をCRで連接して$3に出力し$3最終行のLFをCRに変換
}

###########################################
#TEST1

cat << FIN > $tmp-in
001 1 942
001 1.3 421
002 -123.0 111
002 123.0 11
003 aaa bbb
FIN

cat << FIN > $tmp-ans
001 1.3 421
002 123.0 11
003 aaa bbb
FIN

${com} 1 1 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-1 error"

cat $tmp-in | ${com} 1 1 > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST1-2 error"

###########################################
#TEST2

cat << FIN > $tmp-in
001 江頭 1 942
001 江頭 1.3 421
001 上山田 -123.0 111
002 上山田 -345.0 222
002 上田 123.0 11
FIN

cat << FIN > $tmp-ans
001 江頭 1.3 421
001 上山田 -123.0 111
002 上山田 -345.0 222
002 上田 123.0 11
FIN

${com} 1 2 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-1 error"

# 降順
${com} 2 1 $tmp-in > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST2-2 error"

###########################################
#TEST3
#TEST1の拡大版
# BOM付きCRLFとBOM付きCRの試験

cat << FIN > $tmp-in
001 1 942
001 1.3 421
002 -123.0 111
002 123.0 11
003 aaa bbb
FIN

cat << FIN > $tmp-ans
001 1.3 421
002 123.0 11
003 aaa bbb
FIN

# 入力用tmpファイルからBOM付きCRLFとBOM付きCRの各ファイルを作る
BOMandEOLvariation $tmp-in $tmp-inBOMCRLF $tmp-inBOMCR

# BOM付きUTF8ファイルCRLF
${com} 1 1 $tmp-inBOMCRLF > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-1 error"

# BOM付きUTF8ファイルCR
${com} 1 1 $tmp-inBOMCR > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-2 error"

# pipe接続

# BOM付きUTF8ファイルCRLF
cat $tmp-inBOMCRLF | ${com} 1 1 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-3 error"

# BOM付きUTF8ファイルCR
cat $tmp-inBOMCR | ${com} 1 1 - > $tmp-out
diff $tmp-ans $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST3-4 error"

###########################################
#TEST4
# NFC文字（濁音/半濁音が1文字）とNFD文字（濁音/半濁音が清音+結合用濁点/結合用半濁点の2文字で構成される）を同値化して処理する

cat << FIN > $tmp-in
0001 あいうえお 清音
0002 ゔ 濁音NFC
0003 ゔ 濁音NFD
0004 かきくけこ 清音
0005 がぎぐげご 濁音NFC
0006 がぎぐげご 濁音NFD
0007 さしすせそ 清音
0008 ざじずぜぞ 濁音NFC
0009 ざじずぜぞ 濁音NFD
0010 たちつてと 清音
0011 だぢづでど 濁音NFC
0012 だぢづでど 濁音NFD
0013 はひふへほ 清音
0014 ばびぶべぼ 濁音NFC
0015 ばびぶべぼ 濁音NFD
0016 ぱぴぷぺぽ 半濁音NFC
0017 ぱぴぷぺぽ 半濁音NFD
0018 アイウエオ 清音
0019 ヴ 濁音NFC
0020 ヴ 濁音NFD
0021 カキクケコ 清音
0022 ガギグゲゴ 濁音NFC
0023 ガギグゲゴ 濁音NFD
0024 サシスセソ 清音
0025 ザジズゼゾ 濁音NFC
0026 ザジズゼゾ 濁音NFD
0027 タチツテト 清音
0028 ダヂヅデド 濁音NFC
0029 ダヂヅデド 濁音NFD
0030 ハヒフヘホ 清音
0031 バビブベボ 濁音NFC
0032 バビブベボ 濁音NFD
0033 パピプペポ 半濁音NFC
0034 パピプペポ 半濁音NFD
0035 ヷヸヹヺ 濁音NFC
0036 ヷヸヹヺ 濁音NFD
FIN
cat << FIN > $tmp-ans1
0001 あいうえお 清音
0003 ゔ 濁音NFD
0004 かきくけこ 清音
0006 がぎぐげご 濁音NFD
0007 さしすせそ 清音
0009 ざじずぜぞ 濁音NFD
0010 たちつてと 清音
0012 だぢづでど 濁音NFD
0013 はひふへほ 清音
0015 ばびぶべぼ 濁音NFD
0017 ぱぴぷぺぽ 半濁音NFD
0018 アイウエオ 清音
0020 ヴ 濁音NFD
0021 カキクケコ 清音
0023 ガギグゲゴ 濁音NFD
0024 サシスセソ 清音
0026 ザジズゼゾ 濁音NFD
0027 タチツテト 清音
0029 ダヂヅデド 濁音NFD
0030 ハヒフヘホ 清音
0032 バビブベボ 濁音NFD
0034 パピプペポ 半濁音NFD
0036 ヷヸヹヺ 濁音NFD
FIN

cat << FIN > $tmp-ans2
0002 ゔ 濁音NFC
0005 がぎぐげご 濁音NFC
0008 ざじずぜぞ 濁音NFC
0011 だぢづでど 濁音NFC
0014 ばびぶべぼ 濁音NFC
0016 ぱぴぷぺぽ 半濁音NFC
0019 ヴ 濁音NFC
0022 ガギグゲゴ 濁音NFC
0025 ザジズゼゾ 濁音NFC
0028 ダヂヅデド 濁音NFC
0031 バビブベボ 濁音NFC
0033 パピプペポ 半濁音NFC
0035 ヷヸヹヺ 濁音NFC
FIN

# 指定key部について濁音NFCと濁音NFDの2通りがある場合は後方に出現のもの（濁音NFD）も同一とみなすので新出の行とはされない

${com} 2 2 $tmp-in > $tmp-out
diff $tmp-ans1 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-1 error"

# +ng オプションに<fd>を指定すると、標準エラー出力のかわりに<fd>への出力が実施される。同じ指定key部の値を持つ行について最後の行以外を<fd>に出力する。

${com} +ng4 2 2 $tmp-in >/dev/null 4>$tmp-out
diff $tmp-ans2 $tmp-out
[ $? -eq 0 ] ; ERROR_CHECK "TEST4-2 error"

###########################################
rm -f $tmp-*
echo "${pythonversion} ${name}" OK
exit 0
