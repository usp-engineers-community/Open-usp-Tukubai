.TH  Tukubai 1 "19 Sep 2020" "usp Tukubai" "Tukubai コマンド マニュアル"

.br
map(1)
.br

.br
【名前】
.br

.br
map\ :\ 縦型ファイルを縦キー/横キー形式の表に変換
.br

.br
【書式】
.br

.br
Usage\ \ \ :\ map\ \ \ \ \ \ \ [-<l>]\ num=<n>x<m>\ <file>
.br
        : map +yarr [-<l>] num=<n>x<m> <file>
.br
        : map +arr  [-<l>] num=<n>x<m> <file>
.br
Option\ \ :\ -m<c>\ -n
.br
Version\ :\ Sat\ Sep\ 19\ 23:49:25\ JST\ 2020
.br
Edition\ :\ 1
.br

.br
【説明】
.br

.br
引数のファイルまたは標準入力のテキストデータが縦キーフィールド<n>個、横キーフィ
.br
ールド<m>個(未指定時\ m=1)、残りがデータフィールドであると仮定し、データを表に並
.br
べて出力する。表に展開することでデータの欠落が発生する場合は0で補完する。補完す
.br
る文字は-mオプションで変更できる。
.br

.br
【例1】
.br

.br
縦型データをmap(1)するには次のようにコマンドを実行する。num=<n>の値は縦キーのフ
.br
ィールド数を表す。この例ではnumの値は縦キーの最後のフィールドを指し示す2を指定
.br
する必要がある。
.br

.br

  $ cat data
  001 a店 01/01 103               ←縦キー 縦キー 横キー データ部
  001 a店 01/02 157
  002 b店 01/01 210
  002 b店 01/02 237

  $

.br

  $ map num=2 data |  keta
  *   * 01/01 01/02
  001 a\1 \2 \3157
  002 b\1 \2 \3237

  $

.br
【例2】
.br

.br
データに欠落がある場合、データが存在しない場所に値0が補完される。
.br

.br

  $ cat data
  001 a店 01/01 103
  002 b店 01/02 237

  $

.br

  $ map num=2 data |  keta
  *   * 01/01 01/02
  001 a\1 \2 \30
  002 b\1 \2 \3237

  $

.br
【例3】
.br

.br
データ部が複数列ある場合には複数行にマッピングが実施される。この時、各行にはA\ B
.br
C\ ...と順にインデックスが追加される。
.br

.br

  $ cat data
  a店 1日目 103 62                ←縦キー 横キー 売数 客数
  a店 2日目 157 94
  a店 3日目 62 30
  a店 4日目 131 84
  ・
  ・
  d店 6日目 98 69
  d店 7日目 101 90

  $

.br

  $ map num=1 data |  keta
  * * 1日目 2日目 3日目 4日目 5日目 6日目 7日目
  a店 A\1 \2 \3157\1 \2 \3131\1 \2 \3350   412
  a店 B\1 \2 \394\1 \2 \384\1 \2 \320   301
  b店 A\1 \2 \3237\1 \2 \3198\1 \2 \3421   589
  b店 B\1 \2 \3121\1 \2 \3105\1 \2 \3287   493
  c店 A\1 \2 \376\1 \2 \381\1 \2 \3109   136
  c店 B\1 \2 \349\1 \2 \348\1 \2 \391   110
  d店 A\1 \2 \372\1 \2 \374\1 \2 \398   101
  d店 B\1 \2 \342\1 \2 \343\1 \2 \369    90

  $

.br
【例4】
.br

.br
例2の結果をさらにsed(1)コマンドでAを売数、Bを客数に置換すると次のような表になる
.br
。
.br

.br

  $ map num=1 data |  sed -e 's/A/売数/1' -e 's/B/客数/1' | keta
  *    * 1日目 2日目 3日目 4日目 5日目 6日目 7日目
  a店 売\1 \2 \3157\1 \2 \3131\1 \2 \3350   412
  a店 客\1 \2 \394\1 \2 \384\1 \2 \320   301
  b店 売\1 \2 \3237\1 \2 \3198\1 \2 \3421   589
  b店 客\1 \2 \3121\1 \2 \3105\1 \2 \3287   493
  c店 売\1 \2 \376\1 \2 \381\1 \2 \3109   136
  c店 客\1 \2 \349\1 \2 \348\1 \2 \391   110
  d店 売\1 \2 \372\1 \2 \374\1 \2 \398   101
  d店 客\1 \2 \342\1 \2 \343\1 \2 \369    90

  $

.br
【例5】
.br

.br
+yarrオプションを指定することでデータ部の複数列を横に展開することができる。
.br

.br

  $ map +yarr num=1 data |  keta
  * 1日目 1日目 2日目 2日目 3日目 3日目  -- 7日目 7日目
  *\1 \2 \3b\1 \2 \3b\1 \2 \3b  --\1 \2 \3b   ←自動的に追加される
  a\1 \2 \362\1 \2 \394\1 \2 \330  --\1 \2 \3301
  b\1 \2 \3113\1 \2 \3121\1 \2 \382  --\1 \2 \3493
  c\1 \2 \352\1 \2 \349\1 \2 \321  --\1 \2 \3110
  d\1 \2 \348\1 \2 \342\1 \2 \319  --\1 \2 \390

  $

.br

  $ map +yarr num=1 data |  sed -e '2s/a/売数/g' -e '2s/b/客数/g' | keta
  * 1日目 1日目 2日目 2日目 3日目 3日目  -- 7日目 7日目
  *  売数  客数  売数  客数  売数  客\1 \2 \3数  客数
  a\1 \2 \362\1 \2 \394\1 \2 \330  --\1 \2 \3301
  b\1 \2 \3113\1 \2 \3121\1 \2 \382  --\1 \2 \3493
  c\1 \2 \352\1 \2 \349\1 \2 \321  --\1 \2 \3110
  d\1 \2 \348\1 \2 \342\1 \2 \319  --\1 \2 \390

  $

.br
横インデックスが不要な場合には+arrオプションを使用する。
.br

.br

  $ map +arr num=1 data |  keta
  * 1日目 1日目 2日目 2日目 3日目 3日目  -- 7日目 7日目
  a\1 \2 \362\1 \2 \394\1 \2 \330  --\1 \2 \3301
  b\1 \2 \3113\1 \2 \3121\1 \2 \382  --\1 \2 \3493
  c\1 \2 \352\1 \2 \349\1 \2 \321  --\1 \2 \3110
  d\1 \2 \348\1 \2 \342\1 \2 \319  --\1 \2 \390

  $

.br
【例6】
.br

.br
-mオプションで補完文字を指定できる。デフォルトは0。
.br

.br

  $ cat data
  A a 1
  A b 2
  B a 4

  $

.br

  $ map -m@ num=1 data
  * a b
  A 1 2
  B 4 @

  $

.br
【例7】
.br

.br
-<数値>オプションを妻うことで<数値>フィールド分ずつmap(1)を実施することができる
.br
。<数値>はデータ部のフィールド数の約数である必要がある。
.br

.br

  $ cat data
  X x 1 2 3 4 5 6         ←データ部を1 2 3と4 5 6というように3つずmapしたい
  X y 1 2 3 4 5 6
  Y x 1 2 3 4 5 6
  Y y 1 2 3 4 5 6

  $

.br

  $ map -3 num=1 data             ←3フィールド分ずmap(1)する
  * * x x y y
  * * a b a b
  X A 1 4 1 4
  X B 2 5 2 5
  X C 3 6 3 6
  Y A 1 4 1 4
  Y B 2 5 2 5
  Y C 3 6 3 6

  $

.br

  $ map +yarr -3 num=1 data               ←+yarrの場合、3フィールド分ずつ折り返し
  * * x x x y y y
  * * a b c a b c
  X A 1 2 3 1 2 3
  X B 4 5 6 4 5 6
  Y A 1 2 3 1 2 3
  Y B 4 5 6 4 5 6

  $

.br
【例8】
.br

.br
num=<n>x<m>で縦キー<n>個、横キー<m>個にすることができる。横キーはヘッダー<m>行
.br
に展開される。
.br

.br

  $ cat data
  X1 Y1 Z1 1 8
  X1 Y1 Z2 2 7
  X1 Y2 Z1 3 6
  X1 Y2 Z2 4 5
  X2 Y1 Z1 5 4
  X2 Y1 Z2 6 3
  X2 Y2 Z1 7 2
  X2 Y2 Z2 8 1

  $

.br

  $ map num=1x2 data
  *  * Y1 Y1 Y2 Y2                ←横ヘッダーが2行になる
  *  * Z1 Z2 Z1 Z2
  X1 A  1  2  3  4
  X1 B  8  7  6  5
  X2 A  5  6  7  8
  X2 B  4  3  2  1

  $

.br

  $ map +yarr num=1x2 data
  *  Y1 Y1 Y1 Y1 Y2 Y2 Y2 Y2              ←横ヘッダーが2行になる
  *  Z1 Z1 Z2 Z2 Z1 Z1 Z2 Z2
  *  a  b  a  b  a  b  a  b
  X1 1  8  2  7  3  6  4  5
  X2 5  4  6  3  7  2  8  1

  $

.br
【例9】
.br

.br
-<数字>オプションとnum=<n>x<m>を組み合わせると次のように動作する。
.br

.br

  $ cat data3
  X1 Y1 Z1 1 8 4 5 6 7
  X1 Y1 Z2 2 7 4 5 6 7
  X1 Y2 Z1 3 6 4 5 6 7
  X1 Y2 Z2 4 5 4 5 6 7
  X2 Y1 Z1 5 4 4 5 6 7
  X2 Y1 Z2 6 3 4 5 6 7
  X2 Y2 Z1 7 2 4 5 6 7
  X2 Y2 Z2 8 1 4 5 6 7

  $

.br

  $ map -3 num=1x2 data3
  * * Y1 Y1 Y1 Y1 Y2 Y2 Y2 Y2
  * * Z1 Z1 Z2 Z2 Z1 Z1 Z2 Z2
  * *  a  b  a  b  a  b  a  b
  X1 A  1  5  2  5  3  5  4  5
  X1 B  8  6  7  6  6  6  5  6
  X1 C  4  7  4  7  4  7  4  7
  X2 A  5  5  6  5  7  5  8  5
  X2 B  4  6  3  6  2  6  1  6
  X2 C  4  7  4  7  4  7  4  7

  $

.br

  $ map +yarr -3 num=1x2 data3
  * * Y1 Y1 Y1 Y1 Y1 Y1 Y2 Y2 Y2 Y2 Y2 Y2
  * * Z1 Z1 Z1 Z2 Z2 Z2 Z1 Z1 Z1 Z2 Z2 Z2
  * *  a  b  c  a  b  c  a  b  c  a  b  c
  X1 A  1  8  4  2  7  4  3  6  4  4  5  4
  X1 B  5  6  7  5  6  7  5  6  7  5  6  7
  X2 A  5  4  4  6  3  4  7  2  4  8  1  4
  X2 B  5  6  7  5  6  7  5  6  7  5  6  7

  $

.br
【例10】
.br

.br
-nオプションを指定すると、付加するインデックスが数値になる。-nを付けない場合に
.br
はアルファベットwが使われるのでインデックス数が26個までという制限があるが、-nを
.br
指定した場合にはインデックスが26個に制限されず、データ部が多い場合もマップする
.br
ことができる。
.br

.br

  $ cat data4
  X1 Y1 A1 A2 A3 A4 -- A99 A100
  X1 Y2 B1 B2 B3 B4 -- B99 B100
  X1 Y3 C1 C2 C3 C4 -- C99 C100

  $

.br

  $ map -n num=1 data4
  *  *\1 \2 \3Y2   Y3
  X1  1\1 \2 \3B1   C1
  X1  2\1 \2 \3B2   C2
  ・
  ・
  X1 29  A99  B99  C99
  X1 30 A100 B100 C100

  $

.br
【関連項目】
.br

.br
unmap(1)、tateyoko(1)
.br

.br
last\ modified:\ Fri\ Jul\ 15\ 15:42:38\ JST\ 2022
.br
Contact\ us:\ uecinfo@usp-lab.com
.br
Copyright\ (c)\ 2012-2022\ Universal\ Shell\ Programming\ Laboratory\ All\ Rights
.br
