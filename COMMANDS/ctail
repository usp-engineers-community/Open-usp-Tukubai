#!/usr/bin/env python
#coding: utf-8
# 
# ctail ファイル末尾のn行を取り出す。 （Open usp Tukubai版）
#
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
#
# The MIT License
#
# Copyright (C) 2020 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "ctail -<n> [<file>]"
_usage2 = "ctail <n> [<file>]"
_usage3 = "ctail -<n>c [<file>]"
_version = "Wed May 20 04:47:48 JST 2020"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"

import os
import sys

def printUsage():
	print("Usage    :", _usage, file=sys.stderr)
	print("Usage    :", _usage2, file=sys.stderr)
	print("Usage    :", _usage3, file=sys.stderr)
	print("Version  :", _version, file=sys.stderr)
	print("          ", _code, file=sys.stderr)
	sys.exit(1)

def prefixEqual(prefix,token):
	if len(prefix) > len(token):	return False
	
	p = token[0:len(prefix)]
	if p == prefix:	return True

	return False

def die(message):
	print("Error[ctail] :", message, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(filename, mode='r'):
	if filename == '-':	# sys.stdinのとき
		filename = '/dev/fd/0'	# ファイルディスクリプターで表記する
	if not Python3():
		mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	# 標準入力も含めてopen()で開く
	try:
		file = open(filename, mode)
	except:
		die("ファイルを開けません。")
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

###########################################
# メイン関数
###########################################
if __name__ == '__main__':

	###########################################
	# オプションの処理
	###########################################
	file = None
	n = 10
	byteflag=False

	argc = len(sys.argv)
	# ファイルか、nか、-nか、-ncか
	try:
		for i in range(1, argc):
			arg = sys.argv[i]
			if arg == "-":			pass
			elif prefixEqual("-",arg):
				if arg[-1]=='c':
					arg=arg[:-1]
					byteflag=True
				n = int(arg[1:])
			elif argc>2 and i==(argc-1):		file = open_file(arg)
			else: n = int(arg)
	except:
		printUsage()

	# file指定がなければsys.stdinとする
	if file==None:
		file=open_file("-")

	if argc==1 or n <= 0:
		printUsage()

	# 先頭行処理用flagの初期化
	firstline=True

	###########################################
	# 出力
	###########################################

	line_queue = []
	if not byteflag:
		for line in file:
			line=preproc_line(line)
			line_queue.append(line)
			if len(line_queue) > n:
				print(line_queue.pop(0))
	else:
		buflen=0
		for line in file:
			line=preproc_line(line)
			if Python3():
				line=line.encode('utf-8')	# Pyton3のときはUnicdoeからUTF8に変換する
			line_queue.append(line)
			buflen+=len(line)
			# popできるか？
			if buflen-len(line_queue[0]) >= n:
				buflen-=len(line_queue[0])
				if Python3():
					print(line_queue.pop(0).decode('utf8','replace'))
				else:
					print(line_queue.pop(0))
		# 最後にqueueに残っている量を検査
		if buflen<n: die("末尾の指定バイト数を削除するに充分な量が入力されていません")
		if buflen > n:	# nバイト超が残っていたら先頭行の後方から削除して出力する
			if Python3():
				print(line_queue.pop(0)[:buflen-n].decode('utf8','replace'))
			else:
				print(line_queue.pop(0)[:buflen-n])
	sys.exit(0)
