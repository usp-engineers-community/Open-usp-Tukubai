#!/usr/bin/env python
#coding: utf-8
#
# yobi 曜日挿入フィルタ（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written by Yoshio Katayama
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "yobi [-e|-j] <field> <filename>"
_usage1 = "yobi -d [-e|-j] <string>"
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypatNF=r'(?P<m0>(?P<m01>\d+)|(?P<m02>NF(?P<m03>-\d+)?))$'

import re
import os
import sys
from getopt import getopt
from datetime import datetime

def error(msg, *arg):
	print('Error[yobi] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("        :", _usage1, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(n):
	if n >= len(sys.argv):	filename = '-'
	else:
		filename = sys.argv[n]
		del sys.argv[n]
	if filename == '-':	filename = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():	mode='r'
	else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(filename, mode)
	except:
		if filename=='/dev/fd/0':
			error("標準入力ファイルをオープンできません。")
		else:
			error("ファイル '%s' をオープンできません。", filename)
	return file

# キーフィールド指定処理関連

# NF相対欄位置からNF（欄数）に応じた0発進の欄位置に変換する
def getpos(base_pos):
	# NF相対欄位置からの変換:
	#  nのときはそのまま
	#  0のときはNF（欄数）
	#  -nのときはNF-n
	# 0発進とするために-1を加える
	if base_pos > 0:
		pos=base_pos-1	# 元からの絶対欄位置
		if pos >= NF:	error("フィールド番号が大きすぎます。 %s",str(base_pos))
	else:
		pos=NF+base_pos-1	# NF相対欄位置からの絶対化欄位置
		if pos < 0:	error("フィールド指定でNF-x の x が大きすぎます。 %s","NF-"+str(-base_pos))
	return pos

# 欄番号文字列をNF相対形式で整数化する
def getFieldNum(str,str1,str2):
	# n または NF または NF-x の形式の欄番号をNF相対形式の整数で確定する
	# 正規表現で「\d+|NF(-\d+)?」にmatchする全体をstrが、「\d+」でmatchする部分をstr1が、「(-\d+)?」でmatchする部分をstr2が保持している
	# NF相対形式の整数化:
	#  単独のnが0のときはエラーとする
	#  単独のnが0以外のときは整数のn
	#  単独のNFのときは整数の0
	#  NF-nのときは整数の-n
	# 実際の欄番号にする際には行ごとに得たNF（欄数）を使用して計算する
	if str1:	# n
		fieldnum=int(str1)
		if fieldnum==0:	# 欄番号0は受理しない
			error("フィールド指定に0がありました。")
	else:	# NF-n または NF
		if str2:	# NF-n
			fieldnum=int(str2)
		else:	# NF
			fieldnum=0
	return fieldnum

#
# ひとつの欄指定パラメータからNF相対形式で整数化した欄位置を返す
#
def getFieldList(field_param):
	field_param=field_param.replace("NF-0","NF")	# NF-0はNFと書き替える
	mobj = re.match(_keypatNF,field_param)
	if not mobj:	# フィールド指定の形式が不正
		error("フィールド指定の形式が不正です。 %s",fieldnum)
	NFrelpos=getFieldNum(field_param,mobj.group('m01'),mobj.group('m03'))	# NF相対形式で整数化して返す
	return NFrelpos

#
# 行の欄数検査
#
def check_num_fields_variation(fields,keypos):
	global	NF
	nf=len(fields)
	if nf != NF:	# 先頭行かまたは欄数が変化したなら
		NF=nf	# NFを更新
		keypos=getpos(rel_key)	# 行の欄数NFを見てNF相対欄位置から(絶対)欄位置を決定する
	return keypos

# 不要な空白の削除関数
def rm_sp(line):
	return re.sub(r' {2,}',' ',re.sub(r'^ +| +$','',line))	# 行頭と行末の空白を削除し連続空白を単空白にする

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	line=rm_sp(line)	# 行頭と行末の空白を削除し連続空白を単空白にする
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

#
# 曜日の計算
#
def weekday(date, lang):
	if not re.match(r'\d{8}', date):
		error("日付が8桁整数になっていません。日付け=%s",date)
	try:
		w = datetime(int(date[:4]), int(date[4:6]), int(date[6:])).weekday()
	except:
		error("日付が正しくありません。")
	return {
		'':  [ str(x) for x in list(range(1, 7)) + [ 0 ] ],
		'e': [ 'Mon', 'Tue','Wed','Thu','Fri','Sat','Sun' ],
		'j': [ '月',  '火', '水', '木', '金', '土', '日' ],
	}[lang][w]

#
# メイン関数
#
if __name__ == '__main__':

	global	NF

	if len(sys.argv) < 2 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	#
	# オプションの取得
	#
	direct, lang = '', ''
	try:
		optlist,args = getopt(sys.argv[1:], "dej")
	except:
		error("オプションの指定が不正です。")
	for opt in optlist:
		if opt[0] == '-d':
			if direct != '':
				error("-d指定が重複しています。")
			direct = True
		else:
			if lang != '':
				error("言語の指定が複数あります。")
			# '-e' or '-j':
			lang = opt[0][1]
	if not args:
		error("ファイルまたは文字列の指定がありません。")
	sys.argv = sys.argv[0:1] + args	# オプションを除くリスト

	#
	# ダイレクトモード
	#
	if direct:
		print(weekday(sys.argv[1], lang))
		sys.exit(0)

	#
	# <field>
	#
	rel_key = getFieldList(sys.argv[1])

	#
	# メインループ
	#
	NF=-1
	keypos=-1
	firstline=True
	for line in open_file(2):
		line=preproc_line(line)	# 入力行の前処理
		if not line:	sys.exit(0)
		fields=line.split(" ")
		# 先頭行または欄数変化のあるときはkey指定の検査をする ここで絶対欄位置のkeyposを得る
		keypos=check_num_fields_variation(fields,keypos)
		if keypos < len(fields)-1: endchar=' '
		else:                    endchar=''

		print(" ".join(fields[0:keypos+1]),weekday(fields[keypos], lang), end=endchar)
		if keypos < len(fields)-1:
			print(" ".join(fields[keypos+1:]), end='')
		print()

	sys.exit(0)
