#!/usr/bin/env python
#coding: utf-8
#
# count キーカウントツール（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Matasomo Togashi
#
# The MIT License
#
# Copyright (C) 2023 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "count <k1> <k2> <file>"
_version = "Thu Sep 22 17:23:30 JST 2023"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"

_keypat = r'((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?)$'
_keypatNF=r'(?P<m0>(?P<m01>\d+)|(?P<m02>NF(?P<m03>-\d+)?))(/(?P<m1>(?P<m11>\d+)|(?P<m12>NF(?P<m13>-\d+)?)))?$'

# 濁音と半濁音のNFD表記でNFC表記もできるもの→NFDtoNFC変換でNFCに統一する
_comb_pat=r"(((う|か|き|く|け|こ|さ|し|す|せ|そ|た|ち|つ|て|と|は|ひ|ふ|へ|ほ|ウ|カ|キ|ク|ケ|コ|サ|シ|ス|セ|ソ|タ|チ|ツ|テ|ト|ハ|ヒ|フ|ヘ|ホ|ワ|ヰ|ヱ|ヲ)゙)|((は|ひ|ふ|へ|ほ|ハ|ヒ|フ|ヘ|ホ)゚))+"

import re
import os
import sys
import unicodedata

def error(msg, *arg):
	print('Error[count] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("        ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(n, mode = 'r'):
	if n >= len(sys.argv):	# ファイル名省略時
		filename = '-'	# sys.stdinを仮定する
	else:
		filename = sys.argv[n]	# 指定位置のコマンドパラメータをとる
	if filename == '-':	# sys.stdinのとき
		filename = '/dev/fd/0'	# ファイルディスクリプターで表記する
	if not Python3():
		mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	# 標準入力も含めてopen()で開く
	try:
		file = open(filename, mode)
	except:
		error("ファイル %s をオープンできません。", sys.argv[n])
	return file

# NF相対欄位置からNF（欄数）に応じた0発進の欄位置に変換する
def getpos(base_pos):
	# NF相対欄位置からの変換:
	#  nのときはそのまま
	#  0のときはNF（欄数）
	#  -nのときはNF-n
	# 0発進とするために-1を加える
	if base_pos > 0:
		pos=base_pos-1
		if pos >= NF:	error("フィールド番号が大きすぎます。 %s",str(base_pos))
		return False,pos	# 元からの絶対欄位置
	else:
		pos=NF+base_pos-1
		if pos < 0:	error("フィールド指定でNF-x の x が大きすぎます。 %s","NF-"+str(-base_pos))
		return True,pos	# NF相対欄位置からの絶対化欄位置

# NF相対欄位置リスト（rel_keylist）からNF（欄数）に応じた実際の欄位置リスト（keylist）を作成する
def make_keylist(rel_keylist,abs_rel_mixed_range):
	# NF相対欄位置リスト（rel_keylist）とは「NFやNF-xのNF相対欄位置指定を含む欄位置リスト」を意味しリストには絶対欄位置も含む
	# rel_keylist（要素数1）の要素は区間をあらわす整数tupleの(start,end)になっている
	# rel_keylistを構成するそれぞれの整数は絶対欄位置指定とNF相対欄位置指定の両方がありうる
	if rel_keylist==[None]:	# 全欄指定
		return list(range(0,NF)),False
	range_list=[]
	# rel_keylistはひとつの区間指定(a/b)のみ
	rel1,start=getpos(rel_keylist[0][0])
	rel2,end=getpos(rel_keylist[0][1])
	if start <= end:	# 正順
		range_list=range(start,end+1)
	else:	# 逆順
		range_list=range(start,end-1,-1)
	return range_list	# 欄位置は0発進

# 欄番号文字列をNF相対形式で整数化する
def getFieldNum(str,str1,str2):
	# n または NF または NF-x の形式の欄番号をNF相対形式の整数で確定する
	# 正規表現で「\d+|NF(-\d+)?」にmatchする全体をstrが、「\d+」でmatchする部分をstr1が、「(-\d+)?」でmatchする部分をstr2が保持している
	# NF相対形式の整数化:
	#  単独のnが0のときはNone
	#  単独のnが0以外のときは整数のn
	#  単独のNFのときは整数の0
	#  NF-nのときは整数の-n
	# 実際の欄番号にする際には行ごとに得たNF（欄数）を使用して計算する
	if str1:	# n
		fieldnum=int(str1)
		if fieldnum==0:	# 欄番号0は全欄指定を意味する
			fieldnum=None
	else:	# NF-n または NF
		if str2:	# NF-n
			fieldnum=int(str2)
		else:	# NF
			fieldnum=0
	return fieldnum

#
# ひとつの欄指定パラメータから欄番号リストを得る（区間指定にも対応する）
#
def getFieldList(start,end):
	keyrange=start+"/"+end	# 区間指定形式にする
	mobj = re.match(_keypat,keyrange)	# 構文検査のために実行する
	if not mobj:	# フィールド指定が不正
		error("フィールド指定が不正です。 %s",start+" "+end)
	field_param=keyrange.replace("NF-0","NF")	# NF-0はNFと書き替える
	fieldlist=[]
	abs_rel_mixed_range=False
	mobj = re.match(_keypatNF,field_param)
	start=getFieldNum(keyrange,mobj.group('m01'),mobj.group('m03'))	# 前端部を得る
	if mobj.group('m1'):	# a/bの形式で区間指定をしている
		end=getFieldNum(field_param,mobj.group('m11'),mobj.group('m13'))	# 後端部を得る
		fieldlist.append((start,end))	# 区間で確定
		# 絶対欄位置指定とNF相対欄位置指定が混在するときはmarkする
		if (start>0 and end <=0) or (start<=0 and end >0):
			abs_rel_mixed_range=True
	else:	# a/bの区間指定ではない
		error("フィールド指定が不正です。 %s",start+" "+end)
	return fieldlist,abs_rel_mixed_range

#
#	コマンドのフィールド指定パラメータから処理対象のNF相対欄位置リストを作成する
#
def getTargetFields(start,end):
	if start=="" or end=="":
		return [None]	# フィールド指定パラメータリストに空文字列があるときは全欄指定とする
	ans = []
	fieldlist,abs_rel_mixed_range=getFieldList(start,end)
	ans+=fieldlist
	if None in ans:
		return [None],abs_rel_mixed_range	# 欄位置にひとつでも0を指定するものがあるときは全欄指定とする
	return fieldlist,abs_rel_mixed_range

#
# 行の欄数検査
#
def check_num_fields_variation(fields,abs_rel_mixed_range):
	global	NF,key_list,oldkey
	start=False
	nf=len(fields)
	if NF==-1:	start=True
	if nf != NF:	# 欄数が変化したかまたは先頭行なら
		NF=nf	# NFを更新
		# 行の欄数NFを見てNF相対欄位置リストから(絶対)欄位置リストを決定する
		key_list=make_keylist(rel_keylist,abs_rel_mixed_range)
		if start:	# 先頭行なら
			oldkey = NFDtoNFC(" ".join([fields[x] for x in range(NF) if x in key_list]))
			return True,oldkey	# 先頭行であった oldkeyを作って返値とする
		else:	# 先頭行以外で欄数変化があったら
			if abs_rel_mixed_range:	# key指定において区間指定でabs_rel混在だったら
				error("keyの区間指定において絶対欄位置指定とNF相対欄位置指定が混在している状態でフィールド数が変化しました。")
	return False,oldkey	# 先頭行ではなかった oldkeyは更新していない

# 不要な空白の削除関数
def rm_sp(line):
	return re.sub(r' {2,}',' ',re.sub(r'^ +| +$','',line))	# 行頭と行末の空白を削除し連続空白を単空白にする

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	line=rm_sp(line)	# 行頭と行末の空白を削除し連続空白を単空白にする
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

#
# unicode 変換
#
def to_unicode(s):
	try:
		return unicode(s, 'utf_8')
	except:
		error("不当なマルチバイト文字が含まれています。")

#
# utf8 変換
#
def to_utf8(s):
	try:
		return s.encode('utf-8')
	except:
		error("内部エラー UTF8への変換に失敗しました。")

#
# NFDtoNFC()のre.sub()から指定patternがみつかるごとに呼ばれるのでNFD/NFC変換をして返す
# 置換対象パターンはNFD文字:全角ひらがな/全角カタカナの清音に結合用濁点/結合用半濁点を連接したもの
# 置換先文字はNFC文字:全角ひらがな/全角カタカナの濁音/半濁音
#
def replace(matchobj):
	if Python3():	return unicodedata.normalize('NFC',matchobj.group(0))
	else:	return to_utf8(unicodedata.normalize('NFC',to_unicode(matchobj.group(0))))	# Python2ではutf8→unicdoe→utf8の変換をする

#
# 全角ひらがな/全角カタカナの濁音/半濁音のNFC化
#
def NFDtoNFC(str):
	# 全角ひらがな/全角カタカナの濁音/半濁音をNFCで統一して返す
	return re.sub(pattern,replace,str)

#
# メイン関数
#
if __name__ == '__main__':

	global	NF,key_list,oldkey

	if len(sys.argv) < 3 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	# NFD文字（清音+結合用濁点/結合用半濁点）検出のための正規表現パターンを準備
	pattern=re.compile(_comb_pat)

	#
	# <k1> <k2>
	#
	k1=sys.argv[1]
	k2=sys.argv[2]

	# フィールド指定パラメータからNF相対欄位置リストを作成する
	# rel_keylist:	NF相対欄位置リスト
	# abs_rel_mixed_range:	（1/NFなど）キーの区間指定において絶対欄位置指定とNF相対欄位置指定が混在していればTrue
	rel_keylist,abs_rel_mixed_range = getTargetFields(k1,k2)

	firstline=True

	#
	# メインループ
	#
	file = open_file(3)
	NF=-1
	n=1
	for line in file:
		line=preproc_line(line)	# 入力行の前処理
		if not line:	sys.exit(0)
		fields=line.split(" ")
		istopline,oldkey=check_num_fields_variation(fields,abs_rel_mixed_range)	# 先頭行または欄数変化のあるときはkey指定の検査をする
		if istopline:	continue	# 先頭行のときはoldkeyを得る
		key = NFDtoNFC(" ".join([fields[x] for x in range(NF) if x in key_list]))
		if key != oldkey:	# 文字列比較はNFCで行なう
			print(oldkey, n)
			n = 0
			oldkey = key
		n = n + 1
	print(oldkey, n)

	sys.exit(0)
