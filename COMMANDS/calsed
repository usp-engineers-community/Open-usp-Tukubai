#!/usr/bin/env python
#coding: utf-8
#
# calsed 軽いsed（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
#
# The MIT License
#
# Copyright (C) 2021 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import sys
import re
import unicodedata

_usage = "calsed <org> <dst> [<file>]"
_usage2 = "calsed -f <script> [<file>]"
_option = "-n<string>"
_option2 = "-s<c>"
_version = "Tue Oct 19 23:46:03 JST 2021"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"

# 濁音と半濁音のNFD表記でNFC表記もできるもの→NFDtoNFC変換でNFCに統一する
_comb_pat=r"(((う|か|き|く|け|こ|さ|し|す|せ|そ|た|ち|つ|て|と|は|ひ|ふ|へ|ほ|ウ|カ|キ|ク|ケ|コ|サ|シ|ス|セ|ソ|タ|チ|ツ|テ|ト|ハ|ヒ|フ|ヘ|ホ|ワ|ヰ|ヱ|ヲ)゙)|((は|ひ|ふ|へ|ほ|ハ|ヒ|フ|ヘ|ホ)゚))+"

def error(msg, *arg):
	print('Error[calsed] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("         ", _usage2, file=sys.stderr)
	print("Option  :", _option, file=sys.stderr)
	print("         ", _option2, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(filename):
	if filename == '-':	filename = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():	mode='r'
	else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(filename, mode)
	except:
		if filename=='/dev/fd/0':
			error("標準入力ファイルをオープンできません。")
		else:
			error("ファイル '%s' をオープンできません。", filename)
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

#
# utf8 変換
#
def to_utf8(s):
	try:
		return s.encode('utf-8')
	except:
		error("内部エラー UTF8への変換に失敗しました。")

#
# unicode 変換
#
def to_unicode(s):
	if Python3(): return s
	try:
		return unicode(s, 'utf_8')
	except:
		error("不当なマルチバイト文字が含まれています。")

#
# NFDtoNFC()のre.sub()から指定patternがみつかるごとに呼ばれるのでNFD/NFC変換をして返す
# 置換対象パターンはNFD文字:全角ひらがな/全角カタカナの清音に結合用濁点/結合用半濁点を連接したもの
# 置換先文字はNFC文字:全角ひらがな/全角カタカナの濁音/半濁音
#
def replaceNFDtoNFC(matchobj):
	if Python3():	return unicodedata.normalize('NFC',matchobj.group(0))
	else:	return to_utf8(unicodedata.normalize('NFC',to_unicode(matchobj.group(0))))	# Python2ではutf8→unicdoe→utf8の変換をする

#
# 全角ひらがな/全角カタカナの濁音/半濁音のNFC化
#
def NFDtoNFC(str):
	# 全角ひらがな/全角カタカナの濁音/半濁音をNFCで統一して返す
	return re.sub(pattern,replaceNFDtoNFC,str)

#
# 文字列置換関数
def replace(line,org,dst,n,s):

	# 置換後文字列についてnull文字への変換準備
	if n: # nオプションがあるときはnull文字へ置換する文字列を変更
		tonull=n;
	else:
		tonull='@' # null文字へ置換する文字列のdefault値
	# 置換後文字列について空白文字への変換準備
	if s: # sオプションがあるときは
		thedst=dst.replace(s,' ') # 置換後文字列中のsオプション指定文字列を半角空白にする
	else:
		thedst=dst
	# 置換を実行
	if dst==tonull: # null文字への置換指定（sオプションによる置換後文字列修正前のもので判断）
		return line.replace(org,'')
	else: # 通常の置換（sオプションがあれば置換後文字列修正後のものを使用）
		return line.replace(org,thedst)

#
# 文字列置換関数2（置換リストによる）
def replacebylist(line,replists,n,s):

	for reptuple in replists: # 置換リストの上から順に置換を実行
		line=replace(line,reptuple[0],reptuple[1],n,s)
	return line

# 「ゆるい文字列一致」版replace() #############################################
#
# 文字列置換関数
def LooseReplace(line,org,dst,n,s):

	# 置換後文字列についてnull文字への変換準備
	if n: # nオプションがあるときはnull文字へ置換する文字列を変更
		tonull=n;
	else:
		tonull=toXstr("@")	# null文字へ置換する文字列のdefault値
	# 置換後文字列について空白文字への変換準備
	if s: # sオプションがあるときは
		spchar=toXstr(" ")
		thedst=Xreplace(s,dst,spchar)	# 置換後文字列中のsオプション指定文字列を半角空白にする
	else:
		thedst=dst
	# 置換を実行
	if XstrMatch(dst,tonull): # null文字への置換指定（sオプションによる置換後文字列修正前のもので判断）
		nullchar=toXstr(to_unicode(""))
		return Xreplace(org,line,nullchar)
	else: # 通常の置換（sオプションがあれば置換後文字列修正後のものを使用）
		return Xreplace(org,line,thedst)

# 「ゆるい文字列一致」版replacebylist() #############################################
#
# 文字列置換関数2（置換リストによる）
def LooseReplacebylist(line,Xreplist,n,s):

	for i in range(len(replist)): # 置換リストの上から順に置換を実行
		line=LooseReplace(line,Xreplist[i][0],Xreplist[i][1],n,s)
	return line

###########################################
# 代用対/結合文字列/IVS/SVS/拡張文字列関連

#
# 代用対前半部の判定
#
def isHighSurrogate(cp):
	if 0xd800 <= cp and cp <= 0xdbff: return True
	else:                             return False

#
# 代用対後半部の判定
#
def isLowSurrogate(cp):
	if 0xdc00 <= cp and cp <= 0xdfff: return True
	else:                             return False

#
# UCS2の判定
#
def isUCS2():
	if sys.maxunicode==0xFFFF: return True
	else:                      return False

#
# 合成可能文字の判定
#
def isCombiningDiacriticalMark(cp):
	# unicodeにおける合成可能文字のブロック内か？
		# 0x3099 0x309a	仮名文字の合成可能濁点と合成可能半濁点
		# 0x0300-0x036F	ダイアクリティカルマーク（合成可能）
		# 0x1AB0-0x1AFF	ダイアクリティカルマーク（合成可能）拡張
		# 0x1DC0-0x1DFF	ダイアクリティカルマーク（合成可能）補助
		# 0x20D0-0x20FF	記号用ダイアクリティカルマーク（合成可能）
		# 0xFE20-0xFE2F	半記号（合成可能）
	if cp == 0x3099 or cp == 0x309a or \
		0x0300<=cp and cp <=0x036F or \
		0x1AB0<=cp and cp <=0x1AFF or \
		0x1DC0<=cp and cp <=0x1DFF or \
		0x20D0<=cp and cp <=0x20FF or \
		0xFE20<=cp and cp <=0xFE2F:
		return True
	else:	return False

#
# 異体字選択子（vaiation selector）の判定
#
def isVariationSelector(cp):
	# unicodeにおける異体字選択子のブロック内か？
		# 0xFE00-0xFE0F	Variation Selectors Supplement	字形選択子補助（SVS用）
		# 0xE0100-0xE01EF	Variation Selectors	字形選択子（IVS用）
	if  0xFE00<=cp  and cp <=0xFE0F or \
		0xE0100<=cp and cp <=0xE01EF:
		return True
	else:	return False

#
# SVS異体字選択子（variation selector）の判定
#
def isSVSVariationSelector(cp):
	# unicodeにおける異体字選択子のブロック内か？
		# 0xFE00-0xFE0F	Variation Selectors Supplement	字形選択子補助（SVS用）
	if  0xFE00<=cp  and cp <=0xFE0F:
		return True
	else:	return False

#
# IVS異体字選択子（variation selector）の判定
#
def isIVSVariationSelector(cp):
	# unicodeにおける異体字選択子のブロック内か？
		# 0xE0100-0xE01EF	Variation Selectors	字形選択子（IVS用）
	if  0xE0100<=cp and cp <=0xE01EF:
		return True
	else:	return False

#
# 文字列の拡張文字列化
#
# 文字列を拡張文字列に変換する	1文字が複数の符号位置であらわされている場合（代用対/結合文字/IVS/SVS）への対応
#	返値は(拡張文字,属性情報)のtuppleのlistでこれを「拡張文字列」とする
# 	このうち
#	拡張文字は
# 		UCS2のときはリスト
# 			[ 通常文字または文字列としての代用対 , 結合文字または異体字選択子（2バイトまたは代用対）または空文字 ]
# 		UCS4のときは文字列
# 			文字列（通常文字に結合文字または異体字選択子が付くことがある）
#	属性情報は属性値（整数）となる
#		属性は:
#		UCS: 通常のUnicode文字（Universal Coded Character Set）
#		CCS: 結合文字列（Combining Charactor Seuence）
#		SVS: 標準異体字列（Standard Variation Sequence）
#		IVS: 異体字列（Ideographic Variation Sequence）
#		に分類される
def toXstr(s):
	StringList=[]
	AttrList=[]	# 拡張文字列の属性リスト
	if isUCS2():
		surrogate_pair=False	# UCS2では代用対（surrogate pair）がありうる
		prevchar=""
		for c in s:
			cp=ord(c)	# code point
			# 代用対（[D800～DBFF]+[DC00～DFFF]のペア）の存在を考慮する
			if not surrogate_pair:	# 代用対の処理中でなければ
				if isHighSurrogate(cp):	# 代用対の前半部なら
					surrogate_pair=True	# surrogate pair starts
					HighSurrogate=c
					HighSurrogateCp=cp
					continue
				if isLowSurrogate(cp):	error("代用対の構成が無効です。")	# 代用対の後半部が単独で現れた
				elif isCombiningDiacriticalMark(cp):	# 合成可能文字なら
					if prevchar=="":	error("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
					StringList.append([prevchar,c])	# 先行文字と合成可能文字の組を追加（合成可能文字は第0面のみにある）
					AttrList.append(CCS)
					prevchar=""
				elif isSVSVariationSelector(cp):	# 異体字選択子なら（代用対ではないのでSVS用異体字選択子の可能性のみ検査する）
					if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,c])	# 先行文字とSVS用異体字選択子（2バイト）の組を追加
					AttrList.append(SVS)
					prevchar=""
				else:	# 次となる普通の文字がきたら先行文字を単独で追加
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
						AttrList.append(UCS)
					prevchar=c	# 先行文字とする
			elif isLowSurrogate(cp):	# 代用対の処理中に代用対の後半部がきたら代用対の完成
				surrogate_pair=False	# surrogate pair ends
				sp=HighSurrogate+c	# 代用対を作る
				uni = 0x10000 + (HighSurrogateCp - 0xD800) * 0x400 + (cp - 0xDC00);	# 代用対をdecodeする
				if isIVSVariationSelector(uni):	# 代用対が異体字選択子なら（代用対なのでSVSてはなくIVSの可能性のみ検査する
					if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,sp])	# 先行文字とIVS用異体字選択子（4バイト）の組を追加
					AttrList.append(IVS)	# 代用対はIVS用異体字選択子
					prevchar=""
				else:	# 先行文字があって次に文字としての代用対が来た
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
						AttrList.append(UCS)
					prevchar=sp	# 代用対を先行文字とする
			else:	error("代用対の構成が無効です。")	# 代用対の前半部の次に代用対後半部以外が現われた
		if surrogate_pair: 	error("代用対の構成が無効です。")	# 代用対の前半部で文字列の終端に達した
		if prevchar!="":
			StringList.append([prevchar,""])	# 最後の先行文字と空文字の組を追加
			AttrList.append(UCS)
	else:	# UCS4
		prevchar=""
		for c in s:
			cp=ord(c)	# code point
			if isCombiningDiacriticalMark(cp):	# 合成可能文字なら
				if prevchar=="":	error("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
				StringList.append(prevchar+c)	# 先行文字と合成可能文字の列を追加
				AttrList.append(CCS)
				prevchar=""
			elif isSVSVariationSelector(cp) or isIVSVariationSelector(cp):	# 異体字選択子なら
				if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
				StringList.append(prevchar+c)	# 先行文字と異体字選択子（4バイト）の列を追加
				if isSVSVariationSelector(cp):
					AttrList.append(SVS)
				else:
					AttrList.append(IVS)
				prevchar=""
			else:
				if prevchar!="":
					StringList.append(prevchar)	# 次となる普通の文字がきたら先行文字を単独で追加
					AttrList.append(UCS)
				prevchar=c	# 先行文字とする
		if prevchar!="":
			StringList.append(prevchar)	# 最後の先行文字を追加
			AttrList.append(UCS)
	return list(zip(StringList, AttrList))	# (Xchar,Xattr)のtuppleのlistを返す

#
# XcharMatch 文字のゆるい一致検査
#
#	拡張文字同士で「ゆるい一致検査」をする
#		通常文字が与えられたときは拡張文字列に変換してから比較する
#		「拡張文字列」はtoXstr()が出力する文字単位のリストによる「文字列」
#		ふたつの文字列で同じ位置の文字の比較は
#			UCSとUCSのときは通常の文字比較で「一致/不一致」を決める
#			IVSとIVSのときは基底文字と異体字選択子の両方が同じなら「一致」とする
#			UCSとIVSのときはUCSと「IVSの基底文字」が同じなら（IVSの異体字選択子の値にかかわらず）「一致」（ゆるい一致）とする
#		これは、IVSに対して、その基底文字に等しいUCSは「異体字選択子による微小な字体差を包摂していて文字比較においてwild-characterのようになっている」ということによる
#		なお、UCSを表示したときに使用される字体は対応するIVSの異体字組があるときはfontシステムがその中からひとつを省略時字体（default glyph）として用いる
def XcharMatch(char1,char2):
	if type(char1)!=tuple:	# char1は通常文字
		Xchar1=toXstr(char1)[0]	# 拡張文字に変換
	else:
		Xchar1=char1
	if type(char2)!=tuple:	# char2は通常文字
		Xchar2=toXstr(char2)[0]	# 拡張文字に変換
	else:
		Xchar2=char2
	# LooseMatchでなかったら通常比較
	if not LooseMatch:
		return char1==char2
	# (拡張文字,属性)のtupleを分解
	char1=Xchar1[0]
	char2=Xchar2[0]
	attr1=Xchar1[1]
	attr2=Xchar2[1]
	if char1==char2:	# 拡張文字で一致のとき
		return True
	if char1[0]!=char2[0]:	# 拡張文字の基底文字部分が等しくないとき
		return False	# 両文字はここで不一致となった
	else:	# 文字の基底文字部分が等しいとき
		if (attr1==UCS and attr2==IVS) or (attr1==IVS and attr2==UCS):	# 基底文字部分が等しく片方はUCSでもう一方はIVS異体字選択子
			return True	# この拡張文字は一致←「片方はUCSでもう一方はIVS」は拡張部分が異なる場合の例外的一致
		else:	# 基底文字部分が等しく両方に結合文字/SVS異体字選択子/（異なる）IVS異体字選択子
			# この段階では基底文字部分が等しく拡張部分が異なるままなので「例外」ではなく不一致となる
			return False	# 両文字は不一致

#
# XstrMatch 文字列のゆるい一致検査
#
#	拡張文字列同士で「ゆるい一致検査」をする
#		通常文字列が与えられたときは拡張文字列に変換してから比較する
#		「拡張文字列」はtoXstr()が出力する文字単位のリストによる「文字列」
#		ふたつの文字列で同じ位置の文字の比較はXcharMatch()で行なう
def XstrMatch(str1,str2):
	# 与えられた文字列が通常文字列のときは拡張文字列に変換しておく（文字列がUTF8ときときはunicodeへの変換もする）
	if type(str1)!=list:
		str1=toXstr(str1)
	if type(str2)!=list:
		str2=toXstr(str2)
	if str1==str2:	# 全体一致
		return True
	if len(str1)!=len(str2):	# 拡張文字列長（文字数）が異なる
		return False
	for i in range(0,len(str1)):
		if not XcharMatch(str1[i],str2[i]):
			return False
	return True	# 最後の文字まで一致した

#
# 文字列の合成
#
# 拡張文字列を文字列に変換する	1文字が複数の符号位置であらわされている場合（代用対/結合文字/IVS/SVS）への対応
# 	拡張文字列は(拡張文字,属性値)のtuplgのlistで
#		拡張文字は
# 			UCS2のときはリスト
# 				[ 通常文字または文字列としての代用対 , 結合文字または異体字選択子（2バイトまたは代用対）または空文字 ]
# 			UCS4のときは文字列
# 				文字列（通常文字に結合文字または異体字選択子が付くことがある）
#		属性値は整数
def Xstr2Str(xs,start=0,end=None):	# 拡張文字列xsのstartからendの手前までを通常文字列として返す
	if xs==None:
		return ""
	if end==None:	end=len(xs)
	# startとendは文字単位で与えられる
	if start<0 or start>len(xs):
		error("部分文字列の開始位置の指定エラー")
	if end<0 or end>len(xs):
		error("部分文字列の終了位置の指定エラー")
	if start>end: error("部分文字列の開始位置が終了位置の後にあります。")
	string=""
	for i in range(start,end):
		if isUCS2():	# UCS2のとき拡張文字列の各拡張文字部分は長さ2のリスト（[代用対または通常文字,結合文字または異体字選択子（代用対のこともある）]）
			string+=xs[i][0][0]+xs[i][0][1]
		else:
			string+=xs[i][0]	# UCS4のとき拡張文字列のi番目の文字部分をとる
	return string

# Xindex 「文字列のゆるい一致」にもとづく文字列メソッドindex()の拡張文字列版（ほぼ）代用関数
#
def Xindex(str1,str2):	# str1がstr2の中にあれば発見位置を返す
	len1=len(str1)
	dif=len(str2)-len1
	if dif<0: return -1
	for i in range(dif+1):
		if XstrMatch(str1,str2[i:i+len1]):
			return i	# str2の先頭からi番目でmatch
	return -1

# Xreplace 文字列メソッドreplace()の「文字列のゆるい一致」にもとづく拡張文字列版（ほぼ）代用関数
#
def Xreplace(str1,str2,str3):	# str1がstr2の中にあればstr3で置換する
	i=0
	while i>=0:
		i=Xindex(str1,str2)
		if i>=0:	# str1がstr2の中にあったら
			# str2の中のstr1に等しい部分をstr3で置換する
			str2[i:i+len(str1)]=str3
	return str2

#
# 直接入力文字列の前処理
#
#  Python3においてコマンドラインからの直接入力文字列中にUnicode符号位置がU+FFFFを超えるコードがあると
#  Unicode文字に正しく変換されない場合があることへの対処をする
def utf2ucs(instr):
	outstr=""	# 出力文字列
	intlist=[]	# 作業用整数リスト
	for char in instr:
		if ord(char)>=0xdc00 and ord(char)<=0xdcff:	# 文字の符号位置がU+DCxxの範囲にあったら「UTF8もどき」
			intlist.append(ord(char)-0xdc00)	# 0xdc00のげたをはずして整数リストに入れる
		else:	# 通常文字がきたら
			if len(intlist)>0:	# ここまでに「UTF8もどき」列を変換した整数リストがあったら
				# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
				outstr+= bytes(intlist).decode("utf_8")
				intlist=[]	# 整数リストを再初期化
			outstr+=char	# 新しくきた通常文字を出力文字列に追加
	# 「UTF8もどき」列を変換した整数リストが残っていたら
	# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
	if len(intlist)>0:	outstr+= bytes(intlist).decode("utf_8")
	return outstr

#
# main

if __name__ == '__main__':

	# コマンドの説明表示
	if len(sys.argv) <= 1 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	#
	# NFD文字（清音+結合用濁点/結合用半濁点）検出のための正規表現パターンを準備
	#
	pattern=re.compile(_comb_pat)

	#
	# 拡張文字列の各文字ごとの属性識別用定数
	UCS,CCS,SVS,IVS=0,1,2,3
	# UCS: 通常のUnicode文字（Universal Coded Character Set）
	# CCS: 結合文字列（Combining Charactor Seuence 結合文字列
	# SVS: 標準異体字列（Standard Variation Sequence）
	# IVS: 異体字列（Ideographic Variation Sequence）

	# 「ゆるい文字列一致」の指定
	LooseMatch=True	# 現在は固定

	org, dst, filename, f, n, s = None, None, None, None, None, None # default値

	# パラメータ解析
	numparam=0
	miniparam=2
	while len(sys.argv) > 1:
		if sys.argv[1] == "-f": # fパラメータ（変換元文字列と変換後文字列をセットにしたファイルを指定）
			del(sys.argv[1]) # popup
			if len(sys.argv)==1:
				error("fパラメータの値がありません")
			if f:
				error("fパラメータが重複しています")
			f=sys.argv[1]
			miniparam=0
		elif sys.argv[1][:2] == "-n": # nオプション（置換後文字列の中でヌル文字列に置換する文字列の指定）
			if n:
				error("nオプションが重複しています")
			if len(sys.argv[1])<3:
				error("nオプションの値がありません")
			n=sys.argv[1][2:]
			if Python3():
				n=utf2ucs(n)	# Python3のときは-nで直接指定の文字列に対して前処理をする
			n=to_unicode(NFDtoNFC(n))	# 文字列をNFC化
			if LooseMatch:
				n=toXstr(n)	# 拡張文字列に変換
		elif sys.argv[1][:2] == "-s": # sオプション（置換後文字列の中で半角空白に変換する文字の指定）
			if s:
				error("sオプションが重複しています")
			if len(sys.argv[1])<3:
				error("sオプションの値がありません")
			s=sys.argv[1][2:]
			if Python3():
				s=utf2ucs(s)	# Python3のときは-sで直接指定の文字列に対して前処理をする
			s=to_unicode(NFDtoNFC(s))	# 文字列をNFC化
			sstr=toXstr(s)	# 拡張文字列に変換
			# 文字数の判定
			if len(sstr)>1:
				error("sオプションの値が2文字以上です")
			if LooseMatch:	s=sstr
		else:
			numparam+=1
			if numparam==1:
				org=sys.argv[1] # orgパラメラ－タ（仮）
			elif numparam==2:
				dst=sys.argv[1] # dstパラメータ
			else:
				filename=sys.argv[1] # fileパラメータ
		del(sys.argv[1]) # popup

	# パラメータ検査
	if numparam<miniparam:
		error("パラメータの数が足りません")
	if f: # fオプションがあるとき
		if numparam>1:
			error("fオプション指定のときのパラメータの数が多すぎます")
		if org: # calsed -f <script> <file> の形式のとき
			filename=org # 第1パラメータ（org（仮））をfilenameに読み替える
	else:
		if numparam>3:
			error("パラメータの数が多すぎます")

	# fオプション指定のときは置換リストを置換リストファイルから読み込む
	if f:
		file2=open_file(f) # 置換リストファイルを開く
		replist=[]
		# 置換リストファイルを読む
		firstline=True
		for line in file2:
			line=preproc_line(line)
			if line=='': continue # 空行は処理しない
			line=NFDtoNFC(line)	# 入力行をNFC化
			# この行の組を置換リストに追加する
			repdata=line.split(' ',1) # 最初の半角空白で行を2分割する
			if len(repdata)==1: # 要素がひとつのときは第2要素としてnullを置く
				repdata.append("")
			replist.append(repdata)
		file2.close() # 置換リストファイルを閉じる
		# LooseMatchならreplistを拡張文字列化する
		if LooseMatch:
			Xreplist=[]
			for i in range(len(replist)):
				org_str=toXstr(to_unicode(replist[i][0]))
				dst_str=toXstr(to_unicode(replist[i][1]))
				Xreplist.append([org_str,dst_str])
	# fオプションがないときはパラメータで置換を指定しorg,dstを調整するする
	else:
		if Python3():
			# Python3のときは直接指定の置換対象文字列と置換文字列に対して前処理をする
			org=utf2ucs(org)
			dst=utf2ucs(dst)
		org=NFDtoNFC(org)	# 変換元文字列をNFC化
		dst=NFDtoNFC(dst)	# 変換先文字列をNFC化
		if LooseMatch:
			org=toXstr(to_unicode(org))	# 変換元文字列を拡張文字列化
			dst=toXstr(to_unicode(dst))	# 変換先文字列を拡張文字列化

	# 置換対象ファイルを開く
	file=open_file(filename)

	# 置換対象ファイルを読む
	firstline=True
	for line in file:
		line=preproc_line(line)
		line=NFDtoNFC(line)	# 入力行をNFC化
		if LooseMatch:
			line=toXstr(to_unicode(line))	# 入力行を拡張文字列化
		if not f: # fオプションがないときはパラメータで置換を指定する
			if LooseMatch:
				line=LooseReplace(line,org,dst,n,s)	# lineの中にorgがあればdstに置換する
			else:
				line=replace(line,org,dst,n,s)
		else: # fオプション指定のときは置換リストを渡す
			if LooseMatch:
				line=LooseReplacebylist(line,Xreplist,n,s)
			else:
				line=replacebylist(line,replist,n,s)
		# 置換結果を出力
		if LooseMatch:
			if Python3():
				print(Xstr2Str(line))	# 拡張文字列を通常文字列に戻してpirntする
			else:
				print(to_utf8(Xstr2Str(line)))	# 拡張文字列を通常文字列に戻してpirntする
		else:
			print(line)

	# 置換対象ファイルを閉じる
	file.close()

	# 終了
	sys.exit(0)
