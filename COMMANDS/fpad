#!/usr/bin/env python
#coding: utf-8
#
# fpad : フィールドのパディング（Open usp Tukubai版）
#
# designed by Nobuaki Tounaka
# written  by Hinata Yanagi
#
# The MIT License
#
# Copyright (C) 2022 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import re
import sys
import unicodedata

_usage = "fpad [-t] <s> <n> [<file>]"
_version = "Sat Oct  8 17:55:00 JST 2022"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4+/UTF-8)"

def error(msg, *arg):
	print('Error[fpad] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(filename):
	if filename == '-': filename = '/dev/fd/0' # sys.stdinをファイルディスクリプターで表記する
	if Python3():
		mode='r'
	else:
		mode='rU' # Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(filename, mode)
	except:
		if filename=='/dev/fd/0':
			error("標準入力ファイルをオープンできません。")
		else:
			error("ファイル '%s' をオープンできません。", filename)
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n") # 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():
		return chr(int("FEFF",16)) # U+FEFFはBOMのUnicode符号位置
	else:
		return "\xEF\xBB\xBF" # BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):
		line=line[len(get_BOM()):] # 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line) # 行末の改行記号を削除する
	line=rm_BOM(line) # ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

# （NFを含むかもしれない）フィールド要素を整数に変換する
def intwithNF(str,NF):
	# フィールド要素にNFを含むとき
	if str=="NF":
		return NF
	elif str.startswith("NF-"):
		str=str[3:]
		fieldnum=NF-int(str)
	# NFを含まないとき
	else:
		fieldnum=int(str)
	if fieldnum<=0:
		error("キー指定が0または負数です")
	if fieldnum>NF:
		error("フィールド指定がレコードのフィールド数を超えています")
	return fieldnum

#
# utf8 変換
#
def to_utf8(s):
	try:
		return s.encode('utf-8')
	except:
		die("内部エラー UTF8への変換に失敗しました。")

#
# unicode 変換
#
def to_unicode(s):
	if Python3(): return s
	try:
		return unicode(s, 'utf_8')
	except:
		die("不当なマルチバイト文字が含まれています。")

#
# NFDtoNFC()のre.sub()から指定patternがみつかるごとに呼ばれるのでNFD/NFC変換をして返す
# 置換対象パターンはNFD文字:全角ひらがな/全角カタカナの清音に結合用濁点/結合用半濁点を連接したもの
# 置換先文字はNFC文字:全角ひらがな/全角カタカナの濁音/半濁音
#
def replace(matchobj):
	if Python3():
		return unicodedata.normalize('NFC',matchobj.group(0))
	else:
		return to_utf8(unicodedata.normalize('NFC',to_unicode(matchobj.group(0)))) # Python2ではutf8→unicdoe→utf8の変換をする

#
# 全角ひらがな/全角カタカナの濁音/半濁音のNFC化
#
def NFDtoNFC(str):
	# 全角ひらがな/全角カタカナの濁音/半濁音をNFCで統一して返す
	return re.sub(pattern,replace,str)

# main

if __name__ == '__main__':

	filename = "-" # default値/初期値
	truncate = False

	# コマンドの説明表示
	if len(sys.argv) <= 1 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	if sys.argv[1] == '-t':
		truncate = True
		del sys.argv[1]

	padding = sys.argv[1]
	length = int(sys.argv[2])

	if len(sys.argv) == 4:
		filename = sys.argv[3]

	target = open_file(filename) # 入力ファイルを開く

	firstline=True

	for line in target: # 入力ファイルを読む
		line = preproc_line(line)
		fields = line.split()

		for column in range(len(fields), length):
			fields.append(padding)

		if truncate:
			fields = fields[0:length]

		print(' '.join(fields))

	target.close() # 入力ファイルを閉じる

	# 終了
	sys.exit(0)
