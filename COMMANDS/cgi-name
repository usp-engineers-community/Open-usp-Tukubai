#!/usr/bin/env python
#coding: utf-8
#
# cgi-name ＰＯＳＴメソッドによる変数と値を name 形式に変換する（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
# 
# The MIT License
# 
# Copyright (C) 2022 Universal Shell Programming Laboratory
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "cgi-name [-d<c>] [-i<string>] <param_file>"
_option = "         [--template <html>]"
_version = "Oct 20 17:32:09 JST 2022"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4+/UTF-8)"

import re
import os
import sys
import base64

def error(msg, *arg):
	print('Error[cgi-name] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Option  :", _option, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(n, quiet = False):
	if type(n) == type(0):	# ファイルがコマンドパラメータの位置で指定されているなら
		if n >= len(sys.argv):	# ファイル名省略時
			n = '-'	# sys.stdinを仮定する
		else:
			n = sys.argv[n]	# 指定位置のコマンドパラメータをとる
	if n == '-':	# '-'が指定されているとき
		n = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():
		mode='r'
	else:
		mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	# 標準入力も含めてopen()で開く
	try:
		file = open(n, mode)
	except:
		if not quiet:
			error("ファイル '%s' をオープンできません。", n)
		else:
			sys.exit(1)
	return file

# 不要な空白の削除関数
def rm_sp(line):
	return re.sub(r' {2,}',' ',re.sub(r'^ +| +$','',line))	# 行頭と行末の空白を削除し連続空白を単空白にする

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	line=rm_sp(line)	# 行頭と行末の空白を削除し連続空白を単空白にする
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

#
# タグのエンドサーチ
#
def find_tag(str):
	if '/>' in str:
		l = str.index('/>') + 2
		s = str[:l]
		if re.search(r'\btype="(radio|checkbox)"', s):
			return l
	return None

#
# name の取り出し
#
def get_name(str):
	r = re.search('name="([^"]*)"', str)
	return r and r.group(1)

#
# <html> から name リストの取り出し
#
def template(fname):
	global firstline
	file = open_file(fname)
	firstline=True
	str = file.read()	# 全行を改行記号付きで読み出す
	str = rm_BOM(str)	# BOMがあれば削除する
	name = []
	while '<input' in str:
		str = str[str.index('<input') + 6:]
		l = find_tag(str)
		if l:
			nm = get_name(str[:l])
			if nm:
				name += [ nm ]
			str = str[l:]
	return name

#
# name リストから変数を削除する
#
def del_name(name, n):
	n = re.sub(r'_\d+$', '', n)
	d = []
	for (i, x) in enumerate(name):
		if re.sub(r'_%\d+$', '', x) == n:
			d += [ i ]
	d.reverse()
	for i in d:
		del name[i]

#
# 直接入力文字列の前処理
#
#  Python3においてコマンドラインからの直接入力文字列中にUnicode符号位置がU+FFFFを超えるコードがあると
#  Unicode文字に正しく変換されない場合があることへの対処をする
def utf2ucs(instr):
	outstr=""	# 出力文字列
	intlist=[]	# 作業用整数リスト
	for char in instr:
		if ord(char)>=0xdc00 and ord(char)<=0xdcff:	# 文字の符号位置がU+DCxxの範囲にあったら「UTF8もどき」
			intlist.append(ord(char)-0xdc00)	# 0xdc00のげたをはずして整数リストに入れる
		else:	# 通常文字がきたら
			if len(intlist)>0:	# ここまでに「UTF8もどき」列を変換した整数リストがあったら
				# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
				outstr+= bytes(intlist).decode("utf_8")
				intlist=[]	# 整数リストを再初期化
			outstr+=char	# 新しくきた通常文字を出力文字列に追加
	# 「UTF8もどき」列を変換した整数リストが残っていたら
	# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
	if len(intlist)>0:	outstr+= bytes(intlist).decode("utf_8")
	return outstr

#
# メイン関数
#
if __name__ == '__main__':
	if len(sys.argv) == 1:
		sys.argv.append("/dev/fd/0")

	# 構文表示
	if len(sys.argv) < 2: usage()
	elif len(sys.argv) == 2:
		if sys.argv[1] == '--help' or \
		   sys.argv[1] == '--version':	usage()

	#
	# オプション解析
	#
	ltmpl = len('--template')
	name, null, blank = [], '', ' '
	while len(sys.argv) > 1:
		if len(sys.argv[1]) < 2 or sys.argv[1][0] != '-':
			break;
		if sys.argv[1][:ltmpl] == '--template':
			if sys.argv[1][ltmpl:] and sys.argv[1][ltmpl] == '=':	# --template=<html>の場合
				name += template(sys.argv[1][ltmpl + 1:])	# <html>を取得
			elif len(sys.argv) > 2:	#  --template <html>の場合
				name += template(sys.argv[2])	# 次の引数を<html>として取得
				del sys.argv[2]
			else:
				error("--template オプションの引数がありません。")
		elif sys.argv[1][1] == 'i':
			if sys.argv[1][2:]:	# -iの後に文字があれば
				null = sys.argv[1][2:]	# -i<string>として<string>を取得
			elif len(sys.argv) <= 2:
				error("-i オプションの引数がありません。")
			else:	# -iの後が空白文字なら
				null = sys.argv[2]	# -i <string>として<string>を取得
				del(sys.argv[2])
		elif sys.argv[1][1] == 'd':	# 半角空白置換の指定
			blank = sys.argv[1][2:]
			if Python3():	# Python3なら
				blank=utf2ucs(blank)	# 直接入力文字列の前処理をする
		else:
			c = sys.argv[1][1]
			if c < '\x21' or c > '\x7e':
				c = hex(ord(c))
			print("不明なオプション文字です: %s" % c, file=sys.stderr)
			usage()
		del(sys.argv[1])

	#
	# 入力の解析
	#
	file=open_file(1, True)
	firstline=True
	line=file.readline()
	# 主入力ファイルに複数の行があったか検査する
	if file.readline():	# 次の行があったとき
		error("主入力ファイルに複数の行があります。")
	line=preproc_line(line)
	for token in re.split(r'&+', line):	# 主入力先頭行を&で分割する
		r = re.match(r'([^=]+)=(.*)', token)	# name=valueの対を検出する
		if r:
			print(r.group(1), end='')	# nameを出力する
			del_name(name, r.group(1))	# nameリストから今のnameを削除する
			d = r.group(2)
			d = re.sub(r'\+', ' ', d)	# 記号「+」は空白に変換する
			d = re.sub(r'%0D%0A', r'\\n', d)	# 改行(%0D%0A)は文字列'\n'に変換する
			# Base64による文字16進表記を文字へ変換する
			if Python3():	# Python3なら
				d=re.sub(r'(%([0-9A-F]{2}))+', lambda x: str(base64.b16decode(re.sub(r'%', '', x.group(0))),"utf8","replace"),d)
			else:
				d = re.sub(r'%([0-9A-F]{2})', lambda x: chr(int(x.group(1), 16)), d)
			d = re.sub(r' ', blank, d)
			d = d or null
			if d:
				print(" "+d)
			else:
				print()

	#
	# 出力されなかった name を出力
	#

	name=sorted(set(name),key=name.index)	# 集合化によってリストの重複を解消し元のリストにおける出現位置をキーとしてsort

	for n in name:
		print(re.sub(r'_%\d+$', '', n), end='')
		if null:
			print(" "+null)
		else:
			print()

	sys.exit(0)
