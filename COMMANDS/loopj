#!/usr/bin/env python
#coding: utf-8
#
# loopj loop of join3（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
#
# The MIT License
#
# Copyright (C) 2020 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "loopj [-d<string>] num=<num> <file1> <file2> .."
_version = "Sat Jun 20 21:57:20 JST 2020"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'(\d+)(([/@](\d+))*)$'
		# 1: 1st field
		# 2: 2nd and later fields with separator

import re
import os
import sys
from getopt import getopt

def error(msg, *arg):
	print('Error[loopj] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

class FieldLine:
	def __init__(self, line, allow_z = False):
		self.__allow_zero = allow_z
		self.__fields = [ line ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getFieldNum(self, key):
		if type(key) == type(0):
			return key
		if re.match(r'\d+$', key):
			key = int(key)
		elif key == 'NF':
			key = self.size()
		else:
			key = self.size() - int(key[3:])
			if key <= 0:
				error("NF-x の x が大きすぎます。")
		if key < 0:
			error("フィールド番号が負です。")
		if key == 0 and not self.__allow_zero:
			error("フィールド番号が０です。")
		if key > self.size():
			error("フィールド番号が大きすぎます。")
		return key

	def getField(self, s, e = None):
		s = self.getFieldNum(s)
		if e == None:
			e = s
		else:
			e = self.getFieldNum(e)
		if s <= e:
			return ' '.join(self.__fields[s : e + 1])
		else:
			t = self.__fields[e : s + 1]
			t.reverse()
			return ' '.join(t)

	def getHead(self, n):
		pat = '( *([^ ]+ +){%d}[^ ]+)' % (n - 2)
		r = re.match(pat, self.__fields[0])
		return r.group(1)

	def getTail(self, n):
		pat = ' *([^ ]+ +){%d}[^ ]+ ?(.*)' % (n - 1)
		r = re.match(pat, self.__fields[0])
		return r.group(2)

#
# 入力ファイルオープン
#
def open_file(fname):
	if fname == '-':
		file = sys.stdin
	else:
		try:
			file = open(fname, 'r')
		except:
			error("ファイル %s をオープンできません。", fname)
	return file

#
# 入力ファイルオープン
#
def open_file(n):
	if type(n) == type(0):
		if n >= len(sys.argv):	n = '-'
		else:	n = sys.argv[n]
	if n == '-':	n = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():	mode='r'
	else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(n, mode)
	except:
		if n=='/dev/fd/0': n="-"
		error("ファイル '%s' をオープンできません。", n)
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

#
# num= の解析
#
def getnum(arg):
	# numパラメータは数値をひとつのみ指定する
	numstr=arg[4:]
	if numstr=='' :error("num 引数がありません。")
	try:
		num=int(numstr)	# num=のうしろをとって整数化する
	except:
		error("num 引数が整数ではありません。")
	if num<1: error("num 引数が1未満です。")
	key=list(range(1,num+1))	# 整数からリスト化する
	return key

#
# ダミー文字列の生成
#
def make_dummy(line, num, dstr):
	return ' '.join([ dstr ] * (line.size() - num))

#
# キー文字列の抽出
#
def keystr(line, key):
	return ' '.join(map(line.getField, key))

#
# 最小キーの抽出
#
def minkey(key):
	k = [ k for k in key if k ]
	if k:
		return min(k)
	else:
		return None

#
# 直接入力文字列の前処理
#
#  Python3においてコマンドラインからの直接入力文字列中にUnicode符号位置がU+FFFFを超えるコードがあると
#  Unicode文字に正しく変換されない場合があることへの対処をする
def utf2ucs(instr):
	outstr=""	# 出力文字列
	intlist=[]	# 作業用整数リスト
	for char in instr:
		if ord(char)>=0xdc00 and ord(char)<=0xdcff:	# 文字の符号位置がU+DCxxの範囲にあったら「UTF8もどき」
			intlist.append(ord(char)-0xdc00)	# 0xdc00のげたをはずして整数リストに入れる
		else:	# 通常文字がきたら
			if len(intlist)>0:	# ここまでに「UTF8もどき」列を変換した整数リストがあったら
				# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
				outstr+= bytes(intlist).decode("utf_8")
				intlist=[]	# 整数リストを再初期化
			outstr+=char	# 新しくきた通常文字を出力文字列に追加
	# 「UTF8もどき」列を変換した整数リストが残っていたら
	# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
	if len(intlist)>0:	outstr+= bytes(intlist).decode("utf_8")
	return outstr

#
# メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) < 3 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	#
	# -d<string>
	#
	try:
		opts = getopt(sys.argv[1:], "d:")
		if opts[0]:
			dstr = opts[0][-1][1]
		else:
			dstr = '0'
		if len(opts[1]) < 2:
			usage()
	except:
		usage()

	if dstr != '0' and Python3():
		dstr=utf2ucs(dstr)	# Python3のときは直接入力文字列の前処理をする

	#
	# num=<num>
	#
	if opts[1][0][:4] != 'num=':
		usage()
	key = getnum(opts[1][0])

	#
	# １行入力
	#
	file, line, kstr, dummy = [], [], [], []
	for arg in opts[1][1:]:
		file += [ open_file(arg) ]
		l = file[-1].readline()
		if not l:
			error("ファイル '%s' が空です。", arg)
		firstline = True
		l=preproc_line(l)	# 入力行の前処理
		line += [ FieldLine(l) ]
		if line[-1].size() == 0:
			error("ファイル '%s' にフィールドがありません。")
		kstr += [ keystr(line[-1], key) ]
		#
		# ダミー文字列の生成
		#
		dummy += [ make_dummy(line[-1], max(key), dstr) ]

	#
	# メインループ
	#
	eof = 0;
	while eof < len(file):
		k = minkey(kstr)
		print(k, end='')
		endchar=''
		for i in range(len(file)):	# 指定fileの数だけloop
			if i==len(file)-1:
				endchar=''	# 最終fileのとき
			if kstr[i] == k:	# keyが一致するとき
				tail = line[i].getTail(max(key))
				if tail:	# 最終キー超のフィールドがあれば
					print(' '+tail, end=endchar)	# 区切り空白を先行させる
				l = file[i].readline()
				if l:
					l=preproc_line(l)	# 入力行の前処理
					line[i] = FieldLine(l)
					kstr[i] = keystr(line[i], key)
				else:	# i番目のfileはEOFに達した
					kstr[i] = None
					eof += 1	# 処理ずみのfile数をcountup
			else:	# keyが一致しないとき
				if dummy[i]!='':	# dummy文字列があるときに限り（endchar付きで）出力する
					print(' '+dummy[i], end=endchar)	# 区切り空白を先行させる
		print()	# 最後のfile処理後に改行する
