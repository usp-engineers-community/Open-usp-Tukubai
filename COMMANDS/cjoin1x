#!/usr/bin/env python
#coding: utf-8
#
# cjoin1x : キーの値が同じレコードが複数存在するファイル同士を連結（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
#
# The MIT License
#
# Copyright (C) 2019 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import re
import sys
import os

_usage = "cjoin1x [+ng[<fd>]] key=<n> <master> [<tran>]"
_version = "Thu Jun 20 18:01:27 JST 2019"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?)(@((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?))*$'

def error(msg, *arg):
	print('Error[cjoin1x] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)
#
# ファイルオープン
#
def open_file(filename, mode = 'r'):
	if mode=="w":	# 出力ファイルのとき
		filename = '/dev/fd/'+filename	# ファイル名を整数化してファイルディスクリプタにする
	else:
		if filename == '-':	filename = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
		if Python3():	mode='r'
		else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(filename, mode)
	except:
		if filename=='/dev/fd/0':
			error("標準入力ファイルをオープンできません。")
		else:
			error("ファイル '%s' をオープンできません。", filename)
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

# （NFを含むかもしれない）フィールド要素を整数に変換する
def intwithNF(str,NF):
	# フィールド要素にNFを含むとき
	if str=="NF":
		return NF
	elif str.startswith("NF-"):
		str=str[3:]
		fieldnum=NF-int(str)
	# NFを含まないとき
	else:
		fieldnum=int(str)
	if fieldnum<=0:
		error("キー指定が0または負数です")
	if fieldnum>NF:
		error("フィールド指定がレコードのフィールド数を超えています")
	return fieldnum

# フィールド指定文字列からフィールドリストを作る（NFは確定している）
def GetKeyList(key,NF):
	k = re.match(_keypat,key)	# 構文検査のために実行する
	if not k:
		error("フィールド指定が不正です,")
	AtMarkList=key.split("@")	# @で分割
	keylist=[]
	for field in AtMarkList:
		if "/" in field:	# 範囲
			startend=field.split("/")
			start=intwithNF(startend[0],NF)
			end=intwithNF(startend[1],NF)
			if start <= end:	# 昇順のとき
				keylist+=range(start,end+1)
			else:	# 降順のとき
				keylist+=range(start,end-1,-1)
		else:	# 列挙
			keylist+=[intwithNF(field,NF)]
	# キーリストの重複解消
	keylist=sorted(set(keylist),key=keylist.index)	# 集合化によってリストの重複を解消し元のリストにおける出現位置をキーとしてsort
	return keylist

# tranのキーリストからmasterのキーリストを得る
def GetMasterKeyList(keylist):
	masterkeylist=[]
	delta=min(keylist)-1
	for i in range(len(keylist)):
		masterkeylist.append(keylist[i]-delta)
	return masterkeylist

# キーフィールド番号リストをもとにレコードからキーフィールド値リスト（連結文字列）をとりだす
def GetKeyFieldValues(line,keylist,Separator):
	keyvalues=""
	for i in keylist:
		keyvalues+=line[i-1]+Separator	# フィールド区切りを付ける
	return keyvalues.rstrip()

# 非キーフィールドのリストを作成
def GetNonKeyFields(keyfieldlist,keyfieldvalues,maxkeyfieldpos):
	list=[]
	for i in range(1,maxmasterkeypos+1):
		if not i in keyfieldlist:
			list.append(keyfieldvalues[i-1])
	return list

# main

if __name__ == '__main__':

	master,tran,ng,key,nf = "", "-", False, None, False	# default値

	# コマンドの説明表示
	if len(sys.argv) <= 1 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	# パラメータ解析
	numparam=0
	minparam=1
	maxparam=3
	while len(sys.argv) > 1:
		if sys.argv[1].startswith("+ng"):	# +ngパラメータ
			if ng:
				error("+ngパラメータが重複しています")
			ng=True
			ngnum=sys.argv[1][3:]
		elif sys.argv[1].startswith("key="):	# keyパラメータ
			if key:
				error("keyパラメータが重複しています")
			key=sys.argv[1][4:]
		else:
			numparam+=1
			if numparam==1:	# master
				master=sys.argv[1]
			elif numparam==2:	# tran
				tran=sys.argv[1]
		del(sys.argv[1])	# popup

	# パラメータ検査
	if numparam<minparam:
		error("パラメータの数が足りません")
	if numparam>maxparam:
		error("パラメータの数が多すぎます")
	if ng:	# +ngオプションがあるとき
		if ngnum=="":
			ngnum="2"	# defaultは標準エラー出力
		try:
			ngout=int(ngnum)
		except:
			error("不正な+ng指定です")
		if ngout<2:
			error("不正な+ng指定です")
	# <master>と<tran>の名前検査
	if master==tran:
		error("<master>と<tran>が同じです")

	# masterファイルを開く
	masterfile=open_file(master)
	# tranファイルを開く
	tranfile=open_file(tran)
	# ngファイルを開く
	if ng: ngfile=open_file(ngnum,"w")	# ngnumは数字

	Separator=" "
	masterfilelines=[]
	firstline=True
	# masterファイルをすべて読み込む
	numfields=-1
	for line in masterfile:
		line=preproc_line(line)
		fields=line.split()
		if not len(fields)==numfields and not numfields<0:
			error("masterファイルのフィールド数が一定ではありません")
		numfields=len(fields)
		masterfilelines.append(fields)	# 全フィールドを記憶する
	if len(masterfilelines)==0:
		error("masterファイルが空です")

	linecount=0
	firstline=True
	for line in tranfile:	# tranファイルを読む
		line=preproc_line(line)
		tranfields=line.split()
		# tranの最初のレコードでtranの最終フィールド位置を確認しキーリストを確定する
		if linecount==0:
			NF=len(tranfields)
			# key指定の文字列からtranのキーリストへ変換
			keylist=GetKeyList(key,NF)
			# masterのキーリストを作成
			masterkeylist=GetMasterKeyList(keylist)
			# masterとtranの最大キー位置を求める
			maxmasterkeypos=max(masterkeylist)
			maxtrankeypos=max(keylist)
		if not len(tranfields)==NF and linecount>1:
			error("tranファイルのフィールド数が一定ではありません")
		trankeyfieldvalues=GetKeyFieldValues(tranfields,keylist,Separator)
		hitcount=0
		for masterfields in masterfilelines:	# masterの行（フィールドリスト）を見る
			masterkeyfieldvalues=GetKeyFieldValues(masterfields,masterkeylist,Separator)
			# tranのキーとmasterのキーが一致したら
			if trankeyfieldvalues==masterkeyfieldvalues:
				hitcount+=1
				# tranの最大キー位置まで出力
				outputline=Separator.join(tranfields[0:maxtrankeypos])+Separator	# フィールドを空白区切りで出力する
				# masterの最大キー位置の前の非キーフィールドを出力
				# （出力しない場合は次の3行を抑止する）
				masternonkeyfieldvalues=GetNonKeyFields(masterkeylist,masterfields,maxmasterkeypos)
				if len(masternonkeyfieldvalues)>0:
					outputline+=Separator.join(masternonkeyfieldvalues[0:len(masternonkeyfieldvalues)])+Separator
				# masterの最大キー位置の後のフィールドを出力
				outputline+=Separator.join(masterfields[maxmasterkeypos:len(masterfields)])+Separator
				# tranの最大キー位置の後のフィールドを出力
				outputline+=Separator.join(tranfields[maxtrankeypos:len(tranfields)])
				print(outputline)
			# 一致しなかったら
			else:
				if masterkeyfieldvalues>trankeyfieldvalues:
					break	# masterはソートされているので
		# tranのこの行がmasterのどの行ともキーが一致しなかったら
		if hitcount==0 and ng: 
			# ng指定があれば出力ファイルへtranの行を出力
			print(Separator.join(tranfields[0:len(tranfields)]),file=ngfile)
		linecount+=1

	# masterファイルを閉じる
	masterfile.close()
	# tranファイルを閉じる
	tranfile.close()

	# 終了
	sys.exit(0)
