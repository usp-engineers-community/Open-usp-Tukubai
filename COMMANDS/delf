#!/usr/bin/env python
#coding: utf-8
# 
# delf デリートフィールド（Open usp Tukubai版）
#
# designed by Nobuaki Tounaka
# written  by Matasomo Togashi
#
# The MIT License
#
# Copyright (C) 2023 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "delf <f1> <f2> ... [file]"
_version = "Thu Sep 22 17:23:30 JST 2023"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?)(@((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?))*$'
_keypatNF=r'(?P<m0>(?P<m01>\d+)|(?P<m02>NF(?P<m03>-\d+)?))(/(?P<m1>(?P<m11>\d+)|(?P<m12>NF(?P<m13>-\d+)?)))?$'

import re
import os
import sys

#
# 入力ファイルオープン
#
def open_file(n, mode = 'r'):
	filename = sys.argv[n]	# 指定位置のコマンドパラメータをとる
	if filename == '-':	# sys.stdinのとき
		filename = '/dev/fd/0'	# ファイルディスクリプターで表記する
	if not Python3():
		mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	# 標準入力も含めてopen()で開く
	try:
		file = open(filename, mode)
		del sys.argv[n]
	except:
		if filename != '/dev/fd/0':
			file = open('/dev/fd/0', mode)	# 通常ファイルのopen()で失敗したらsys.stdinを開く
	return file

# NF相対欄位置からNF（欄数）に応じた0発進の欄位置に変換する
def getpos(base_pos):
	# NF相対欄位置からの変換:
	#  nのときはそのまま
	#  0のときはNF（欄数）
	#  -nのときはNF-n
	# 0発進とするために-1を加える
	if base_pos > 0:
		pos=base_pos-1
		if pos >= NF:	error("フィールド番号が大きすぎます。 %s",str(base_pos))
		return False,pos	# 元からの絶対欄位置
	else:
		pos=NF+base_pos-1
		if pos < 0:	error("フィールド指定でNF-x の x が大きすぎます。 %s","NF-"+str(-base_pos))
		return True,pos	# NF相対欄位置からの絶対化欄位置

# NF相対欄位置リスト（rel_keylist）からNF（欄数）に応じた実際の欄位置リスト（keylist）を作成する
def make_keylist(rel_keylist,abs_rel_mixed_range):
	# NF相対欄位置リスト（rel_keylist）とは「NFやNF-xのNF相対欄位置指定を含む欄位置リスト」を意味しリストには絶対欄位置も含む
	# rel_keylistの要素には区間をあらわす整数tupleの(start,end)と、単一欄をあらわす整数がある
	# rel_keylistを構成するそれぞれの整数は絶対欄位置指定とNF相対欄位置指定の両方がありうる
	if rel_keylist==[None]:	# 全欄指定
		error("key位置として0を指定することはできません。")
	rel_list=[]	# key指定順に並べたNF相対からの絶対化欄位置リスト
	abs_list=[]	# key指定順に並べた絶対欄位置リスト
	abs_rel_cross=False
	range_list=[]
	for fieldpos in rel_keylist:
		if type(fieldpos)==int:	# 単一欄
			rel,pos=getpos(fieldpos)
			if rel:
				rel_list.append(pos)
			else:
				abs_list.append(pos)
		else:	# (a/b)の区間指定
			rel1,start=getpos(fieldpos[0])
			rel2,end=getpos(fieldpos[1])
			if start <= end:	# 正順
				range_list=range(start,end+1)
			else:	# 逆順
				range_list=range(start,end-1,-1)
			if rel1 or rel2:	# 区間の端にNF相対襴位置指定があった
				rel_list+=range_list	# 片端のみがNF相対襴位置指定のときも便宜的にrel_listに加える
			else:
				abs_list+=range_list
	if abs_rel_mixed_range:	pass	# 絶対欄位置指定とNF相対欄位置指定による区間指定があるときは交叉検査をしない
	elif len(abs_list)*len(rel_list)==0:	pass	# 絶対欄位置指定群/NF相対欄位置指定群いずれかがないときは交叉検査をしない
	else:	# 両群ともに存在するときは交叉検査をする
		min_abs=min(abs_list)
		max_abs=max(abs_list)
		min_rel=min(rel_list)
		max_rel=max(rel_list)
		if max_abs < min_rel or max_rel < min_abs:	pass	# 両群が交叉しない
		else:	# 両群が交叉する
			abs_rel_cross=True
	# 返値のリストを整理する
	abs_and_rellist=abs_list+rel_list
	# 重複を解消しkey指定の順序はabs_list→rel_listの順としabs_list内とrel_list内の順序もそれぞれ保つ
	return_list=sorted(set(abs_and_rellist),key=abs_and_rellist.index)
	return return_list,abs_rel_cross	# 欄位置は0発進 集合化によってリストの重複を解消しkey指定の順序は保つ

# 欄番号文字列をNF相対形式で整数化する
def getFieldNum(str,str1,str2):
	# n または NF または NF-x の形式の欄番号をNF相対形式の整数で確定する
	# 正規表現で「\d+|NF(-\d+)?」にmatchする全体をstrが、「\d+」でmatchする部分をstr1が、「(-\d+)?」でmatchする部分をstr2が保持している
	# NF相対形式の整数化:
	#  nのときは整数のnに
	#  NFのときは整数の0に
	#  NF-nのときは整数の-nに
	# 実際の欄番号にする際には行ごとに得たNF（欄数）を使用して計算する
	if str1:	# n
		fieldnum=int(str1)
		if fieldnum==0:
			error("フィールド指定に0があります。")
	else:	# NF-n または NF
		if str2:	# NF-n
			fieldnum=int(str2)
		else:	# NF
			fieldnum=0
	return fieldnum

#
# ひとつの欄指定パラメータから欄番号リストを得る（区間指定にも対応する）
#
def getFieldList(field_param):
	mobj = re.match(_keypat,field_param)	# 構文検査のために実行する
	if not mobj:	# フィールド指定の形式が不正
		error("フィールド指定の形式が不正です。 %s",field_param)
	field_param=field_param.replace("NF-0","NF")	# NF-0はNFと書き替える
	fieldlist=[]
	abs_rel_mixed_range=False
	concatlist=field_param.split("@")	# @で分割する
	for fieldnum in concatlist:
		mobj = re.match(_keypatNF,fieldnum)
		start=getFieldNum(fieldnum,mobj.group('m01'),mobj.group('m03'))	# 前端部を得る
		if mobj.group('m1'):	# a/bの形式で区間指定をしている
			end=getFieldNum(fieldnum,mobj.group('m11'),mobj.group('m13'))	# 後端部を得る
			fieldlist.append((start,end))	# 区間で確定
			# 絶対欄位置指定とNF相対欄位置指定が混在するときはmarkする
			if (start>0 and end <=0) or (start<=0 and end >0):
				abs_rel_mixed_range=True
		else:
			fieldlist.append(start)	# 前端部単独で確定
	return fieldlist,abs_rel_mixed_range

#
#	コマンドのフィールド指定パラメータリストから処理対象のNF相対欄位置リストを作成する
#
def getTargetFields(args):
	if args==[]:
		error("key指定がありません。")
	abs_rel_mixed_range=False
	fieldlist = []
	for e in args:
		# getFieldList()は(fieldのlist,abs_rel_mixed_range)を返す
		fieldlist+=getFieldList(e)[0]
		if getFieldList(e)[1]==True:	abs_rel_mixed_range=True
	# 集合化によってリストの重複を解消する（絶対欄位置/NF相対欄位置それぞれに重複解消される）
	fieldlist=sorted(set(fieldlist), key=fieldlist.index)	# 元のリスト（set）における出現順を維持する
	return fieldlist,abs_rel_mixed_range

#
# 行の欄数検査
#   先頭行ではkeyの区間指定で絶対欄位置指定とNF相対欄位置指定が混在しているか検査する
#   先頭行以外では
#     絶対欄位置リストとNF相対欄位置絶対化リスト（区間の端がNF相対襴位置だったものも含む）の間に重複があるか検査する
#
def check_num_fields_variation(fields):
	global	NF,key_list,abs_rel_cross_first,abs_rel_cross,abs_rel_mixed_range
	# abs_rel_cross キーの絶対欄位置によるリストとNF相対欄位置からの絶対化欄位置リストの間に重複があればTrue
	#               NF=5のときにキー指定が「1/4@NF-3/NF」となっているときなどにTrueとなる
	# abs_rel_cross_first=False 先頭行においてabs_rel_crossがTrueであればTrue

	start=False
	nf=len(fields)
	if NF==-1:	start=True
	if nf != NF:	# 欄数が変化したかまたは先頭行なら
		NF=nf	# NFを更新
		# 行の欄数NFを見てNF相対欄位置リストから(絶対)欄位置リストを決定する
		key_list,abs_rel_cross=make_keylist(rel_keylist,abs_rel_mixed_range)
		if start:	# 先頭行なら
			if abs_rel_cross:	abs_rel_cross_first=True	# 先頭行において区間指定でabs_rel混在だったらmarkしておく
			else:	abs_rel_cross_first=False
		else:	# 先頭行以外で欄数変化があったら
			if abs_rel_mixed_range:	# 区間指定においてabs_rel混在だったら
				error("keyの区間指定において絶対欄位置指定とNF相対欄位置指定が混在している状態でフィールド数が変化しました。")
			if abs_rel_cross_first or abs_rel_cross:	# （区間指定においてabs_rel非混在で）絶対欄位置指定とNF相対欄位置指定に交叉が生じたら
				error("フィールド数変化に際してkeyの絶対欄位置指定とNF相対欄位置指定に交叉がありました。")

# 不要な空白の削除関数
def rm_sp(line):
	return re.sub(r' {2,}',' ',re.sub(r'^ +| +$','',line))	# 行頭と行末の空白を削除し連続空白を単空白にする

def error(msg, *arg):
	print('Error[delf] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage    :", _usage, file=sys.stderr)
	print("Version  :", _version, file=sys.stderr)
	print("          ", _code, file=sys.stderr)
	sys.exit(1)

#
# 直接入力文字列の前処理
#
#  Python3においてコマンドラインからの直接入力文字列中にUnicode符号位置がU+FFFFを超えるコードがあると
#  Unicode文字に正しく変換されない場合があることへの対処をする
def utf2ucs(instr):
	outstr=""	# 出力文字列
	intlist=[]	# 作業用整数リスト
	for char in instr:
		if ord(char)>=0xdc00 and ord(char)<=0xdcff:	# 文字の符号位置がU+DCxxの範囲にあったら「UTF8もどき」
			intlist.append(ord(char)-0xdc00)	# 0xdc00のげたをはずして整数リストに入れる
		else:	# 通常文字がきたら
			if len(intlist)>0:	# ここまでに「UTF8もどき」列を変換した整数リストがあったら
				# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
				outstr+= bytes(intlist).decode("utf_8")
				intlist=[]	# 整数リストを再初期化
			outstr+=char	# 新しくきた通常文字を出力文字列に追加
	# 「UTF8もどき」列を変換した整数リストが残っていたら
	# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
	if len(intlist)>0:	outstr+= bytes(intlist).decode("utf_8")
	return outstr

# 不要な空白の削除関数
def rm_sp(line):
	return re.sub(r' {2,}',' ',re.sub(r'^ +| +$','',line))	# 行頭と行末の空白を削除し連続空白を単空白にする

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	line=rm_sp(line)	# 行頭と行末の空白を削除し連続空白を単空白にする
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

###########################################
# メイン関数
###########################################
if __name__ == '__main__':

	global NF,key_list,abs_rel_cross_first,abs_rel_cross

	if len(sys.argv) < 2 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	direct=False

	# -dオプションを検出する
	argc=len(sys.argv)
	for i in range(1, argc):
		if sys.argv[i]=='-d':	# -dオプション
			if len(sys.argv) < 4:	error("フィールドまたは文字列の指定がありません。")	# パラメータが足りない
			direct=True
			del sys.argv[i]
			break
	if direct:	# -dオプションなら入力文字列を得る
		line=sys.argv[-1]	# パラメータ最後尾を入力文字列とする
		sys.argv.pop()	# 入力文字列以外に少なくともひとつのフィールド指定が残る
	else:	# -dオプションでなければファイル名を得る
		# パラメータ最後尾（sys.argv[-1]）をファイル名としてそれが存在すれば開き
		# 存在しなければ標準入力（stdin）を開く
		file = open_file(-1)	# ファイル名によるopenに成功すればパラメータ最後尾は削除される
		if len(sys.argv) < 2:	error("フィールドの指定がありません。")	# パラメータが残っていない

	# フィールド指定パラメータからNF相対欄位置リストを作成する
	base_keylist = getTargetFields(sys.argv[1:])	# sys.argvに残っているのはコマンド名とフィールド指定のみ

	# フィールド指定パラメータからNF相対欄位置リストを作成する
	# rel_keylist:	NF相対欄位置リスト
	# abs_rel_mixed_range:	（1/NFなど）キーの区間指定において絶対欄位置指定とNF相対欄位置指定が混在していればTrue
	rel_keylist,abs_rel_mixed_range = getTargetFields(sys.argv[1:])	# sys.argvに残っているのはコマンド名とフィールド指定のみ


	if direct:	# -dオプションによる直接処理
		if Python3():
			line = utf2ucs(line)	# Python3では直接指定の文字列に対して前処理をする
		line=rm_sp(line)	# 行頭と行末の空白を削除し連続空白を単空白にする
		fields = line.split(" ")
		NF=len(fields)
		# 行の欄数NFを見てNF相対欄位置リストから(絶対)欄位置リストを決定する
		key_list,abs_rel_cross=make_keylist(rel_keylist,abs_rel_mixed_range)
		fields = [ fields[i] for i in range(0,NF) if i not in key_list ]
		print(" ".join(fields))
		exit(0)

	# 先頭行処理用flagの初期化
	firstline=True
	NF=-1

	for line in file:
		line=preproc_line(line)
		fields = line.split(" ")
		check_num_fields_variation(fields)	# 先頭行または欄数変化のあるときはkey指定の検査をする
		fields = [ fields[i] for i in range(0,NF) if i not in key_list ]
		print(" ".join(fields))

	sys.exit(0)
