#!/usr/bin/env python
#coding: utf-8
#
# up3 ラストマージツール（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
#
# The MIT License
#
# Copyright (C) 2022 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "up3 key=<key> <master_file> [<tran_file>]"
_version = "Mon Oct 21 02:12:05 JST 2022"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?)(@((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?))*$'
_keypatNF=r'(?P<m0>(?P<m01>\d+)|(?P<m02>NF(?P<m03>-\d+)?))(/(?P<m1>(?P<m11>\d+)|(?P<m12>NF(?P<m13>-\d+)?)))?$'

import re
import os
import sys
import unicodedata

# 濁音と半濁音のNFD表記でNFC表記もできるもの→NFDtoNFC変換でNFCに統一する
_comb_pat=r"(((う|か|き|く|け|こ|さ|し|す|せ|そ|た|ち|つ|て|と|は|ひ|ふ|へ|ほ|ウ|カ|キ|ク|ケ|コ|サ|シ|ス|セ|ソ|タ|チ|ツ|テ|ト|ハ|ヒ|フ|ヘ|ホ|ワ|ヰ|ヱ|ヲ)゙)|((は|ひ|ふ|へ|ほ|ハ|ヒ|フ|ヘ|ホ)゚))+"

def error(msg, *arg):
	print('Error[up3] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(n):
	if n >= len(sys.argv):	filename = '-'
	else:
		filename = sys.argv[n]
	if filename == '-':	filename = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():	mode='r'
	else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(filename, mode)
	except:
		if filename=='/dev/fd/0':
			error("標準入力ファイルをオープンできません。")
		else:
			error("ファイル '%s' をオープンできません。", filename)
	return file

# NF相対欄位置からNF（欄数）に応じた0発進の欄位置に変換する
def getpos(base_pos,NF):
	# NF相対欄位置からの変換:
	#  nのときはそのまま
	#  0のときはNF（欄数）
	#  -nのときはNF-n
	# 0発信とするために-1を加える
	if base_pos > 0:
		pos=base_pos-1
		if pos >= NF:	error("フィールド番号が大きすぎます。 %s",str(base_pos))
	else:
		pos=NF+base_pos-1
		if pos < 0:	error("フィールド指定でNF-x の x が大きすぎます。 %s","NF-"+str(-base_pos))
	return pos

# NF相対欄位置リスト（rel_keylist）からNF（欄数）に応じた実際の欄位置リスト（keylist）を作成する
def make_keylist(rel_keylist,abs_rel_mixed_range,NF):
	# NF相対欄位置リスト（rel_keylist）とは「NFやNF-xのNF相対欄位置指定を含む欄位置リスト」を意味しリストには絶対欄位置も含む
	# rel_keylistの要素には区間をあらわす整数tupleの(start,end)と、単一欄をあらわす整数がある
	# rel_keylistを構成するそれぞれの整数は絶対欄位置指定とNF相対欄位置指定の両方がありうる
	if rel_keylist==[None]:	# 全欄指定
		return list(range(0,NF)),[],False
	return_list=[]	# key指定順に並べた絶対欄位置化リスト
	abs_rel_cross=False
	range_list=[]
	for fieldpos in rel_keylist:
		if type(fieldpos)==int:	# 単一欄
			pos=getpos(fieldpos,NF)
			return_list.append(pos)
		else:	# (a/b)の区間指定
			start=getpos(fieldpos[0],NF)
			end=getpos(fieldpos[1],NF)
			if start <= end:	# 正順
				range_list=range(start,end+1)
			else:	# 逆順
				range_list=range(start,end-1,-1)
			return_list+=range_list
	# 返値のリストを整理する
	return_list_original=return_list
	return_list=sorted(set(return_list),key=return_list.index)	# 重複を解消しkey指定の順序は保つ
	# 絶対欄位置によるリストとNF相対欄位置からの絶対化欄位置リストの間に重複があったらmarkする
	if not abs_rel_mixed_range and len(return_list) != len(return_list_original):
		abs_rel_cross=True
	return return_list,abs_rel_cross	# 欄位置は0発進 集合化によってリストの重複を解消しkey指定の順序は保つ

# 欄番号文字列をNF相対形式で整数化する
def getFieldNum(str,str1,str2):
	# n または NF または NF-x の形式の欄番号をNF相対形式の整数で確定する
	# 正規表現で「\d+|NF(-\d+)?」にmatchする全体をstrが、「\d+」でmatchする部分をstr1が、「(-\d+)?」でmatchする部分をstr2が保持している
	# NF相対形式の整数化:
	#  単独のnが0のときはNone
	#  単独のnが0以外のときは整数のn
	#  単独のNFのときは整数の0
	#  NF-nのときは整数の-n
	# 実際の欄番号にする際には行ごとに得たNF（欄数）を使用して計算する
	if str1:	# n
		fieldnum=int(str1)
		if fieldnum==0:	# 欄番号0は全欄指定を意味する
			fieldnum=None
	else:	# NF-n または NF
		if str2:	# NF-n
			fieldnum=int(str2)
		else:	# NF
			fieldnum=0
	return fieldnum

#
# ひとつの欄指定パラメータから欄番号リストを得る（区間指定にも対応する）
#
def getFieldList(field_param):
	mobj = re.match(_keypat,field_param)	# 構文検査のために実行する
	if not mobj:	# フィールド指定の形式が不正
		error("フィールド指定の形式が不正です。 %s",field_param)
	field_param=field_param.replace("NF-0","NF")	# NF-0はNFと書き替える
	fieldlist=[]
	abs_rel_mixed_range=False
	concatlist=field_param.split("@")	# @で分割する
	for fieldnum in concatlist:
		mobj = re.match(_keypatNF,fieldnum)
		start=getFieldNum(fieldnum,mobj.group('m01'),mobj.group('m03'))	# 前端部を得る
		if mobj.group('m1'):	# a/bの形式で区間指定をしている
			end=getFieldNum(fieldnum,mobj.group('m11'),mobj.group('m13'))	# 後端部を得る
			fieldlist.append((start,end))	# 区間で確定
			# 絶対欄位置指定とNF相対欄位置指定が混在するときはmarkする
			if (start>0 and end <=0) or (start<=0 and end >0):
				abs_rel_mixed_range=True
		else:
			fieldlist.append(start)	# 前端部単独で確定
	return fieldlist,abs_rel_mixed_range

#
#	コマンドのフィールド指定パラメータから処理対象のNF相対欄位置リストを作成する
#
def getTargetFields(param):
	if param=="":
		return [None]	# フィールド指定パラメータリストが空のときは全欄指定とする
	ans = []
	fieldlist,abs_rel_mixed_range=getFieldList(param)
	ans+=fieldlist
	if None in ans:
		return [None],abs_rel_mixed_range	# 欄位置にひとつでも0を指定するものがあるときは全欄指定とする
	# 集合化によってリストの重複を解消する（絶対欄位置/NF相対欄位置それぞれに重複解消される）
	ans=sorted(set(ans), key=ans.index)	# 元のリスト（set）における出現順を維持する
	return ans,abs_rel_mixed_range

#
#	指定の欄値リストから指定の欄位置リストにしたがって連接した欄値を得る
#
def getField(fields,field_list):
	# 文字列の大小比較をするのでkeyの指定順に抽出して連接する
	return " ".join([fields[x] for x in field_list])

# 不要な空白の削除関数
def rm_sp(line):
	return re.sub(r' {2,}',' ',re.sub(r'^ +| +$','',line))	# 行頭と行末の空白を削除し連続空白を単空白にする

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(file,line):
	global master_firstline,tran_firstline
	if file==master:
		if not master_firstline: return line
		else: master_firstline=False
	elif file==tran:
		if not tran_firstline: return line
		else: tran_firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(file,line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(file,line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	line=rm_sp(line)	# 行頭と行末の空白を削除し連続空白を単空白にする
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

#
# utf8 変換
#
def to_utf8(s):
	try:
		return s.encode('utf-8')
	except:
		error("内部エラー UTF8への変換に失敗しました。")

#
# unicode 変換
#
def to_unicode(s):
	if Python3(): return s
	try:
		return unicode(s, 'utf_8')
	except:
		error("不当なマルチバイト文字が含まれています。")

#
# NFDtoNFC()のre.sub()から指定patternがみつかるごとに呼ばれるのでNFD/NFC変換をして返す
# 置換対象パターンはNFD文字:全角ひらがな/全角カタカナの清音に結合用濁点/結合用半濁点を連接したもの
# 置換先文字はNFC文字:全角ひらがな/全角カタカナの濁音/半濁音
#
def replace(matchobj):
	if Python3():	return unicodedata.normalize('NFC',matchobj.group(0))
	else:	return to_utf8(unicodedata.normalize('NFC',to_unicode(matchobj.group(0))))	# Python2ではutf8→unicdoe→utf8の変換をする

#
# 全角ひらがな/全角カタカナの濁音/半濁音のNFC化
#
def NFDtoNFC(str):
	# 全角ひらがな/全角カタカナの濁音/半濁音をNFCで統一して返す
	return re.sub(pattern,replace,str)

#
# メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) <= 2:
		usage()

	#
	# NFD文字（清音+結合用濁点/結合用半濁点）検出のための正規表現パターンを準備
	#
	pattern=re.compile(_comb_pat)

	master = open_file(2)
	tran  = open_file(3)

	# key=
	if sys.argv[1][0:4] == 'key=':
		key=sys.argv[1][4:]
	else:
		error("key指定がありません。")

	# フィールド指定パラメータからNF相対欄位置リストを作成する
	rel_keylist,abs_rel_mixed_range = getTargetFields(key)

	# 先頭行処理用flagの初期化
	master_firstline=True
	tran_firstline=True

	#
	# tran の１行入力
	#
	tline = tran.readline()
	if not tline:
		for mline in master:
			print(preproc_line(master,mline))
		sys.exit(0)
	tline=preproc_line(tran,tline)
	tfields=tline.split(" ")
	tNF=len(tfields)
	# tranの行の欄数tNFを見てNF相対欄位置リストから(絶対)欄位置リストを決定する
	tkey_list,abs_rel_cross=make_keylist(rel_keylist,abs_rel_mixed_range,tNF)

	#
	# メインループ
	#
	mNF=-1
	start=True
	for mline in master:
		mline=preproc_line(master,mline)
		mfields=mline.split(" ")
		mnf=len(mfields)
		if mnf != mNF:	# 欄数が変化したかまたは先頭行なら
			# 欄数変化があって区間指定においてabs_rel混在ならエラー
			if not start:	# 2行目以降
				if abs_rel_mixed_range:	# ref位置指定中の区間指定で絶対欄位置とNF相対欄位置が混在したものがあるとき
					error("key指定の区間指定とmasterのフィールド数変化が両立しません。")	# 欄数の変化は受理できない
			mNF=mnf	# mNFを更新
			# masterの行の欄数mNFを見てNF相対欄位置リストから(絶対)欄位置リストを決定する
			mkey_list,abs_rel_cross=make_keylist(rel_keylist,abs_rel_mixed_range,mNF)
			if start:	# 先頭行
				if abs_rel_cross:
					abs_rel_cross_first=True
				else:
					abs_rel_cross_first=False
				start=False
			else:	# 2行目以降で欄数変化
				# 区間指定に絶対欄位置指定とNF相対欄位置指定が混在している状態で欄数変化があればエラー
				if abs_rel_mixed_range:
					error("keyの区間指定において絶対欄位置指定とNF相対欄位置指定が混在している状態でmasterのフィールド数が変化しました。")
				# 欄数変化があって、区間指定においてabs_rel非混在で、絶対欄位置指定とNF相対欄位置指定に交叉が生じたらエラー
				if abs_rel_cross_first or abs_rel_cross:
					error("masterのフィールド数変化に際してkeyの絶対欄位置指定とNF相対欄位置指定に交叉がありました。")
		while NFDtoNFC(getField(mfields,mkey_list)) > NFDtoNFC(getField(tfields,tkey_list)):
			print(tline)
			tline = tran.readline()
			if not tline:
				print(mline)
				for mline in master:
					print(preproc_line(master,mline))
				sys.exit(0)
			tline=preproc_line(tran,tline)
			tfields=tline.split(" ")
			tnf=len(tfields)
			# tranの欄数検査
			if tnf != tNF:	# tranの2行目以降で欄数が変化した
				if ref_abs_rel_mixed_range:	# key位置指定中の区間指定で絶対欄位置とNF相対欄位置が混在したものがあるとき
					error("key指定の区間指定とtranのフィールド数変化が両立しません。")	# 欄数の変化は受理できない
			tNF=tnf	# tNFを更新
			# tranの行の欄数tNFを見てNF相対欄位置リストから(絶対)欄位置リストを決定する
			tkey_list,abs_rel_cross=make_keylist(rel_keylist,abs_rel_mixed_range,tNF)
		print(mline)

	#
	# tran の残り行の出力
	#
	while tline:
		print(tline)
		tline = preproc_line(tran,tran.readline())
	sys.exit(0)
