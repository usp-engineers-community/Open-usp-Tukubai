#!/usr/bin/env python
#coding: utf-8
#
# cjoin2 マッチングセレクト（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
#
# The MIT License
#
# Copyright (C) 2022 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "cjoin2 [-d<string>] [+<string>] key=<key> <master> [<tran>]"
_version = "Fri May 20 21:16:07 JST 2022"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4+, 3.1, 3.2/UTF-8)"
		# 1: 1st field
		# 3: 2nd and later fields with separator
wide_class = ["W","F","A"]	# 全角文字クラス
_keypat = r'((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?)(@((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?))*$'
_keypatNF=r'(?P<m0>(?P<m01>\d+)|(?P<m02>NF(?P<m03>-\d+)?))(/(?P<m1>(?P<m11>\d+)|(?P<m12>NF(?P<m13>-\d+)?)))?$'

# 濁音と半濁音のNFD表記でNFC表記もできるもの→NFDtoNFC変換でNFCに統一する
_comb_pat=r"(((う|か|き|く|け|こ|さ|し|す|せ|そ|た|ち|つ|て|と|は|ひ|ふ|へ|ほ|ウ|カ|キ|ク|ケ|コ|サ|シ|ス|セ|ソ|タ|チ|ツ|テ|ト|ハ|ヒ|フ|ヘ|ホ|ワ|ヰ|ヱ|ヲ)゙)|((は|ひ|ふ|へ|ほ|ハ|ヒ|フ|ヘ|ホ)゚))+"

import re
import os
import sys
import codecs
import unicodedata

def error(msg, *arg):
	print('Error[cjoin2] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print( "Usage     : %s" % _usage, file=sys.stderr);
	print( "Version   : %s" % _version, file=sys.stderr);
	print( "            %s" % _code, file=sys.stderr);
	sys.exit(1)

#
# ファイルオープン
#
def open_file(filename, mode = 'r'):
	if mode=="w":	# 出力ファイルのとき
		filename = '/dev/fd/'+filename	# modeがwのときはファイル名は数字で与えられていてファイルディスクリプタにする
	else:
		if filename == '-':	filename = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
		if not Python3():
			mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(filename, mode)
	except:
		if filename=='/dev/fd/0':
			error("標準入力ファイルをオープンできません。")
		else:
			error("ファイル '%s' をオープンできません。", filename)
	return file

def setMasterDummyFixed(master_file,masterkeylist,dummy_string):
	master_nonkeyval = []
	Xmaster = []
	global firstline
	firstline_backup=firstline	# main()での状態を保存
	firstline=True

	for line in master_file:
		line=preproc_line(line)
		#tokens = list(map(NFDtoNFC,line.split(' ')))	# token列に対してNFDtoNFC()を適用する
		tokens = list(map(NFDtoNFC,line.split()))	# token列に対してNFDtoNFC()を適用する
		nonkeyvallist=getnonkeyvallist(tokens,masterkeylist)	# tranに連結するための「masterの非キー欄」を得る
		master_nonkeyval.append(nonkeyvallist)
		key = " ".join(getkeyvallist(tokens,masterkeylist))
		Xkey=toXstr(key)	# keyを拡張文字列に変換する
		Xmaster.append(Xkey)
		if len(master_nonkeyval)==1:
			num=len(tokens)-len(masterkeylist)	# 先頭行で非キー欄数を求めておく
	firstline=firstline_backup	# firstlineはmain()のtranファイル読み込みでも使用しているので元の状態に戻す
	dummy = [ dummy_string for e in range(num) ]
	return master_nonkeyval,Xmaster,dummy

def setMaster(master_file,masterkeylist):
	master_nonkeyval = []
	Xmaster = []
	global firstline
	firstline_backup=firstline	# main()での状態を保存
	firstline=True
	
	max_lengths = []
	for line in master_file:
		line=preproc_line(line)
		#tokens = list(map(NFDtoNFC,line.split(' ')))	# token列に対してNFDtoNFC()を適用する
		tokens = list(map(NFDtoNFC,line.split()))	# token列に対してNFDtoNFC()を適用する
		nonkeyvallist=getnonkeyvallist(tokens,masterkeylist)	# tranに連結するための「masterの非キー欄」を得る
		master_nonkeyval.append(nonkeyvallist)
		key = " ".join(getkeyvallist(tokens,masterkeylist))
		Xkey=toXstr(key)	# keyを拡張文字列に変換する
		Xmaster.append(Xkey)

		# 非キー各フィールドの長さを求める
		lengths = [ strwidth(e) for e in nonkeyvallist ]	# 拡張文字列で表示幅を求める
		if len(max_lengths) == 0:
			max_lengths = [ e for e in lengths ]
		else:
			for i in range(len(max_lengths)):
				if max_lengths[i] < lengths[i] :
					max_lengths[i] = lengths[i]
	firstline=firstline_backup	# firstlineはmain()のtranファイル読み込みでも使用しているので元の状態に戻す

	# ダミー文字列の作成
	dummy = [ "*" * e for e in max_lengths ] 

	return master_nonkeyval,Xmaster, dummy

# NF相対欄位置からNF（欄数）に応じた0発進の欄位置に変換する
def getpos(base_pos):
	# NF相対欄位置からの変換:
	#  nのときはそのまま
	#  0のときはNF（欄数）に
	#  -nのときはNF-nに
	# 0発進とするために-1を加える
	if base_pos > 0:
		pos=base_pos-1
		if pos > NF-1:	error("フィールド番号が大きすぎます。%s",str(base_pos))
	else:
		pos=NF+base_pos-1
		if pos < 0:	error("フィールド指定で NF-x の x が大きすぎます。 %s","NF-"+str(-base_pos))
	return pos

# NF相対欄位置リスト（rel_keylist）からNF（欄数）に応じた実際の欄位置リスト（keylist）を作成する
def make_keylist(rel_keylist):
	# rel_keylistの要素には区間をあらわす整数tupleの(start,end)と、単一欄をあらわす整数がある
	if rel_keylist==[None]:	# 全欄指定
		return list(range(0,NF))
	keylist=[]
	for fieldpos in rel_keylist:
		if type(fieldpos)==int:	keylist.append(getpos(fieldpos))	# 単一欄
		else:	# (a/b)の区間
			start=getpos(fieldpos[0])
			end=getpos(fieldpos[1])
			if start <= end:	# 正順
				keylist+=range(start,end+1)
			else:	# 逆順
				keylist+=range(start,end-1,-1)
	for key in keylist:
		if key < 0 or key >= NF:
			error("キーの位置が行のフィールド範囲を逸脱しています。")
	return list(set(keylist))	# 欄位置は0発進

# 欄番号文字列をNF相対形式で整数化する
def getFieldNum(str,str1,str2):
	# n または NF または NF-x の形式の欄番号をNF相対形式の整数で確定する
	# 正規表現で「\d+|NF(-\d+)?」にmatchする全体をstrが、「\d+」でmatchする部分をstr1が、「(-\d+)?」でmatchする部分をstr2が保持している
	# NF相対形式の整数化:
	#  単独のnが0のときはNone
	#  単独のnが0以外のときは整数のn
	#  単独のNFのときは整数の0
	#  NF-nのときは整数の-n
	# 実際の欄番号にする際には行ごとに得たNF（欄数）を使用して計算する
	
	if str1:	# n
		fieldnum=int(str1)
		if fieldnum==0:	# 欄番号0は全欄指定を意味する
			#error("フィールド指定に0があります。")
			fieldnum=None
	else:	# NF-n または NF
		if str2:	# NF-n
			fieldnum=int(str2)
		else:	# NF
			fieldnum=0
	return fieldnum

#
# ひとつの欄指定パラメータから欄番号リストを得る（区間指定にも対応する）
#
def getFieldList(field_param):
	mobj = re.match(_keypat,field_param)	# 構文検査のために実行する
	if not mobj:	# フィールド指定の形式が不正
		error("フィールド指定の形式が不正です。 %s",field_param)
	fieldlist=[]
	concatlist=field_param.split("@")	# @で分割する
	for fieldnum in concatlist:
		mobj = re.match(_keypatNF,fieldnum)
		start=getFieldNum(fieldnum,mobj.group('m01'),mobj.group('m03'))	# 前端部を得る
		if mobj.group('m1'):	# a/bの形式で区間指定をしている
			end=getFieldNum(fieldnum,mobj.group('m11'),mobj.group('m13'))	# 後端部を得る
			fieldlist.append((start,end))	# 区間で確定
		else:
			fieldlist.append(start)	# 前端部単独で確定
	if None in fieldlist:	return [None]	# 欄位置にひとつでも0を指定するものがあるときは全欄指定とする
	return fieldlist

#
# tranファイルにおけるキーの欄番号リストからmasterファイルにおける対応欄番号リストを得る
#
def getmasterkeylist(keylist):
	masterkeylist=[]
	min_field=min(keylist)
	for fn in keylist:
		masterkeylist.append(fn-min_field)	# keylistの最小値が0に対応するようにshiftする
	return masterkeylist

#
#	与えられた文字列のリストから指定のkeylistにしたがって欄を抽出する
#
def getkeyvallist(tokens,keylist):
	keyvallist=[]
	for fn in keylist:
		keyvallist.append(tokens[fn])
	return keyvallist

#
#	与えられた文字列のリストから指定のkeylistにない欄を抽出する
#
def getnonkeyvallist(tokens,keylist):
	keyvallist=[]
	for fn in range(0,len(tokens)):
		if fn not in keylist:	# keylistにない欄番号に対して
			keyvallist.append(tokens[fn])	# 値を抽出する
	return keyvallist

#
# 直接入力文字列の前処理
#
#  Python3においてコマンドラインからの直接入力文字列中にUnicode符号位置がU+FFFFを超えるコードがあると
#  Unicode文字に正しく変換されない場合があることへの対処をする
#  Python2においてはなにもしない
def utf2ucs(instr):
	if sys.version_info < (3, 0):	# Python2なら
		return instr
	outstr=""	# 出力文字列
	intlist=[]	# 作業用整数リスト
	for char in instr:
		if ord(char)>=0xdc00 and ord(char)<=0xdcff:	# 文字の符号位置がU+DCxxの範囲にあったら「UTF8もどき」
			intlist.append(ord(char)-0xdc00)	# 0xdc00のげたをはずして整数リストに入れる
		else:	# 通常文字がきたら
			if len(intlist)>0:	# ここまでに「UTF8もどき」列を変換した整数リストがあったら
				# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
				outstr+= bytes(intlist).decode("utf_8")
				intlist=[]	# 整数リストを再初期化
			outstr+=char	# 新しくきた通常文字を出力文字列に追加
	# 「UTF8もどき」列を変換した整数リストが残っていたら
	# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
	if len(intlist)>0:	outstr+= bytes(intlist).decode("utf_8")
	return outstr

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False
#
# unicode 変換
#
def to_unicode(s):
	if type(s)==type(U""): return s	# 入力文字列がUnicode文字列のとき
	try:
		return unicode(s, 'utf_8')
	except:
		error("不当なマルチバイト文字が含まれています。")

#
# utf8 変換
#
def to_utf8(s):
	try:
		return s.encode('utf-8')
	except:
		error("内部エラー UTF8への変換に失敗しました。")

#
# NFDtoNFC()のre.sub()から指定patternがみつかるごとに呼ばれるのでNFD/NFC変換をして返す
# 置換対象パターンはNFD文字:全角ひらがな/全角カタカナの清音に結合用濁点/結合用半濁点を連接したもの
# 置換先文字はNFC文字:全角ひらがな/全角カタカナの濁音/半濁音
#
def replace(matchobj):
	if Python3():	return unicodedata.normalize('NFC',matchobj.group(0))
	else:	return to_utf8(unicodedata.normalize('NFC',to_unicode(matchobj.group(0))))	# Python2ではutf8→unicdoe→utf8の変換をする

#
# 全角ひらがな/全角カタカナの濁音/半濁音のNFC化
#
def NFDtoNFC(str):
	# 全角ひらがな/全角カタカナの濁音/半濁音をNFCで統一して返す
	return re.sub(pattern,replace,str)

#
# 代用対前半部の判定
#
def isHighSurrogate(cp):
	if 0xd800 <= cp and cp <= 0xdbff: return True
	else:                             return False

#
# 代用対後半部の判定
#
def isLowSurrogate(cp):
	if 0xdc00 <= cp and cp <= 0xdfff: return True
	else:                             return False

#
# UCS2の判定
#
def isUCS2():
	if sys.maxunicode==0xFFFF: return True
	else:                      return False

#
# unicodedata.east_asian_width()「東アジアの文字幅」の修正版
#
def east_asian_width(c):
	if len(c)>=2: return unicodedata.east_asian_width(c)	# UCS2で代用対が与えられたとき
	# unicodedata.east_asian_width()は半角オーバ－ライン「‾」（U+203e）に対して
	# A（Ambiguous; 曖昧=ギリシャ文字/ロシア文字と同様に全角扱いされる）を返すので
	# Na（Narrow; 狭=半角英数記号）に準ずるものと修正する
	elif ord(c)==0x203e: return 'Na'
	else:                return unicodedata.east_asian_width(c)

#
# 半角判定
#
def isHalfWidth(c):
	# 文字のEast_Asian_Width特性検査でFまたはWまたはAならば
	# F/W/A = Wide（全角英数記号） Full（漢字 ひらがな 全角カタカナ） Ambiguous（ロシア文字 ギリシャ文字）
	if east_asian_width(c) in wide_class: return False	# 全角
	else:                                 return True	# それ以外は半角

#
# 合成可能文字の判定
#
def isCombiningDiacriticalMark(cp):
	# unicodeにおける合成可能文字のブロック内か？
		# 0x3099 0x309a	仮名文字の合成可能濁点と合成可能半濁点
		# 0x0300-0x036F	ダイアクリティカルマーク（合成可能）
		# 0x1AB0-0x1AFF	ダイアクリティカルマーク（合成可能）拡張
		# 0x1DC0-0x1DFF	ダイアクリティカルマーク（合成可能）補助
		# 0x20D0-0x20FF	記号用ダイアクリティカルマーク（合成可能）
		# 0xFE20-0xFE2F	半記号（合成可能）
	if cp == 0x3099 or cp == 0x309a or \
		0x0300<=cp and cp <=0x036F or \
		0x1AB0<=cp and cp <=0x1AFF or \
		0x1DC0<=cp and cp <=0x1DFF or \
		0x20D0<=cp and cp <=0x20FF or \
		0xFE20<=cp and cp <=0xFE2F:
		return True
	else:	return False

#
# SVS異体字選択子（variation selector）の判定
#
def isSVSVariationSelector(cp):
	# unicodeにおける異体字選択子のブロック内か？
		# 0xFE00-0xFE0F	Variation Selectors Supplement	字形選択子補助（SVS用）
	if  0xFE00<=cp  and cp <=0xFE0F:
		return True
	else:	return False

#
# IVS異体字選択子（variation selector）の判定
#
def isIVSVariationSelector(cp):
	# unicodeにおける異体字選択子のブロック内か？
		# 0xE0100-0xE01EF	Variation Selectors	字形選択子（IVS用）
	if  0xE0100<=cp and cp <=0xE01EF:
		return True
	else:	return False

#
# 文字列の表示幅
#
def strwidth(s):

	wid = 0	# 表示幅の初期化
	s=toXstr(s)

	# sは拡張文字列となった
	for xchar in s:	# xcharは(拡張文字,属性情報)のtupple
		if isHalfWidth(xchar[0][0]):	wid+=1	# 半角なら+1	# xchar[0][0]は拡張文字の（異体字選択子などを除く）通常文字部分
		else:	wid+=2	# 全角なら+2
	return wid

#
# 文字列の拡張文字列化
#
# 文字列を拡張文字列に変換する	1文字が複数の符号位置であらわされている場合（代用対/結合文字/IVS/SVS）への対応
#	返値は(拡張文字,属性情報)のtuppleのlistでこれを「拡張文字列」とする
# 	このうち
#	拡張文字は
# 		UCS2のときはリスト
# 			[ 通常文字または文字列としての代用対 , 結合文字または異体字選択子（2バイトまたは代用対）または空文字 ]
# 		UCS4のときは文字列
# 			文字列（通常文字に結合文字または異体字選択子が付くことがある）
#	属性情報は属性値（整数）となる
#		属性は:
#		UCS: 通常のUnicode文字（Universal Coded Character Set）
#		CCS: 結合文字列（Combining Charactor Seuence）
#		SVS: 標準異体字列（Standard Variation Sequence）
#		IVS: 異体字列（Ideographic Variation Sequence）
#		に分類される
def toXstr(s):
	s=to_unicode(s)	# 引数の文字列をunicode化しておく
	StringList=[]
	AttrList=[]	# 拡張文字列の属性リスト
	if isUCS2():
		surrogate_pair=False	# UCS2では代用対（surrogate pair）がありうる
		prevchar=""
		for c in s:
			cp=ord(c)	# code point
			# 代用対（[D800～DBFF]+[DC00～DFFF]のペア）の存在を考慮する
			if not surrogate_pair:	# 代用対の処理中でなければ
				if isHighSurrogate(cp):	# 代用対の前半部なら
					surrogate_pair=True	# surrogate pair starts
					HighSurrogate=c
					HighSurrogateCp=cp
					continue
				if isLowSurrogate(cp):	error("代用対の構成が無効です。")	# 代用対の後半部が単独で現れた
				elif isCombiningDiacriticalMark(cp):	# 合成可能文字なら
					if prevchar=="":	error("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
					StringList.append([prevchar,c])	# 先行文字と合成可能文字の組を追加（合成可能文字は第0面のみにある）
					AttrList.append(CCS)
					prevchar=""
				elif isSVSVariationSelector(cp):	# 異体字選択子なら（代用対ではないのでSVS用異体字選択子の可能性のみ検査する）
					if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,c])	# 先行文字とSVS用異体字選択子（2バイト）の組を追加
					AttrList.append(SVS)
					prevchar=""
				else:	# 次となる普通の文字がきたら先行文字を単独で追加
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
						AttrList.append(UCS)
					prevchar=c	# 先行文字とする
			elif isLowSurrogate(cp):	# 代用対の処理中に代用対の後半部がきたら代用対の完成
				surrogate_pair=False	# surrogate pair ends
				sp=HighSurrogate+c	# 代用対を作る
				uni = 0x10000 + (HighSurrogateCp - 0xD800) * 0x400 + (cp - 0xDC00);	# 代用対をdecodeする
				if isIVSVariationSelector(uni):	# 代用対が異体字選択子なら（代用対なのでSVSてはなくIVSの可能性のみ検査する
					if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,sp])	# 先行文字とIVS用異体字選択子（4バイト）の組を追加
					AttrList.append(IVS)	# 代用対はIVS用異体字選択子
					prevchar=""
				else:	# 先行文字があって次に文字としての代用対が来た
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
						AttrList.append(UCS)
					prevchar=sp	# 代用対を先行文字とする
			else:	error("代用対の構成が無効です。")	# 代用対の前半部の次に代用対後半部以外が現われた
		if surrogate_pair: 	error("代用対の構成が無効です。")	# 代用対の前半部で文字列の終端に達した
		if prevchar!="":
			StringList.append([prevchar,""])	# 最後の先行文字と空文字の組を追加
			AttrList.append(UCS)
	else:	# UCS4
		prevchar=""
		for c in s:
			cp=ord(c)	# code point
			if isCombiningDiacriticalMark(cp):	# 合成可能文字なら
				if prevchar=="":	error("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
				StringList.append(prevchar+c)	# 先行文字と合成可能文字の列を追加
				AttrList.append(CCS)
				prevchar=""
			elif isSVSVariationSelector(cp) or isIVSVariationSelector(cp):	# 異体字選択子なら
				if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
				StringList.append(prevchar+c)	# 先行文字と異体字選択子（4バイト）の列を追加
				if isSVSVariationSelector(cp):
					AttrList.append(SVS)
				else:
					AttrList.append(IVS)
				prevchar=""
			else:
				if prevchar!="":
					StringList.append(prevchar)	# 次となる普通の文字がきたら先行文字を単独で追加
					AttrList.append(UCS)
				prevchar=c	# 先行文字とする
		if prevchar!="":
			StringList.append(prevchar)	# 最後の先行文字を追加
			AttrList.append(UCS)
	return list(zip(StringList, AttrList))	# (Xchar,Xattr)のtuppleのlistを返す

#
# XcharMatch 文字のゆるい一致検査
#
#	拡張文字同士で「ゆるい一致検査」をする
#		通常文字が与えられたときは拡張文字列に変換してから比較する
#		「拡張文字列」はtoXstr()が出力する文字単位のリストによる「文字列」
#		ふたつの文字列で同じ位置の文字の比較は
#			UCSとUCSのときは通常の文字比較で「一致/不一致」を決める
#			IVSとIVSのときは基底文字と異体字選択子の両方が同じなら「一致」とする
#			UCSとIVSのときはUCSと「IVSの基底文字」が同じなら（IVSの異体字選択子の値にかかわらず）「一致」（ゆるい一致）とする
#		これは、IVSに対して、その基底文字に等しいUCSは「異体字選択子による微小な字体差を包摂していて文字比較においてwild-characterのようになっている」ということによる
#		なお、UCSを表示したときに使用される字体は対応するIVSの異体字組があるときはfontシステムがその中からひとつを省略時字体（default glyph）として用いる
def XcharMatch(char1,char2):
	if type(char1)!=tuple:	# char1は通常文字
		Xchar1=toXstr(char1)[0]	# 拡張文字に変換
	else:
		Xchar1=char1
	if type(char2)!=tuple:	# char2は通常文字
		Xchar2=toXstr(char2)[0]	# 拡張文字に変換
	else:
		Xchar2=char2
	# LooseMatchでなかったら通常比較
	if not LooseMatch:
		return char1==char2
	# (拡張文字,属性)のtupleを分解
	char1=Xchar1[0]
	char2=Xchar2[0]
	attr1=Xchar1[1]
	attr2=Xchar2[1]
	if char1==char2:	# 拡張文字で一致のとき
		return True
	if char1[0]!=char2[0]:	# 拡張文字の基底文字部分が等しくないとき
		return False	# 両文字はここで不一致となった
	else:	# 文字の基底文字部分が等しいとき
		if (attr1==UCS and attr2==IVS) or (attr1==IVS and attr2==UCS):	# 基底文字部分が等しく片方はUCSでもう一方はIVS異体字選択子
			return True	# この拡張文字は一致←「片方はUCSでもう一方はIVS」は拡張部分が異なる場合の例外的一致
		else:	# 基底文字部分が等しく両方に結合文字/SVS異体字選択子/（異なる）IVS異体字選択子
			# この段階では基底文字部分が等しく拡張部分が異なるままなので「例外」ではなく不一致となる
			return False	# 両文字は不一致

#
# XstrMatch 文字列のゆるい一致検査
#
#	拡張文字列同士で「ゆるい一致検査」をする
#		通常文字列が与えられたときは拡張文字列に変換してから比較する
#		「拡張文字列」はtoXstr()が出力する文字単位のリストによる「文字列」
#		ふたつの文字列で同じ位置の文字の比較はXcharMatch()で行なう
def XstrMatch(str1,str2):
	# 与えられた文字列が通常文字列のときは拡張文字列に変換しておく（文字列がUTF8ときときはunicodeへの変換もする）
	if type(str1)!=list:
		str1=toXstr(str1)
	if type(str2)!=list:
		str2=toXstr(str2)
	if str1==str2:	# 全体一致
		return True
	if len(str1)!=len(str2):	# 拡張文字列長（文字数）が異なる
		return False
	for i in range(0,len(str1)):
		if not XcharMatch(str1[i],str2[i]):
			return False
	return True	# 最後の文字まで一致した

# リストメソッドのindex()を拡張文字列を使用した「文字列のゆるい一致検査」で実現する代用関数（拡張文字列入力版）
def Xindex_in_list(Xstr1,Xstrlist):
	if type(Xstr1)!=list:
		Xstr1=toXstr(Xstr1)
	for j in range(0,len(Xstrlist)):	# 拡張文字列を後方の拡張文字からみていく（Xindex_in_list()の挙動を辞書型変数を作成して使用した場合に合わした）
		i=len(Xstrlist)-(j+1)
		Xstr2=Xstrlist[i]
		if Xstr2==None:
			continue
		if type(Xstr2)!=list:
			Xstr2=toXstr(Xstr2)
		if XstrMatch(Xstr1,Xstr2):
			return i	# Xstrlistのi番目でstrがみつかった
	#raise ValueError	# strlistにstrがみつからなかったらValueError例外を送出する
	return -1	# リストメソッドのindex()ではstrlistにstrがみつからなかったらValueError例外を送出するが代用関数では-1を返す

# リストに対するin演算子を拡張文字列を使用した「文字列のゆるい一致検査」で実現する代用関数（拡張文字列入力版）
def Xin_list(str,strlist):
	if Xindex_in_list(str,strlist)>=0:
		return True
	return False

# メイン関数
if __name__ == '__main__':

	if len(sys.argv) < 3 :		usage()	# 最小パラメータ構成は「cjoin2 key=<n> <master>」
	if sys.argv[1] == '--help' :	usage()
	if sys.argv[1] == '--version':	usage()

	#
	# NFD文字（清音+結合用濁点/結合用半濁点）検出のための正規表現パターンを準備
	#
	pattern=re.compile(_comb_pat)

	#
	# 拡張文字列の各文字ごとの属性識別用定数
	UCS,CCS,SVS,IVS=0,1,2,3
	# UCS: 通常のUnicode文字（Universal Coded Character Set）
	# CCS: 結合文字列（Combining Charactor Seuence 結合文字列
	# SVS: 標準異体字列（Standard Variation Sequence）
	# IVS: 異体字列（Ideographic Variation Sequence）

	# 「ゆるい文字列一致」の指定
	LooseMatch=True	# 現在は固定

	# dオプションを解析
	dummy_string = None
	if sys.argv[1][0] == '+':
		dummy_string = sys.argv[1][1:]
		del sys.argv[1]
	elif sys.argv[1][0] == '-' and sys.argv[1][1] == 'd':
		dummy_string = sys.argv[1][2:]
		del sys.argv[1]

	# dummy_string処理
	if dummy_string!=None:
		if Python3():	# Python3なら
			dummy_string=utf2ucs(dummy_string)

	# keyオプションを解析
	if sys.argv[1][0:4] == 'key=':
		num_str = sys.argv[1][4:]
		if len(num_str)==0:
			error("keyオプションに値がありません")
		del sys.argv[1]
	else:
		error("invalid key position")

	# masterとtranを確定する
	num_arg=len(sys.argv)	# ここまでで残ったargvの長さ2または3でなければならない
	if num_arg<2:	error("実行パラメータが少なすぎます。")
	if num_arg>3:	error("実行パラメータが多すぎます。")
	master=sys.argv[1]
	if num_arg==2:	tran="-"	# tranが省略されたらtranとして標準入力を仮定する
	else:	tran=sys.argv[2]	# tranが省略されていなければパラメータからとる
	if master==tran:
		error("masterファイルとtranファイルが同じファイルです。")

	rel_keylist = getFieldList(num_str)	# パラメータからNF相対欄位置リストを作成する

	# メイン処理：トランザクションとマスタのマッチング
	firstline=True
	for line in open_file(tran):
		# 指定フィールドのNF相対欄位置リストをNF（欄数）に応じた絶対欄位置リストに変換する
		NF=len(line.split())	# NFを得る
		keylist=make_keylist(rel_keylist)

		if firstline:	# 先頭行ならmasterファイルの内容をとりこむ
			masterkeylist=getmasterkeylist(keylist)	# tranファイルにおけるキーの欄番号リストからmasterファイルにおける対応欄番号リストを得る
			# マスタファイルの内容を移す
			if dummy_string == None:
				master_nonkeyval,Xmaster,dummy = setMaster(open_file(master),masterkeylist)	# master_nonkeyvalはmasterファイルの非キー部 Xmasterはmasterファイルのキー部で拡張文字列のリスト dummyは可変長
			else:
				master_nonkeyval,Xmaster,dummy = setMasterDummyFixed(open_file(master),masterkeylist,dummy_string)	# master_nonkeyvalはmasterファイルの非キー部 Xmasterはmasterファイルのキー部で拡張文字列のリスト dummyは固定長

		line=preproc_line(line)
		tokens = list(map(NFDtoNFC,line.split()))	# token列に対してNFDtoNFC()を適用する

		keyvallist=getkeyvallist(tokens,keylist)	# tranファイルからキー値のリストを得る
		nonkeyvallist=getnonkeyvallist(tokens,keylist)	# tranファイルから非キー値のリストを得る
		key = " ".join(keyvallist)

		Xkey=toXstr(key)	# keyを拡張文字列に変換する
		Xpos=Xindex_in_list(Xkey,Xmaster)	# 拡張文字列と拡張文字列リストの比較でリスト中の位置を求める
		if Xpos>=0:	# Xmasterの中にXkeyがみつかったら
			# 「キー部 masterの非キー部 tranの非キー部」の並びで出力する
			print(" ".join(keyvallist+master_nonkeyval[Xpos]+nonkeyvallist).rstrip(' '))
		else:
			# 「キー部 dummy tranの非キー部」の並びで出力する
			print(" ".join(keyvallist+dummy+nonkeyvallist).rstrip(' '))
