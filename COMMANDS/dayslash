#!/usr/bin/env python
#coding: utf-8
#
# dayslash 日付のフォーマット (Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Hinata Yanagi
#
# The MIT License
#
# Copyright (C) 2022 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "dayslash [-r] [--output] <format> <field> [<file>]"
_version = "Mon Nov 21 07:17:29 JST 2022"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4+, 3.1, 3.2/UTF-8)"

import re
import os
import sys

def die(msg, *arg):
	print('Error[dayslash] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage     :", _usage, file=sys.stderr);
	print("Version   :", _version, file=sys.stderr);
	print("	   ", _code, file=sys.stderr);
	sys.exit(1)

#
# 入力ファイルオープン
#
def openReadFile(filename, mode='r'):
	if filename == '-':
		filename = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if not Python3():
		mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	# 標準入力も含めてopen()で開く
	try:
		file = open(filename, mode)
	except:
		die("ファイルを開けません。")
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

#
# 直接入力文字列の前処理
#
#  Python3においてコマンドラインからの直接入力文字列中にUnicode符号位置がU+FFFFを超えるコードがあると
#  Unicode文字に正しく変換されない場合があることへの対処をする
def utf2ucs(instr):
	outstr=""	# 出力文字列
	intlist=[]	# 作業用整数リスト
	for char in instr:
		if ord(char)>=0xdc00 and ord(char)<=0xdcff:	# 文字の符号位置がU+DCxxの範囲にあったら「UTF8もどき」
			intlist.append(ord(char)-0xdc00)	# 0xdc00のげたをはずして整数リストに入れる
		else:	# 通常文字がきたら
			if len(intlist)>0:	# ここまでに「UTF8もどき」列を変換した整数リストがあったら
				# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
				outstr+= bytes(intlist).decode("utf_8")
				intlist=[]	# 整数リストを再初期化
			outstr+=char	# 新しくきた通常文字を出力文字列に追加
	# 「UTF8もどき」列を変換した整数リストが残っていたら
	# bytesに変換してutf8からUCSへの変換をして出力文字列に追加
	if len(intlist)>0:	outstr+= bytes(intlist).decode("utf_8")
	return outstr

def conv8(s,fmt):
	if "H" in fmt: return s
	if "M" in fmt: return s
	if "S" in fmt: return s

	ymd = fmt.replace("yyyy",s[0:4])

	# mmだったらゼロあり
	ymd = ymd.replace("mm",s[4:6])
	# mでs[4] = "0" だったら一桁
	if s[4] == "0":
		ymd = ymd.replace("m",s[5])
	else:
		ymd = ymd.replace("m",s[4:6])

	ymd = ymd.replace("dd",s[6:])
	if s[6] == "0":
		ymd = ymd.replace("d",s[7])
	else:
		ymd = ymd.replace("d",s[6:8])

	return ymd

def conv6(s,fmt):
	if "y" in fmt: return s
	if "m" in fmt: return s
	if "d" in fmt: return s

	hms = fmt.replace("HH",s[0:2])
	if s[0] == "0":
		hms = hms.replace("H",s[1])
	else:
		hms = hms.replace("H",s[0:2])

	hms = hms.replace("MM",s[2:4])
	if s[2] == "0":
		hms = hms.replace("M",s[3])
	else:
		hms = hms.replace("M",s[2:4])

	hms = hms.replace("SS",s[4:6])
	if s[4] == "0":
		hms = hms.replace("S",s[5])
	else:
		hms = hms.replace("M",s[4:6])

	return hms

def conv14(s,fmt):

	ymd_format = re.split("[HMS]",fmt)[0]
	hms_format = fmt[len(ymd_format):]

	if len(ymd_format) > 0:
		ymd = conv8(s[0:8],ymd_format)
	else:
		ymd = ""

	if len(hms_format) > 0:
		hms = conv6(s[8:],hms_format)
	else:
		hms = ""

	return ymd + hms

def conv():
	day_format=sys.argv[1]
	if Python3():
		day_format=utf2ucs(day_format)	# Python3のときは直接指定の文字列に対して前処理をする
	try:
		field = int(sys.argv[2]) - 1
	except:
		die("フィールド番号が正しくありません。")
	if field < 0:
		die("フィールド番号が0または負です。")

	if len(sys.argv) == 3:
		input_file = openReadFile("-")
	else:
		input_file = openReadFile(sys.argv[3])

	# 先頭行処理用flagの初期化
	global firstline
	firstline=True

	for line in input_file:
		line = preproc_line(line)
		words = line.split(" ")
		if field >= len(words):
			die("フィールド番号が大きすぎます。")
		day_str = words[field]
		str_len = len(day_str)
		if str_len == 8:
			ans = conv8(day_str,day_format)
		elif str_len == 6:
			ans = conv6(day_str,day_format)
		elif str_len == 14:
			ans = conv14(day_str,day_format)
		else:
			ans = day_str

		words[field] = ans 

		print(" ".join(words))

def addZero(s):
	n = len(s)
	if n == 1: return "0" + s
	elif n == 2: return s
	elif n == 0: return "00"
	else: die("不正な数字")

def revYmd(nums):
	if "yyyy" in nums:	y_str = nums["yyyy"]
	else:			y_str = ""

	# 月
	if "m" in nums: m_str = addZero(nums["m"])
	elif "mm" in nums: m_str = addZero(nums["mm"])
	else: m_str = "00"

	# 日
	if "d" in nums: d_str = addZero(nums["d"])
	elif "dd" in nums: d_str = addZero(nums["dd"])
	else: d_str = "00"

	return "".join([y_str,m_str,d_str])


def revHms(nums):
	if "H" in nums: h_str = addZero(nums["H"])
	elif "HH" in nums: h_str = addZero(nums["HH"])
	else: h_str = "00"

	if "M" in nums: m_str = addZero(nums["M"])
	elif "MM" in nums: m_str = addZero(nums["MM"])
	else: m_str = "00"

	if "S" in nums: s_str = addZero(nums["S"])
	elif "SS" in nums: s_str = addZero(nums["SS"])
	else: s_str = "00"

	return "".join([h_str,m_str,s_str])

def to_unicode(s):
	if Python3():
		return s

	return unicode(s,'utf-8')

def rev():
	day_format=sys.argv[2]
	if Python3():
		day_format=utf2ucs(day_format)	# Python3のときは直接指定の文字列に対して前処理をする
	try:
		field = int(sys.argv[3]) - 1
	except:
		die("フィールド番号が正しくありません。")
	if field < 0:
		die("フィールド番号が0または負です。")

	if len(sys.argv) == 4:
		input_file = openReadFile("-")
	else:
		input_file = openReadFile(sys.argv[4])

	# 何番目にどの種類の数字が入っているか配列に記録
	re_num = re.compile('[^ymdHMS]')
	format_tokens = re.sub(re_num,".",day_format).rstrip(".").split(".")

	# 数字を取り去ったときに何が残るか記録
	re_residual = re.compile('[ymdHMS]')
	format_residual = re.sub(re_residual,"",day_format)

	re_num = re.compile('[^0-9]')
	re_residual = re.compile('[0-9]')

	hms = False
	ymd = False
	if "H" in format_tokens or "HH" in format_tokens:
		hms = True
	elif "M" in format_tokens or "MM" in format_tokens:
		hms = True
	elif "S" in format_tokens or "SS" in format_tokens:
		hms = True

	if "y" in format_tokens or "yy" in format_tokens:
		ymd = True
	elif "m" in format_tokens or "mm" in format_tokens:
		ymd = True
	elif "d" in format_tokens or "dd" in format_tokens:
		ymd = True

	# 先頭行処理用flagの初期化
	global firstline
	firstline=True

	for line in input_file:
		line=preproc_line(line)
		words = line.split(" ")
		if field >= len(words):
			die("フィールド番号が大きすぎます。")
		day_str = words[field]

		tokens = re.sub(re_num,".",day_str).rstrip(".").split(".")
		residual = re.sub(re_residual,"",day_str)

		if format_residual != residual:
			# 入力ファイルの指定フィールドのデータが指定されたフォーマットに一致しない場合、入力データをそのまま出力する。
			print(line)	# 入力行をそのまま出力
			continue	# 入力を継続する

		nums = dict(zip(format_tokens, tokens))

		if ymd:	ans_ymd = revYmd(nums)
		else:	ans_ymd = ""

		if hms:	ans_hms = revHms(nums)
		else:	ans_hms = ""

		words[field] = ans_ymd + ans_hms

		print(" ".join(words))

# メイン関数
if __name__ == '__main__':
	if len(sys.argv) < 2 :		usage()
	if sys.argv[1] == '--help' :	usage()
	if sys.argv[1] == '--version':	usage()

	if sys.argv[1] == '--output':
		del sys.argv[1]

	if sys.argv[1] == '-r':	# リバースモード（未実装）
		rev()
	else:
		conv()
