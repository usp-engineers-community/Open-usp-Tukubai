#!/usr/bin/env python
#coding: utf-8
#
# keta 桁整形フィルタ（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Hinata Yanagi
#
# The MIT License
#
# Copyright (C) 2022 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "keta n1 n2 .. [<filename>]"
_usage1 = "keta -v [<filename>]"
_usage2 = "keta [--] [<filename>]"
_version = "Tue Sep  6 08:46:04 JST 2022"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4+/UTF-8)"
_keypat = r'(-?\d+)(x((\d+)|(NF)(-\d+)?))?$'
		# 1: - width
		# 4: constant multiplier
		# 5: NF
		# 6: offset from NF
wide_class = ["W","F","A"]	# 全角文字クラス

import re
import os
import sys
import stat
import tempfile
import unicodedata

def error(msg, *arg):
	print('Error[keta] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("        :", _usage1, file=sys.stderr)
	print("        :", _usage2, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

class FieldLine:
	def __init__(self, line):
		self.__fields = [ "" ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getField(self, s):
		return self.__fields[s]

#
# unicode 変換
#
def to_unicode(s):
	if sys.version_info >= (3, 0): return s
	else:
		try:
			return unicode(s, 'utf_8')
		except:
			error("不当なマルチバイト文字が含まれています。")

#
# 代用対前半部の判定
#
def isHighSurrogate(cp):
	if 0xd800 <= cp and cp <= 0xdbff: return True
	else:                             return False

#
# 代用対後半部の判定
#
def isLowSurrogate(cp):
	if 0xdc00 <= cp and cp <= 0xdfff: return True
	else:                             return False

#
# UCS2の判定
#
def isUCS2():
	if sys.maxunicode==0xFFFF: return True
	else:                      return False

#
# unicodedata.east_asian_width()「東アジアの文字幅」の修正版
#
def east_asian_width(c):
	if len(c)>=2: return unicodedata.east_asian_width(c)	# UCS2で代用対が与えられたとき
	# unicodedata.east_asian_width()は半角オーバ－ライン「‾」（U+203e）に対して
	# A（Ambiguous; 曖昧=ギリシャ文字/ロシア文字と同様に全角扱いされる）を返すので
	# Na（Narrow; 狭=半角英数記号）に準ずるものと修正する
	elif ord(c)==0x203e: return 'Na'
	else:                return unicodedata.east_asian_width(c)

#
# 半角判定
#
def isHalfWidth(c):
	# 文字のEast_Asian_Width特性検査でFまたはWまたはAならば
	# F/W/A = Wide（全角英数記号） Full（漢字 ひらがな 全角カタカナ） Ambiguous（ロシア文字 ギリシャ文字）
	if east_asian_width(c) in wide_class: return False	# 全角
	else:                                 return True	# それ以外は半角

#
# 合成可能文字の判定
#
def isCombiningDiacriticalMark(cp):
	# unicodeにおける合成可能文字のブロック内か？
		# 0x3099 0x309a	仮名文字の合成可能濁点と合成可能半濁点
		# 0x0300-0x036F	ダイアクリティカルマーク（合成可能）
		# 0x1AB0-0x1AFF	ダイアクリティカルマーク（合成可能）拡張
		# 0x1DC0-0x1DFF	ダイアクリティカルマーク（合成可能）補助
		# 0x20D0-0x20FF	記号用ダイアクリティカルマーク（合成可能）
		# 0xFE20-0xFE2F	半記号（合成可能）
	if cp == 0x3099 or cp == 0x309a or \
		0x0300<=cp and cp <=0x036F or \
		0x1AB0<=cp and cp <=0x1AFF or \
		0x1DC0<=cp and cp <=0x1DFF or \
		0x20D0<=cp and cp <=0x20FF or \
		0xFE20<=cp and cp <=0xFE2F:
		return True
	else:	return False

#
# 異体字選択子（vaiation selector）の判定
#
def isVariationSelector(cp):
	# unicodeにおける異体字選択子のブロック内か？
		# 0xFE00-0xFE0F	Variation Selectors Supplement	字形選択子補助（SVS用）
		# 0xE0100-0xE01EF	Variation Selectors	字形選択子（IVS用）
	if  0xFE00<=cp  and cp <=0xFE0F or \
		0xE0100<=cp and cp <=0xE01EF:
		return True
	else:	return False

#
# 文字列の表示幅
#
def strwidth(s):
	wid = 0	# 表示幅の初期化
	s=string2list(to_unicode(s))
	# sは拡張文字列となった
	for xchar in s:
		if isHalfWidth(xchar[0]):	wid+=1	# 半角なら+1
		else:	wid+=2	# 全角なら+2
	return wid

#
# 文字列の分解
#
# 文字列を拡張文字の列に変換する	1文字が複数の符号位置であらわされている場合（代用対/結合文字/IVS/SVS）への対応
# 	分解結果はリストとなり各要素（拡張文字）は
# 		UCS2のときはリスト
# 			[ 通常文字または文字列としての代用対 , 結合文字または異体字選択子（2バイトまたは代用対）または空文字 ]
# 		UCS4のときは文字列
# 			文字列（通常文字に結合文字または異体字選択子が付くことがある）
def string2list(s):
	StringList=[]
	if isUCS2():
		surrogate_pair=False	# UCS2では代用対（surrogate pair）がありうる
		prevchar=""
		for c in s:
			cp=ord(c)	# code point			
			# 代用対（[D800～DBFF]+[DC00～DFFF]のペア）の存在を考慮する
			if not surrogate_pair:	# 代用対の処理中でなければ
				if isHighSurrogate(cp):	# 代用対の前半部なら
					surrogate_pair=True	# surrogate pair starts
					HighSurrogate=c
					HighSurrogateCp=cp
					continue
				if isLowSurrogate(cp):	error("代用対の構成が無効です。")	# 代用対の後半部が単独で現れた
				elif isCombiningDiacriticalMark(cp):	# 合成可能文字なら
					if prevchar=="":	error("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
					StringList.append([prevchar,c])	# 先行文字と合成可能文字の組を追加（合成可能文字は第0面のみにある）
					prevchar=""
				elif isVariationSelector(cp):	# 異体字選択子なら
					if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,c])	# 先行文字とSVS用異体字選択子（2バイト）の組を追加
					prevchar=""
				else:	# 次となる普通の文字がきたら先行文字を単独で追加
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
					prevchar=c	# 先行文字とする
			elif isLowSurrogate(cp):	# 代用対の処理中に代用対の後半部がきたら代用対の完成
				surrogate_pair=False	# surrogate pair ends
				sp=HighSurrogate+c	# 代用対を作る
				uni = 0x10000 + (HighSurrogateCp - 0xD800) * 0x400 + (cp - 0xDC00);	# 代用対をdecodeする
				if isVariationSelector(uni):	# 代用対が異体字選択子なら
					if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,sp])	# 先行文字とIVS用異体字選択子（4バイト）の組を追加
					prevchar=""
				else:	# 先行文字があって次に文字としての代用対が来た
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
					prevchar=sp	# 代用対を先行文字とする
			else:	error("代用対の構成が無効です。")	# 代用対の前半部の次に代用対後半部以外が現われた
		if surrogate_pair: 	error("代用対の構成が無効です。")	# 代用対の前半部で文字列の終端に達した
		if prevchar!="":
			StringList.append([prevchar,""])	# 最後の先行文字と空文字の組を追加
	else:	# UCS4
		prevchar=""
		for c in s:
			cp=ord(c)	# code point
			if isCombiningDiacriticalMark(cp):	# 合成可能文字なら
				if prevchar=="":	error("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
				StringList.append(prevchar+c)	# 先行文字と合成可能文字の列を追加
				prevchar=""
			elif isVariationSelector(cp):	# 異体字選択子なら
				if prevchar=="":	error("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
				StringList.append(prevchar+c)	# 先行文字とIVS用異体字選択子（4バイト）の列を追加
				prevchar=""
			else:
				if prevchar!="":	StringList.append(prevchar)	# 次となる普通の文字がきたら先行文字を単独で追加
				prevchar=c	# 先行文字とする
		if prevchar!="":
			StringList.append(prevchar)	# 最後の先行文字を追加
	return StringList

#
# 入力ファイルオープン
#
def open_file(n):
	if type(n) == type(0):
		if n >= len(sys.argv):	n = '-'
		else:	n = sys.argv[n]
	if n == '-':	n = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():	mode='r'
	else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(n, mode)
	except:
		if n=='/dev/fd/0': n="-"
		error("ファイル '%s' をオープンできません。", n)
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

#
# 通常ファイルの判定
#
def isfile(fd):
	try:
		return stat.S_ISREG(os.fstat(fd).st_mode)
	except:
		return False

#
# 1st pass
#
def pass1(file, left, rewind):
	if rewind and not isfile(file.fileno()):	# rewind指定で通常fileでないとき←fileとして標準入力が与えられているとき
		tmp = tempfile.mkstemp(prefix='keta-')
		os.unlink(tmp[1])
		tmp = os.fdopen(tmp[0], 'w+')
	else:
		tmp = None

	wid = []
	for line in file:
		line=preproc_line(line)	# 入力行の前処理
		if tmp:	# 標準入力のときは一時fileに記憶しておく
			print(line, file=tmp)
		line = FieldLine(line)
		wid += [ 0 ] * (line.size() + 1 - len(wid))
		# 各フィールドについて最大表示幅を調べる
		for i in range(1, line.size() + 1):
			wid[i] = max(wid[i], strwidth(line.getField(i)))

	if left:
		wid = [ -x for x in wid ]
	if tmp:
		file.close()
		file = tmp
	if rewind:	# rewind指定なら一時fileをrewindしておく
		file.seek(0)
	return [ file, wid[1:] ]

#
# 2nd pass
#
def pass2(arg):
	global firstline
	firstline=True
	for line in arg[0]:
		line=preproc_line(line)	# 入力行の前処理
		prline(FieldLine(line), arg[1])
	sys.exit(0)

#
# 2nd pass (with NF)
#
def pass2_nf(file, wid):
	global firstline
	firstline=True
	for line in file:
		line=preproc_line(line)	# 入力行の前処理
		line = FieldLine(line)
		prline(line, mkwidtab(wid, line.size()))
	sys.exit(0)

#
# 1行出力
#
def prline(line, wid):
	def pr1(outstr,string, wid):
		if string == None:
			return
		if not wid:
			wid = 0
		else:
			wid += wid // abs(wid) * (len(string) - strwidth(string))
		outstr=outstr+str('%*s ' % (wid, string))
		return outstr

	i=0
	outstr=''
	# 桁指定の数とフィールド数の一致検査
	if len(wid) != line.size():
		error("桁指定の数と行のフィールド数が一致しません。")
	for string in list(map(line.getField, list(range(1, line.size() + 1)))):
		outstr=pr1(outstr,string,wid[i])
		i+=1
	outstr=outstr.rstrip()
	print(outstr)

#
# width テーブルの作成
#
def mkwidtab(wid, nf):
	table = []
	for w in wid:
		if w[3]:
			table += [ int(w[0]) ] * (nf + int(w[3]))
		elif w[2]:
			table += [ int(w[0]) ] * nf
		elif w[1]:
			table += [ int(w[0]) ] * int(w[1])
		else:
			table += [ int(w[0]) ]
	return table
#
# メイン関数
#
if __name__ == '__main__':

	# 構文表示
	if len(sys.argv) < 2 and len(sys.argv) != 1: usage()
	elif len(sys.argv) == 2:
		if sys.argv[1] == '--help' or \
		   sys.argv[1] == '--version':	usage()

	firstline=True

	#
	# -v <filename>
	#
	if len(sys.argv) > 1 and sys.argv[1] == '-v':
		if len(sys.argv) > 3:
			usage()
		file = open_file(2)	# 第2パラメータをファイル名と仮定する
		pass1list=pass1(file, 0, False)[1]
		cnt=0
		for i in pass1list:
			cnt+=1
			if cnt<len(pass1list): endchar=' '
			else: endchar=''
			print(i, end=endchar)
		print()
		sys.exit(0)
	#
	# [--] <filename>
	#
	if len(sys.argv) <= 1 or not re.match(_keypat, sys.argv[1]):	# パラメータなしか先頭パラメータがフィールド指定以外
		if len(sys.argv) > 1 and sys.argv[1] == '--':
			left = True
			del sys.argv[1]
		else:
			left = False
		if len(sys.argv) > 2:
			usage()
		file = open_file(1)	# （「--」があればそれを除いた）最初のパラメータを入力file名とする
		pass2(pass1(file, left, True))

	#
	# n1 n2 .. <filename>
	#
	if re.match(_keypat, sys.argv[-1]):	# パラメータの末尾が桁指定に符合するなら<file>は省略されたとして標準入力をあてる
		file = sys.stdin
	else:
		file = open_file(-1)	# 最後のパラメータをファイル名と仮定する
		del sys.argv[-1]

	del sys.argv[0]
	wid = []
	nf = False
	for arg in sys.argv:	# sys.argvは桁指定のならび
		r = re.match(_keypat, arg)
		if not r:
			usage()
		wid += [ [ r.group(i) for i in (1, 4, 5, 6) ] ]	# _keypatから符合部の1/4/5/6番目を取り出してwidに追加する
		nf |= wid[-1][2] == 'NF'	# r.group(2)は_keypat符合部の5番目で符合していれば"NF"

	if nf:
		pass2_nf(file, wid)
	else:
		pass2([ file, mkwidtab(wid, 0) ])
