#!/usr/bin/env python
#coding: utf-8
#
# block_getlast : 同一キーをもつレコードから、参照キーが同じ最終ブロックをすべて出力する（Open usp Tukubai版）
#
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
#
# The MIT License
#
# Copyright (C) 2023 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import re
import sys
import unicodedata

_usage = "block_getlast key=<key> ref=<ref> [<file>]"
_version = "Fri May 20 00:00:00 JST 2023"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?)(@((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?))*$'
_keypatNF=r'(?P<m0>(?P<m01>\d+)|(?P<m02>NF(?P<m03>-\d+)?))(/(?P<m1>(?P<m11>\d+)|(?P<m12>NF(?P<m13>-\d+)?)))?$'

# 濁音と半濁音のNFD表記でNFC表記もできるもの→NFDtoNFC変換でNFCに統一する
_comb_pat=r"(((う|か|き|く|け|こ|さ|し|す|せ|そ|た|ち|つ|て|と|は|ひ|ふ|へ|ほ|ウ|カ|キ|ク|ケ|コ|サ|シ|ス|セ|ソ|タ|チ|ツ|テ|ト|ハ|ヒ|フ|ヘ|ホ|ワ|ヰ|ヱ|ヲ)゙)|((は|ひ|ふ|へ|ほ|ハ|ヒ|フ|ヘ|ホ)゚))+"

def error(msg, *arg):
	print('Error[block_getlast] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(filename):
	if filename == '-':	filename = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():	mode='r'
	else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(filename, mode)
	except:
		if filename=='/dev/fd/0':
			error("標準入力ファイルをオープンできません。")
		else:
			error("ファイル '%s' をオープンできません。", filename)
	return file

# キーフィールド指定処理関連

# NF相対欄位置からNF（欄数）に応じた0発進の欄位置に変換する
def getpos(base_pos):
	# NF相対欄位置からの変換:
	#  nのときはそのまま
	#  0のときはNF（欄数）
	#  -nのときはNF-n
	# 0発進とするために-1を加える
	if base_pos > 0:
		pos=base_pos-1
		if pos >= NF:	error("フィールド番号が大きすぎます。 %s",str(base_pos))
		return False,pos	# 元からの絶対欄位置
	else:
		pos=NF+base_pos-1
		if pos < 0:	error("フィールド指定でNF-x の x が大きすぎます。 %s","NF-"+str(-base_pos))
		return True,pos	# NF相対欄位置からの絶対化欄位置
	return pos

# NF相対欄位置リスト（rel_keylist）からNF（欄数）に応じた実際の欄位置リスト（keylist）を作成する
def make_keylist(rel_keylist,abs_rel_mixed_range):
	# NF相対欄位置リスト（rel_keylist）とは「NFやNF-xのNF相対欄位置指定を含む欄位置リスト」を意味しリストには絶対欄位置も含む
	# rel_keylistの要素には区間をあらわす整数tupleの(start,end)と、単一欄をあらわす整数がある
	# rel_keylistを構成するそれぞれの整数は絶対欄位置指定とNF相対欄位置指定の両方がありうる
	rel_list=[]	# key指定順に並べたNF相対からの絶対化欄位置リスト
	abs_list=[]	# key指定順に並べた絶対欄位置リスト
	abs_rel_cross=False
	range_list=[]
	abs_and_rellist=[]
	for fieldpos in rel_keylist:
		if type(fieldpos)==int:	# 単一欄
			rel,pos=getpos(fieldpos)
			if rel:
				rel_list.append(pos)
			else:
				abs_list.append(pos)
			abs_and_rellist.append(pos)
		else:	# (a/b)の区間指定
			rel1,start=getpos(fieldpos[0])
			rel2,end=getpos(fieldpos[1])
			if start <= end:	# 正順
				range_list=range(start,end+1)
			else:	# 逆順
				range_list=range(start,end-1,-1)
			if rel1 or rel2:	# 区間の端にNF相対襴位置指定があった
				rel_list+=range_list	# 片端のみがNF相対襴位置指定のときも便宜的にrel_listに加える
			else:
				abs_list+=range_list
			abs_and_rellist+=range_list
	if abs_rel_mixed_range:	pass	# 絶対欄位置指定とNF相対欄位置指定による区間指定があるときは交叉検査をしない
	elif len(abs_list)*len(rel_list)==0:	pass	# 絶対欄位置指定群/NF相対欄位置指定群いずれかがないときは交叉検査をしない
	else:	# 両群ともに存在するときは交叉検査をする
		min_abs=min(abs_list)
		max_abs=max(abs_list)
		min_rel=min(rel_list)
		max_rel=max(rel_list)
		if max_abs < min_rel or max_rel < min_abs:	pass	# 両群が交叉しない
		else:	# 両群が交叉する
			abs_rel_cross=True
	# 重複を解消する 出力するkey位置の順序はコマンドパラメータにおける指定出現順を保つ
	return_list=sorted(set(abs_and_rellist),key=abs_and_rellist.index)
	return return_list,abs_rel_cross	# 欄位置は0発進 集合化によってリストの重複を解消しkey指定の順序は保つ

# 欄番号文字列をNF相対形式で整数化する
def getFieldNum(str,str1,str2):
	# n または NF または NF-x の形式の欄番号をNF相対形式の整数で確定する
	# 正規表現で「\d+|NF(-\d+)?」にmatchする全体をstrが、「\d+」でmatchする部分をstr1が、「(-\d+)?」でmatchする部分をstr2が保持している
	# NF相対形式の整数化:
	#  単独のnが0のときはエラーとする
	#  単独のnが0以外のときは整数のn
	#  単独のNFのときは整数の0
	#  NF-nのときは整数の-n
	# 実際の欄番号にする際には行ごとに得たNF（欄数）を使用して計算する
	if str1:	# n
		fieldnum=int(str1)
		if fieldnum==0:	# 欄番号0は受理しない
			error("key指定またはref指定に0がありました。")
	else:	# NF-n または NF
		if str2:	# NF-n
			fieldnum=int(str2)
		else:	# NF
			fieldnum=0
	return fieldnum

#
# ひとつの欄指定パラメータから欄番号リストを得る（区間指定にも対応する）
#
def getFieldList(field_param):
	mobj = re.match(_keypat,field_param)	# 構文検査のために実行する
	if not mobj:	# フィールド指定の形式が不正
		error("フィールド指定の形式が不正です。 %s",field_param)
	field_param=field_param.replace("NF-0","NF")	# NF-0はNFと書き替える
	fieldlist=[]
	abs_rel_mixed_range=False
	concatlist=field_param.split("@")	# @で分割する
	for fieldnum in concatlist:
		mobj = re.match(_keypatNF,fieldnum)
		if not mobj:	# フィールド指定の形式が不正
			error("フィールド指定の形式が不正です。 %s",fieldnum)
		start=getFieldNum(fieldnum,mobj.group('m01'),mobj.group('m03'))	# 前端部を得る
		if mobj.group('m1'):	# a/bの形式で区間指定をしている
			end=getFieldNum(fieldnum,mobj.group('m11'),mobj.group('m13'))	# 後端部を得る
			fieldlist.append((start,end))	# 区間で確定
			# 絶対欄位置指定とNF相対欄位置指定が混在するときはmarkする
			if (start>0 and end <=0) or (start<=0 and end >0):
				abs_rel_mixed_range=True
		else:
			fieldlist.append(start)	# 前端部単独で確定
	return fieldlist,abs_rel_mixed_range

#
#	コマンドのフィールド指定パラメータから処理対象のNF相対欄位置リストを作成する
#
def getTargetFields(param):
	ans = []
	fieldlist,abs_rel_mixed_range=getFieldList(param)
	ans+=fieldlist
	if None in ans:
		return [None],abs_rel_mixed_range	# 欄位置にひとつでも0を指定するものがあるときは全欄指定とする
	# 集合化によってリストの重複を解消する（絶対欄位置/NF相対欄位置それぞれに重複解消される）
	ans=sorted(set(ans), key=ans.index)	# 元のリスト（set）における出現順を維持する
	return ans,abs_rel_mixed_range

#
# 行の欄数検査
#   先頭行ではkeyの区間指定で絶対欄位置指定とNF相対欄位置指定が混在しているか検査する
#   先頭行以外では
#     絶対欄位置リストとNF相対欄位置絶対化リスト（区間の端がNF相対襴位置だったものも含む）の間に交叉（重複）があるか検査する
#
def check_num_fields_variation(fields):
	global	NF,ref,start
	global	key_list,key_abs_rel_cross_first,key_abs_rel_cross,key_abs_rel_mixed_range
	global	ref_list,ref_abs_rel_cross_first,ref_abs_rel_cross,ref_abs_rel_mixed_range
	# key_abs_rel_cross keyの絶対欄位置指定群とNF相対欄位置指定群が交叉していればTrue
	#               NF=5のときにキー指定が「1/4@NF-3/NF」となっているときなどにTrueとなる
	# key_abs_rel_cross_first 先頭行においてkey_abs_rel_crossがTrueであればTrue
	# refについても同様

	start=False
	nf=len(fields)
	if NF==-1:	start=True
	if nf != NF:	# 先頭行かまたは欄数が変化したなら
		NF=nf	# NFを更新
		# 行の欄数NFを見てNF相対欄位置リストから(絶対)欄位置リストを決定する
		key_list,key_abs_rel_cross=make_keylist(key_rel_keylist,key_abs_rel_mixed_range)
		if ref:
			ref_list,ref_abs_rel_cross=make_keylist(ref_rel_keylist,ref_abs_rel_mixed_range)
		if start:	# 先頭行なら
			if key_abs_rel_cross:	key_abs_rel_cross_first=True	# 先頭行においてkeyの絶対欄位置指定群とNF相対欄位置指定群が交叉していたらmarkしておく
			else:	key_abs_rel_cross_first=False
			if ref:
				if ref_abs_rel_cross:	ref_abs_rel_cross_first=True	# 先頭行においてrefの絶対欄位置指定群とNF相対欄位置指定群が交叉していたらmarkしておく
				else:	ref_abs_rel_cross_first=False
		else:	# 欄数変化があったら許容できるか検査する
			if key_abs_rel_mixed_range:	# 区間指定においてabs_rel混在だったら
				error("keyの区間指定において絶対欄位置指定とNF相対欄位置指定が混在している状態でフィールド数が変化しました。")
			if key_abs_rel_cross_first:	# 先頭行でkeyの絶対欄位置指定とNF相対欄位置指定に交叉が生じていたらその後の欄数変化はエラーとする
				error("keyの絶対欄位置指定群とNF相対欄位置指定群が交叉している状態でフィールド数が変化しました。")
			if key_abs_rel_cross:	# 第2行以降で絶対欄位置指定とNF相対欄位置指定に交叉が生じたら
				error("フィールド数が変化してkeyの絶対欄位置指定群とNF相対欄位置指定群に交叉が生じました。")
			if ref:
				if ref_abs_rel_mixed_range:	# 区間指定においてabs_rel混在だったら
					error("refの区間指定において絶対欄位置指定とNF相対欄位置指定が混在している状態でフィールド数が変化しました。")
				if ref_abs_rel_cross_first:	# 先頭行でrefの絶対欄位置指定とNF相対欄位置指定に交叉が生じていたらその後の欄数変化はエラーとする
					error("refの絶対欄位置指定群とNF相対欄位置指定群が交叉している状態でフィールド数が変化しました。")
				if ref_abs_rel_cross:	# 第2行以降で絶対欄位置指定とNF相対欄位置指定に交叉が生じたら
					error("フィールド数が変化してrefの絶対欄位置指定群とNF相対欄位置指定群に交叉が生じました。")
	return

# 不要な空白の削除関数
def rm_sp(line):
	return re.sub(r' {2,}',' ',re.sub(r'^ +| +$','',line))	# 行頭と行末の空白を削除し連続空白を単空白にする

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	line=rm_sp(line)	# 行頭と行末の空白を削除し連続空白を単空白にする
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

# キーフィールドリストをもとにレコードからキーフィールド値リストを空白区切りの文字列としてとりだす
def GetKeyFieldValues(line,keylist):
	return " ".join([line[x] for x in range(NF) if x in keylist])

#
# utf8 変換
#
def to_utf8(s):
	try:
		return s.encode('utf-8')
	except:
		die("内部エラー UTF8への変換に失敗しました。")

#
# unicode 変換
#
def to_unicode(s):
	if Python3(): return s
	try:
		return unicode(s, 'utf_8')
	except:
		die("不当なマルチバイト文字が含まれています。")

#
# NFDtoNFC()のre.sub()から指定patternがみつかるごとに呼ばれるのでNFD/NFC変換をして返す
# 置換対象パターンはNFD文字:全角ひらがな/全角カタカナの清音に結合用濁点/結合用半濁点を連接したもの
# 置換先文字はNFC文字:全角ひらがな/全角カタカナの濁音/半濁音
#
def replace(matchobj):
	if Python3():	return unicodedata.normalize('NFC',matchobj.group(0))
	else:	return to_utf8(unicodedata.normalize('NFC',to_unicode(matchobj.group(0))))	# Python2ではutf8→unicdoe→utf8の変換をする

#
# 全角ひらがな/全角カタカナの濁音/半濁音のNFC化
#
def NFDtoNFC(str):
	# 全角ひらがな/全角カタカナの濁音/半濁音をNFCで統一して返す
	return re.sub(pattern,replace,str)

# main

if __name__ == '__main__':

	# 各関数で値が更新されうるglobal変数
	global	NF,ref,start
	global	key_list,key_abs_rel_cross_first,key_abs_rel_cross,key_abs_rel_mixed_range
	global	ref_list,ref_abs_rel_cross_first,ref_abs_rel_cross,ref_abs_rel_mixed_range

	filename,key,ref = "-", "", "" # default値/初期値

	# コマンドの説明表示
	if len(sys.argv) <= 1 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	#
	# NFD文字（清音+結合用濁点/結合用半濁点）検出のための正規表現パターンを準備
	#
	pattern=re.compile(_comb_pat)

	# パラメータ解析
	numparam=0
	while len(sys.argv) > 1:
		if sys.argv[1].startswith("key="): # keyパラメータ
			if key !="":
				error("keyパラメータが重複しています")
			key=sys.argv[1][4:]
		elif sys.argv[1].startswith("ref="): # keyパラメータ
			if ref!="":
				error("refパラメータが重複しています")
			ref=sys.argv[1][4:]
		else:
			numparam+=1
			if numparam==1: # file
				filename=sys.argv[1]
			else:
				error("ファイル指定が複数あります")
		del(sys.argv[1]) # popup

	# パラメータ検査
	if key=="":
		error("keyパラメータがありません")
	if ref=="":
		error("refパラメータがありません")

	# フィールド指定パラメータからNF相対欄位置リストを作成する
	ref_abs_rel_mixed_range=False
	if ref:
		ref_rel_keylist,ref_abs_rel_mixed_range = getTargetFields(ref)
	key_rel_keylist,key_abs_rel_mixed_range = getTargetFields(key)

	file=open_file(filename) # 入力ファイルを開く

	last_block=[] # 同じkey値でref値一定の最終ブロック
	firstline=True
	NF=-1
	key_abs_rel_cross,ref_abs_rel_cross,key_abs_rel_cross_first,ref_abs_rel_cross_first= \
		False,False,False,False
	start=True
	for line in file: # 入力ファイルを読む
		line=preproc_line(line)	# 入力行の前処理
		if not line:	sys.exit(0)
		fields=line.split(" ")
		# 先頭行または欄数変化のあるときはkey指定/ref指定の検査をする ここで絶対欄位置のkey_list/ref_listを得る
		check_num_fields_variation(fields)
		# 行のkey値とref値を求める
		keyfieldvalues=NFDtoNFC(GetKeyFieldValues(fields,key_list)) # key値 NFC正規化しておく
		reffieldvalues=NFDtoNFC(GetKeyFieldValues(fields,ref_list)) # ref値 NFC正規化しておく
		if start:	# 先頭行なら
			# 先頭行のkey値/ref値を現在のプロックのkey値/ref値とする
			current_keyfieldvalues=keyfieldvalues # key値
			current_reffieldvalues=reffieldvalues # ref値
			last_block.append(line)
			start=False
			continue
		# key値が変化したら
		if  keyfieldvalues != current_keyfieldvalues:
			# 新しいプロックのkey値とref値を記憶する
			current_keyfieldvalues = keyfieldvalues # key値
			current_reffieldvalues = reffieldvalues # ref値
			# key値が一定でref値が同じ行の最後のブロックを出力してからclearする
			for outputline in last_block:
				print(outputline)
			del last_block[:]  # これまでの同じkey値のref値が同じ行の最終ブロックをclearする
		# key値が変化せずref値が変化したら
		elif reffieldvalues != current_reffieldvalues:
			current_reffieldvalues = reffieldvalues # 新しいref値を記憶する
			del last_block[:]  # これまでの同じkey値のref値が同じ行の最終ブロックをclearする
		# 同じkey値のref値が同じ行の最終ブロックとして集積する
		last_block.append(line)

	# EOFに達したので未出力の最終ブロックを出力する
	for outputline in last_block:
		print(outputline)

	file.close() # 入力ファイルを閉じる

	# 終了
	sys.exit(0)
