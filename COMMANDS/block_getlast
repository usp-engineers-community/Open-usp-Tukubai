#!/usr/bin/env python
#coding: utf-8
#
# block_getlast : 同一キーをもつレコードから、参照キーが同じ最終ブロックをすべて出力する（Open usp Tukubai版）
#
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
#
# The MIT License
#
# Copyright (C) 2021 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import re
import sys
import unicodedata

_usage = "block_getlast key=<key> ref=<ref> [<file>]"
_version = "Sun Feb 21 04:35:04 JST 2021"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?)(@((\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?))*$'

# 濁音と半濁音のNFD表記でNFC表記もできるもの→NFDtoNFC変換でNFCに統一する
_comb_pat=r"(((う|か|き|く|け|こ|さ|し|す|せ|そ|た|ち|つ|て|と|は|ひ|ふ|へ|ほ|ウ|カ|キ|ク|ケ|コ|サ|シ|ス|セ|ソ|タ|チ|ツ|テ|ト|ハ|ヒ|フ|ヘ|ホ|ワ|ヰ|ヱ|ヲ)゙)|((は|ひ|ふ|へ|ほ|ハ|ヒ|フ|ヘ|ホ)゚))+"

def error(msg, *arg):
	print('Error[block_getlast] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
#
def open_file(filename):
	if filename == '-':	filename = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():	mode='r'
	else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(filename, mode)
	except:
		if filename=='/dev/fd/0':
			error("標準入力ファイルをオープンできません。")
		else:
			error("ファイル '%s' をオープンできません。", filename)
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

# （NFを含むかもしれない）フィールド要素を整数に変換する
def intwithNF(str,NF):
	# フィールド要素にNFを含むとき
	if str=="NF":
		return NF
	elif str.startswith("NF-"):
		str=str[3:]
		fieldnum=NF-int(str)
	# NFを含まないとき
	else:
		fieldnum=int(str)
	if fieldnum<=0:
		error("キー指定が0または負数です")
	if fieldnum>NF:
		error("フィールド指定がレコードのフィールド数を超えています")
	return fieldnum

# フィールド指定文字列からフィールドリストを作る（NFは確定している）
def GetKeyList(key,NF):
	k = re.match(_keypat,key)	# 構文検査のために実行する
	if not k:
		error("フィールド指定が不正です,")
	AtMarkList=key.split("@")	# @で分割
	keylist=[]
	for field in AtMarkList:
		if "/" in field:	# 範囲
			startend=field.split("/")
			start=intwithNF(startend[0],NF)
			end=intwithNF(startend[1],NF)
			if start <= end:	# 昇順のとき
				keylist+=range(start,end+1)
			else:	# 降順のとき
				keylist+=range(start,end-1,-1)
		else:	# 列挙
			keylist+=[intwithNF(field,NF)]
	# キーリストの重複解消
	keylist=list(set(keylist)) # 集合化によってリストの重複を解消
	return keylist

# キーフィールドリストをもとにレコードからキーフィールド値リストをとりだす
def GetKeyFieldValues(line,keylist):
	keyvaluelist=[]
	for i in keylist:
		keyvaluelist.append(line[i-1])
	return keyvaluelist

#
# utf8 変換
#
def to_utf8(s):
	try:
		return s.encode('utf-8')
	except:
		die("内部エラー UTF8への変換に失敗しました。")

#
# unicode 変換
#
def to_unicode(s):
	if Python3(): return s
	try:
		return unicode(s, 'utf_8')
	except:
		die("不当なマルチバイト文字が含まれています。")

#
# NFDtoNFC()のre.sub()から指定patternがみつかるごとに呼ばれるのでNFD/NFC変換をして返す
# 置換対象パターンはNFD文字:全角ひらがな/全角カタカナの清音に結合用濁点/結合用半濁点を連接したもの
# 置換先文字はNFC文字:全角ひらがな/全角カタカナの濁音/半濁音
#
def replace(matchobj):
	if Python3():	return unicodedata.normalize('NFC',matchobj.group(0))
	else:	return to_utf8(unicodedata.normalize('NFC',to_unicode(matchobj.group(0))))	# Python2ではutf8→unicdoe→utf8の変換をする

#
# 全角ひらがな/全角カタカナの濁音/半濁音のNFC化
#
def NFDtoNFC(str):
	# 全角ひらがな/全角カタカナの濁音/半濁音をNFCで統一して返す
	return re.sub(pattern,replace,str)

# main

if __name__ == '__main__':

	filename,key,ref = "-", "", "" # default値/初期値

	# コマンドの説明表示
	if len(sys.argv) <= 1 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	#
	# NFD文字（清音+結合用濁点/結合用半濁点）検出のための正規表現パターンを準備
	#
	pattern=re.compile(_comb_pat)

	# パラメータ解析
	numparam=0
	while len(sys.argv) > 1:
		if sys.argv[1].startswith("key="): # keyパラメータ
			if key !="":
				error("keyパラメータが重複しています")
			key=sys.argv[1][4:]
		elif sys.argv[1].startswith("ref="): # keyパラメータ
			if ref!="":
				error("refパラメータが重複しています")
			ref=sys.argv[1][4:]
		else:
			numparam+=1
			if numparam==1: # file
				filename=sys.argv[1]
			else:
				error("ファイル指定が複数あります")
		del(sys.argv[1]) # popup

	# パラメータ検査
	if key=="":
		error("keyパラメータがありません")
	if ref=="":
		error("refパラメータがありません")

	file=open_file(filename) # 入力ファイルを開く

	last_block=[] # 同じkey値でref値一定の最終ブロック
	linecount=0
	firstline=True
	for line in file: # 入力ファイルを読む
		line=preproc_line(line)
		fields=line.split()
		# 入力ファイルの最初のレコードで最終フィールド位置（NF）を確認しkeyリストとrefリストを確定する
		# （keyリストとrefリストはフィールド番号のリスト）
		if linecount==0:
			NF=len(fields)
			keylist=GetKeyList(key,NF) # key指定の文字列からkeyリストへ変換
			reflist=GetKeyList(ref,NF) # ref指定の文字列からrefリストへ変換
			# 行のkey値とref値を求めこれを現在のプロックのkey値とref値とする
			current_keyfieldvalues=keyfieldvalues=list(map(NFDtoNFC,GetKeyFieldValues(fields,keylist))) # key値 NFC正規化しておく
			current_reffieldvalues=reffieldvalues=list(map(NFDtoNFC,GetKeyFieldValues(fields,reflist))) # ref値 NFC正規化しておく
		else:
			# 行のkey値とref値を求める
			keyfieldvalues=list(map(NFDtoNFC,GetKeyFieldValues(fields,keylist))) # key値 NFC正規化しておく
			reffieldvalues=list(map(NFDtoNFC,GetKeyFieldValues(fields,reflist))) # ref値 NFC正規化しておく
		if len(fields)!=NF and linecount>1:
			error("入力ファイルのフィールド数が一定ではありません")
		# key値が変化したら
		if  keyfieldvalues != current_keyfieldvalues:
			# 新しいプロックのkey値とref値を記憶する
			current_keyfieldvalues = keyfieldvalues # key値
			current_reffieldvalues = reffieldvalues # ref値
			# key値が一定でref値が同じ行の最後のブロックを出力してからclearする
			for outputline in last_block:
				print(outputline)
			del last_block[:]  # これまでの同じkey値のref値が同じ行の最終ブロックをclearする
		# key値が変化せずref値が変化したら
		elif reffieldvalues != current_reffieldvalues:
			current_reffieldvalues = reffieldvalues # 新しいref値を記憶する
			del last_block[:]  # これまでの同じkey値のref値が同じ行の最終ブロックをclearする
		# 同じkey値のref値が同じ行の最終ブロックとして集積する
		last_block.append(line)
		linecount+=1

	# EOFに達したので未出力の最終ブロックを出力する
	for outputline in last_block:
		print(outputline)

	file.close() # 入力ファイルを閉じる

	# 終了
	sys.exit(0)
