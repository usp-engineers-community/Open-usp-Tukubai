#!/usr/bin/env python
#coding: utf-8
#
# keycut キーカットプログラム（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Hinata Yanagi
#
# The MIT License
#
# Copyright (C) 2022 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "keycut [options] <filename> <file>"
_option = "-d : キーの削除"
_option1 = "-a : ファイル追記"
_option2 = "-z : 圧縮"
_version = "Thu Jul 28 14:56:55 JST 2022"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'([^%]*)%(\d+)((\.\d{1,3})?)((\.\d{1,3})?)((\b|\D).*)'
		# 1: string before '%'
		# 2: field number
		# 3: '.' + offset
		# 5: '.' + length
		# 7: string after field specifier

wide_class = ["W","F","A"]	# 全角文字クラス

import re
import os
import sys
import stat
import gzip
from getopt import getopt
import unicodedata

def error(msg, *arg):
	print('Error[keycut] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Option  :", _option, file=sys.stderr)
	print("        :", _option1, file=sys.stderr)
	print("        :", _option2, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	sys.exit(1)

class FieldLine:
	def __init__(self, line, allow_z = False):
		self.__allow_zero = allow_z
		self.__fields = [ line ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getFieldNum(self, key):
		if type(key) == type(0):
			return key
		if re.match(r'\d+$', key):
			key = int(key)
		elif key == 'NF':
			key = self.size()
		else:
			key = self.size() - int(key[3:])
			if key <= 0:
				error("NF-x の x が大きすぎます。")
		if key < 0:
			error("フィールド番号が負です。")
		if key == 0 and not self.__allow_zero:
			error("フィールド番号が０です。")
		if key > self.size():
			error("フィールド番号が大きすぎます。")
		return key

	def getField(self, s, e = None):
		s = self.getFieldNum(s)
		if e == None:
			e = s
		else:
			e = self.getFieldNum(e)
		if s <= e:
			return ' '.join(self.__fields[s : e + 1])
		else:
			t = self.__fields[e : s + 1]
			t.reverse()
			return ' '.join(t)

class FileName:
	def __init__(self, str):
		self.__fname = []
		self.__del = set([])
		while '%' in str:
			r = re.match(_keypat, str);
			if not r:
				error("%% のみの引数は認められません。")
			self.__fname += [ r.group(1) ]
			fld, off, end = int(r.group(2)), 0, None
			self.__del |= set([ fld ])
			if r.group(3):
				off = max(int(r.group(3)[1:]) - 1, 0)	# 部分文字列の開始位置（0から始まる）
			if r.group(5):
				end = off + int(r.group(5)[1:])	# 部分文字列の終了位置（開始位置+長さ）
			self.__fname += [ (fld, off, end) ]
			str = r.group(7)
		self.__fname += [ str ]

	def generate(self, line):
		str = ''
		for x in self.__fname:
			if type(x) == type(''):	# ファイル名に"%"によるキー指定がないとき
				str += x
				continue
			# ファイル名に"%"によるキー指定（および部分文字列指定）の部分があるとき
			f = line.getField(x[0])
			xf=string2list(to_unicode(f))	# 指定フィールドを拡張文字列（string2list()の出力形式）に変換
			width=[ self.getCharWidth(xchar) for xchar in xf ]	# 指定フィールドの中の各文字の表示幅のリストを作成する

			start=x[1]
			end=x[2]
			# 半角だけなら単純に文字列を切り取り
			if not 2 in width:
				if start >= len(xf):	# すべて半角なので半角単位のstartと文字数を返すlen(xf)は比較できる
					error("部分文字列の開始位置が後ろすぎます。")
				if end == None:	# 指定位置から後方全部という指定
					# xfから指定範囲の文字列を抽出して返す（範囲検査はlist2string()内で実行する）
					str+=list2string(xf,start,start+len(xf))	# 拡張文字列xfの（文字単位で）startからstart+len(xf)の手前までを文字列として返す
				else:
					# xfから指定範囲の文字列を抽出する（範囲検査はlist2string()内で実行する）
					str+=list2string(xf,start,end)	# 拡張文字列xfの（文字単位で）startからendの手前までを文字列として返す
				continue
			# 全角のある文字列のとき
			# 開始位置の確認（開始位置は0から始まり半角単位で指定）
			pos = 0	# 文字単位の位置
			wsum = 0	# 半角単位の位置
			if start>0:	# 開始位置は文字列の中
				for w in width:	# 先頭から文字単位で表示幅を調べる
					pos += 1
					wsum += w
					if wsum < start:	continue
					elif wsum > start:	# 開始位置（半角単位）が全角文字の内部になる
						error("部分文字列の開始位置が全角文字の内部になります。")
					else:
						if pos==len(xf):	# 開始位置が文字列の直後のとき
							error("部分文字列の開始位置がフィールド文字列の直後になっています。")
						break	# 開始位置（半角単位）が正しく文字の位置になっていて全角文字の内部にはこない
				else:	# forが(wsum<start)のままで完了したので指定の開始位置が半角単位の文字列長より大きい
					error("部分文字列の開始位置が後ろすぎます。")

			# 指定位置から後方全部という指定のとき
			if end == None:
				# xfから後方全部の文字列を抽出して返す
				str+=list2string(xf,pos,pos+len(xf))
			else:
				# 終了位置の確認（終了位置は半角単位で指定された長さから計算してある）
				# 後ろの切り取り（切り取りの長さは半角単位で指定）
				length=end-start	# とりだす文字列の半角単位の長さ
				leng = 0	# とりだした文字列の文字単位の長さ
				wsum = 0
				for i in range(pos,len(width)):	# 文字単位の開始位置から文字単位で表示幅を調べる
					leng += 1
					wsum += width[i]
					if wsum < length:
						continue
					# 終了位置（半角単位）が全角文字の内部になるか？
					elif wsum > length:	# 終了位置（半角単位）が今の全角文字の内部になる
						error("部分文字列の終了位置が全角文字の内部になります。")
					else:	# wsum == length:
						break
				else:	# (wsum<length）のままforが完了したので指定の開始位置から半角単位の指定長さを進むと文字列の末端を超える
					error("部分文字列の終了位置が後ろすぎます")

				# xfから指定範囲の文字列を抽出する
				str+=list2string(xf,pos,pos+leng)	# とりだし位置ととりだす長さは文字単位

		return str

	# 拡張文字の表示幅を得る（拡張文字の先頭部で判断する）
	def getCharWidth(self,xc):
		if isHalfWidth(xc[0]):	return 1	# 半角なら1
		else:	return 2	# 全角なら2

	def delset(self):
		return self.__del

#
# キーフィールドの削除
#
def delkey(line, delset):
	fld = list(set(range(1, line.size() + 1)) - delset)
	fld.sort()
	return ' '.join([ line.getField(i) for i in fld ])

#
# 入力ファイルオープン
#
def open_file(n):
	if type(n) == type(0):
		if n >= len(sys.argv):	n = '-'
		else:	n = sys.argv[n]
	if n == '-':	n = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():	mode='r'
	else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(n, mode)
	except:
		if n=='/dev/fd/0': n="-"
		error("ファイル '%s' をオープンできません。", n)
	return file

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

###########################################
# 代用対/結合文字列/IVS/SVS/拡張文字列関連

#
# unicode 変換
#
def to_unicode(s):
	if Python3(): return s	# Python3ではsには既にunicode文字列が入っている
	try:
		return unicode(s, 'utf_8')
	except:
		error("不当なマルチバイト文字が含まれています。")

#
# 代用対前半部の判定
#
def isHighSurrogate(cp):
	if 0xd800 <= cp and cp <= 0xdbff: return True
	else:                             return False

#
# 代用対後半部の判定
#
def isLowSurrogate(cp):
	if 0xdc00 <= cp and cp <= 0xdfff: return True
	else:                             return False

#
# UCS2の判定
#
def isUCS2():
	if sys.maxunicode==0xFFFF: return True
	else:                      return False

#
# unicodedata.east_asian_width()「東アジアの文字幅」の修正版
#
def east_asian_width(c):
	if len(c)>=2: return unicodedata.east_asian_width(c)	# UCS2で代用対が与えられたとき
	# unicodedata.east_asian_width()は半角オーバ－ライン「‾」（U+203e）に対して
	# A（Ambiguous; 曖昧=ギリシャ文字/ロシア文字と同様に全角扱いされる）を返すので
	# Na（Narrow; 狭=半角英数記号）に準ずるものと修正する
	elif ord(c)==0x203e: return 'Na'
	else:                return unicodedata.east_asian_width(c)

#
# 半角判定
#
def isHalfWidth(c):
	# 文字のEast_Asian_Width特性検査でFまたはWまたはAならば
	# F/W/A = Wide（全角英数記号） Full（漢字 ひらがな 全角カタカナ） Ambiguous（ロシア文字 ギリシャ文字）
	if east_asian_width(c) in wide_class: return False	# 全角
	else:                                 return True	# それ以外は半角

#
# 合成可能文字の判定
#
def isCombiningDiacriticalMark(cp):
	# unicodeにおける合成可能文字のブロック内か？
		# 0x3099 0x309a	仮名文字の合成可能濁点と合成可能半濁点
		# 0x0300-0x036F	ダイアクリティカルマーク（合成可能）
		# 0x1AB0-0x1AFF	ダイアクリティカルマーク（合成可能）拡張
		# 0x1DC0-0x1DFF	ダイアクリティカルマーク（合成可能）補助
		# 0x20D0-0x20FF	記号用ダイアクリティカルマーク（合成可能）
		# 0xFE20-0xFE2F	半記号（合成可能）
	if cp == 0x3099 or cp == 0x309a or \
		0x0300<=cp and cp <=0x036F or \
		0x1AB0<=cp and cp <=0x1AFF or \
		0x1DC0<=cp and cp <=0x1DFF or \
		0x20D0<=cp and cp <=0x20FF or \
		0xFE20<=cp and cp <=0xFE2F:
		return True
	else:	return False

#
# 異体字選択子（vaiation selector）の判定
#
def isVariationSelector(cp):
	# unicodeにおける異体字選択子のブロック内か？
		# 0xFE00-0xFE0F	Variation Selectors Supplement	字形選択子補助（SVS用）
		# 0xE0100-0xE01EF	Variation Selectors	字形選択子（IVS用）
	if  0xFE00<=cp  and cp <=0xFE0F or \
		0xE0100<=cp and cp <=0xE01EF:
		return True
	else:	return False

#
# 文字列の分解
#
# 文字列を拡張文字の列に変換する	1文字が複数の符号位置であらわされている場合（代用対/結合文字/IVS/SVS）への対応
# 	分解結果はリストとなり各要素（拡張文字）は
# 		UCS2のときはリスト
# 			[ 通常文字または文字列としての代用対 , 結合文字または異体字選択子（2バイトまたは代用対）または空文字 ]
# 		UCS4のときは文字列
# 			文字列（通常文字に結合文字または異体字選択子が付くことがある）
def string2list(s):
	StringList=[]
	if isUCS2():
		surrogate_pair=False	# UCS2では代用対（surrogate pair）がありうる
		prevchar=""
		for c in s:
			cp=ord(c)	# code point			
			# 代用対（[D800～DBFF]+[DC00～DFFF]のペア）の存在を考慮する
			if not surrogate_pair:	# 代用対の処理中でなければ
				if isHighSurrogate(cp):	# 代用対の前半部なら
					surrogate_pair=True	# surrogate pair starts
					HighSurrogate=c
					HighSurrogateCp=cp
					continue
				if isLowSurrogate(cp):	die("代用対の構成が無効です。")	# 代用対の後半部が単独で現れた
				elif isCombiningDiacriticalMark(cp):	# 合成可能文字なら
					if prevchar=="":	die("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
					StringList.append([prevchar,c])	# 先行文字と合成可能文字の組を追加（合成可能文字は第0面のみにある）
					prevchar=""
				elif isVariationSelector(cp):	# 異体字選択子なら
					if prevchar=="":	die("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,c])	# 先行文字とSVS用異体字選択子（2バイト）の組を追加
					prevchar=""
				else:	# 次となる普通の文字がきたら先行文字を単独で追加
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
					prevchar=c	# 先行文字とする
			elif isLowSurrogate(cp):	# 代用対の処理中に代用対の後半部がきたら代用対の完成
				surrogate_pair=False	# surrogate pair ends
				sp=HighSurrogate+c	# 代用対を作る
				uni = 0x10000 + (HighSurrogateCp - 0xD800) * 0x400 + (cp - 0xDC00);	# 代用対をdecodeする
				if isVariationSelector(uni):	# 代用対が異体字選択子なら
					if prevchar=="":	die("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
					StringList.append([prevchar,sp])	# 先行文字とIVS用異体字選択子（4バイト）の組を追加
					prevchar=""
				else:	# 先行文字があって次に文字としての代用対が来た
					if prevchar!="":
						StringList.append([prevchar,""])	# 先行文字と空文字の組を追加
					prevchar=sp	# 代用対を先行文字とする
			else:	die("代用対の構成が無効です。")	# 代用対の前半部の次に代用対後半部以外が現われた
		if surrogate_pair: 	die("代用対の構成が無効です。")	# 代用対の前半部で文字列の終端に達した
		if prevchar!="":
			StringList.append([prevchar,""])	# 最後の先行文字と空文字の組を追加
	else:	# UCS4
		prevchar=""
		for c in s:
			cp=ord(c)	# code point
			if isCombiningDiacriticalMark(cp):	# 合成可能文字なら
				if prevchar=="":	die("結合文字列の構成が無効です。")	# 空文字の次に合成可能文字が現われた
				StringList.append(prevchar+c)	# 先行文字と合成可能文字の列を追加
				prevchar=""
			elif isVariationSelector(cp):	# 異体字選択子なら
				if prevchar=="":	die("異体字列の構成が無効です。")	# 空文字の次に異体字選択子が現われた
				StringList.append(prevchar+c)	# 先行文字とIVS用異体字選択子（4バイト）の列を追加
				prevchar=""
			else:
				if prevchar!="":	StringList.append(prevchar)	# 次となる普通の文字がきたら先行文字を単独で追加
				prevchar=c	# 先行文字とする
		if prevchar!="":
			StringList.append(prevchar)	# 最後の先行文字を追加
	return StringList

#
# 文字列の合成
#
# 拡張文字列を文字列に変換する	1文字が複数の符号位置であらわされている場合（代用対/結合文字/IVS/SVS）への対応
# 	拡張文字の各文字は
# 		UCS2のときはリスト
# 			[ 通常文字または文字列としての代用対 , 結合文字または異体字選択子（2バイトまたは代用対）または空文字 ]
# 		UCS4のときは文字列
# 			文字列（通常文字に結合文字または異体字選択子が付くことがある）
def list2string(xs,start,end):	# 拡張文字列xsのstartからendの手前までを文字列として返す
	# startとendは文字単位で与えられる
	if start<0 or start>len(xs):
		die("部分文字列の開始位置の指定エラー")
	if end<0 or end>len(xs):
		die("部分文字列の終了位置の指定エラー")
	if start>end: die("部分文字列の開始位置が終了位置の後にあります。")
	string=""
	for i in range(start,end):
		if isUCS2():	# UCS2のとき拡張文字列の各拡張文字は長さ2のリスト（[代用対または通常文字,結合文字または異体字選択子（代用対のこともある）]）
			string+=xs[i][0]+xs[i][1]
		else:
			string+=xs[i]	# UCS4のとき拡張文字列の各拡張文字は文字列
	return string

# 代用対/結合文字列/IVS/SVS/拡張文字列関連の終り
###########################################

#
# パスの分解
#
def path_dir(path):
	p = path.split('/')
	return [x + '/' for x in p[:-1]]

#
# ディレクトリの判定
#
def isdir(path):
	try:
		return stat.S_ISDIR(os.stat(path).st_mode)
	except:
		return False

#
# 出力ファイルオープン
#
def create_file(fname, mode, zip):
	path = path_dir(fname)
	fn = ''
	for p in path:
		fn += p
		if not isdir(fn):
			try:
				os.mkdir(fn)
			except:
				error("ディレクトリ %s を作れません。", fn)
	try:
		if zip:
			file = gzip.open(fname.encode("utf-8"), mode, 6)
		else:
			file = open(fname.encode("utf-8"), mode)
	except:
		error("ファイル %s を作れません。", fname)
	return file

#
# メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) < 2 \
	  or sys.argv[1] == '--help' \
	  or sys.argv[1] == '--version':
		usage()

	#
	# オプションの取得
	#
	mode, delete, zip = 'w', False, False
	try:
		opts = getopt(sys.argv[1:], "adz")
		for opt in opts[0]:
			if opt[0] == '-a':
				mode = 'a'
			elif opt[0] == '-d':
				delete = True
			else:
				zip = True
		if not opts[1]:
			usage()
		sys.argv = sys.argv[0:1] + opts[1]
	except:
		usage()

	#
	# ファイル名文字列の解析
	#
	fname = FileName(sys.argv[1])

	#
	# 入力ファイルオープン
	#
	file = open_file(2)

	#
	# メインループ
	#
	firstline=True
	ofn = ''
	for line in file:
		line=preproc_line(line)	# 入力行の前処理
		line = FieldLine(line)
		fn = fname.generate(line)
		if fn != ofn:
			if ofn:
				ofile = create_file(ofn, mode, zip)
				ofile.write(lines)
				ofile.flush()
				ofile.close()
			ofn = fn
			lines = ''
		if delete:
			lines += delkey(line, fname.delset()) + '\n'
		else:
			lines += line.getField(0) + '\n'

	if ofn:
		ofile = create_file(ofn, mode, zip)
		ofile.write(lines)
		ofile.flush()
		ofile.close()

	sys.exit(0)
