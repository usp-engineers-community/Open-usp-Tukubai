#!/usr/bin/env python
#coding: utf-8
#
# xmldir ディレクトリタグの絶対パスを指定して、XMLデータをフィールド
#        形式に変換する。（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Hinata Yanagi
#
# The MIT License
#
# Copyright (C) 2022 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import sys, codecs
import os.path
import xml.sax
import xml.sax.handler

_usage = "xmldir [-c<n>] /<DirTag1>/<DirTag2>/.../<DirTagN> <xmlfile>"
_version = "Sun Aug 28 11:35:26 JST 2022"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.7/UTF-8)"

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# Throw an error and terminate in failure.
#

def error(msg, *arg):
	print('Error[xmldir] :', msg % arg, file=sys.stderr)
	sys.exit(1)

#
# SAX handler class
#

class SAXHandler:
	def __init__(self):
		self.documentIndex = 0
		self.content = ''

	def setDocumentLocator(self, b):
		return

	def startDocument(self):
		self.path = []
		self.element_index = 1

	def startElement(self, name, attributes):
		if self.content != '':
			self.printSection()

		if len(self.path) == 1:
			self.documentIndex = 1 + self.documentIndex

		self.path.append(name)

		for name in attributes.getNames():
			if target_path == '/' + '/'.join(self.path[1:]) + '/@' + name:
				if sys.version_info >= (3, 0):
					sys.stdout.buffer.write(
						bytes(' '.join(self.path[1:]) + ' @' + name + " " +
						attributes.getValue(name).replace(' ', space_alternative) + "\n", encoding="utf-8"))
				else:
					print(' '.join(self.path[1:]) + ' @' + name, attributes.getValue(name).replace(' ', space_alternative))

		self.content = ''

	def endElement(self, name):
		if self.content != '':
			self.printSection()
			self.element_index = 1 + self.element_index

		self.path.pop()
		self.content = ''

	def printSection(self):
		if not (('/' + '/'.join(self.path[1:len(target_path)])) + '/').startswith(target_path + '/'):
			return

		if indices_padding == None:
			prefix = ''
		else:
			prefix = str(self.documentIndex).rjust(indices_padding, '0') + " " + \
					 str(self.element_index).rjust(indices_padding, '0') + " "

		if sys.version_info >= (3, 0):
			sys.stdout.buffer.write(
				bytes((prefix + ' '.join(self.path[1:])) + " " +
				self.content.replace(' ', space_alternative) + "\n", encoding="utf-8"))
		else:
			print((prefix + ' '.join(self.path[1:])), self.content.replace(' ', space_alternative))


	def characters(self, fragment):
		if len(self.path) == 1 or fragment.isspace(): return
		self.content += fragment

	def processingInstruction(self, content):
	 	return

	def endDocument(self):
		return
#
# main
#

if __name__ == '__main__':
	sys.stdout = codecs.getwriter('utf-8')(sys.stdout)

	# Print how to use the command
	if len(sys.argv) <= 1 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	indices_padding = None
	space_alternative = '_'

	while len(sys.argv) > 1:
		if sys.argv[1][:2] == '-c' and len(sys.argv[1]) > 2:
			indices_padding = int(sys.argv[1][2:])
			del sys.argv[1]
		elif sys.argv[1][:2] == '-s' and len(sys.argv[1]) > 2:
			space_alternative = sys.argv[1][2:]
			del sys.argv[1]
		elif len(sys.argv[1]) < 2 or sys.argv[1][0] != '-':
			break;
		else:
			print('An unknown option %s is specified.' % sys.argv[1][:2], file=sys.stderr)
			break

	target_path = sys.argv[1]

	if len(sys.argv) == 2 or sys.argv[2] == "-":
		input_file = sys.stdin
	else:
		input_file = open(sys.argv[2])

	xml.sax.parseString('<document>' + input_file.read() + '</document>', SAXHandler())

	# Exit
	sys.exit(0)

