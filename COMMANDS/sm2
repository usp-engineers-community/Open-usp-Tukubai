#!/usr/bin/env python
#coding: utf-8
#
# sm2 サムアップツール（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written  by Masatomo Togashi
#
# The MIT License
#
# Copyright (C) 2023 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

_usage = "sm2 [+count] <k1> <k2> <s1> <s2> [<file>]"
_version = "Mon Feb 20 01:49:00 JST 2023"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.6, 2.7, 3.6/UTF-8)"
_keypat = r'\d+|NF(-\d+)?$'

import re
import os
import sys
import unicodedata
from decimal import Decimal

# 濁音と半濁音のNFD表記でNFC表記もできるもの→NFDtoNFC変換でNFCに統一する
_comb_pat=r"(((う|か|き|く|け|こ|さ|し|す|せ|そ|た|ち|つ|て|と|は|ひ|ふ|へ|ほ|ウ|カ|キ|ク|ケ|コ|サ|シ|ス|セ|ソ|タ|チ|ツ|テ|ト|ハ|ヒ|フ|ヘ|ホ|ワ|ヰ|ヱ|ヲ)゙)|((は|ひ|ふ|へ|ほ|ハ|ヒ|フ|ヘ|ホ)゚))+"

def error(msg, *arg):
	print('Error[sm2] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

class FieldLine:
	def __init__(self, line, allow_z = False):
		self.__allow_zero = allow_z
		self.__fields = [ line ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getFieldNum(self, key):
		if type(key) == type(0):
			return key
		if re.match(r'\d+$', key):
			key = int(key)
		elif key == 'NF':
			key = self.size()
		else:
			key = self.size() - int(key[3:])
			if key <= 0:
				error("NF-x の x が大きすぎます。")
		if key < 0:
			error("フィールド番号が負です。")
		if key == 0 and not self.__allow_zero:
			error("フィールド番号が０です。")
		if key > self.size():
			error("フィールド番号が大きすぎます。")
		return key

	def getFieldNums(self,k1,k2,s1,s2):
		min_key = self.getFieldNum(k1)
		max_key = self.getFieldNum(k2)
		min_sum = self.getFieldNum(s1)
		max_sum = self.getFieldNum(s2)
		# キー位置範囲指定と集計位置範囲指定における0の使用について検査
		if min_sum * max_sum == 0 or (min_key * max_key == 0 and min_key + max_key != 0):
			error("キー位置範囲指定と集計位置範囲指定における0の使用に不正がありました。")
		# 降順を昇順化
		if min_key > max_key:
			min_key,max_key=max_key,min_key
		if min_sum > max_sum:
			min_sum,max_sum=max_sum,min_sum
		# キー位置範囲と集計位置範囲の交叉検査
		if max_key < min_sum or max_sum < min_key:	# 両群が交叉しない
			return min_key,max_key,min_sum,max_sum
		else:	# 両群が交叉する
			error("キー位置の範囲と集計位置の範囲に交叉がありました。")

	def getField(self, s, e = None):
		s = self.getFieldNum(s)
		if e == None:
			e = s
		else:
			e = self.getFieldNum(e)
		if s <= e:
			return ' '.join(self.__fields[s : e + 1])
		else:
			t = self.__fields[e : s + 1]
			t.reverse()
			return ' '.join(t)

#
# 入力ファイルオープン
#
def open_file(n):
	if n >= len(sys.argv):	filename = '-'
	else:
		filename = sys.argv[n]
	if filename == '-':	filename = '/dev/fd/0'	# sys.stdinをファイルディスクリプターで表記する
	if Python3():	mode='r'
	else:	mode='rU'	# Python2ではmodeがrUのときPython3と同様に読み込み時に各種改行記号がLF（\n）に統一される
	try:
		file = open(filename, mode)
	except:
		if filename=='/dev/fd/0':
			error("標準入力ファイルをオープンできません。")
		else:
			error("ファイル '%s' をオープンできません。", filename)
	return file

#
# 行の欄数検査
#   先頭行ではkeyの区間指定で絶対欄位置指定とNF相対欄位置指定が混在しているか検査する
#   先頭行以外では
#     絶対欄位置リストとNF相対欄位置絶対化リスト（区間の端がNF相対襴位置だったものも含む）の間に重複があるか検査する
#
def check_num_fields_variation(line):
	global	NF,key,sum,k1,k2,s1,s2,key_range_size,sum_range_size
	# abs_rel_cross キーの絶対欄位置によるリストとNF相対欄位置からの絶対化欄位置リストの間に重複があればTrue
	#               NF=5のときにキー指定が「1/4@NF-3/NF」となっているときなどにTrueとなる
	# abs_rel_cross_first=False 先頭行においてabs_rel_crossがTrueであればTrue

	start=False
	nf=line.size()
	if NF==-1:	start=True
	if nf != NF:	# 欄数が変化したかまたは先頭行なら
		NF=nf	# NFを更新
		k1,k2,s1,s2=line.getFieldNums(min_key_str,max_key_str,min_sum_str,max_sum_str)	# keyとsumの範囲を確定する
		if start:	# 先頭行なら合計を初期化しておく
			if not line:
				sys.exit(0)
			sum=[]
			for i in range(s1, s2 + 1):
				sum.append(getval(line, i))
			if (k1):
				key = NFDtoNFC(line.getField(k1, k2))	# キーフィールド値はNFC正規化する
			key_range_size=k2-k1+1
			sum_range_size=s2-s1+1
			return True	# 先頭行
		else:	# 先頭行以外で欄数変化があったら
			if (k2-k1+1 != key_range_size) or (s2-s1+1 != sum_range_size):	# keyの区間長またはsumの区間長が変化したらエラー
				error("欄数変化によってキー位置の区間長または集計位置の区間長が変化しました。")
	return False	# 非先頭行

# 不要な空白の削除関数
def rm_sp(line):
	return re.sub(r' {2,}',' ',re.sub(r'^ +| +$','',line))	# 行頭と行末の空白を削除し連続空白を単空白にする

# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip("\r\n")	# 改行記号としてCRLF('\r\n')/CR('\r')/LF('\n')のすべてに対応する

# BOMの取得関数
def get_BOM():
	if Python3():	return chr(int("FEFF",16))	# U+FEFFはBOMのUnicode符号位置
	else:			return "\xEF\xBB\xBF"	# BOMは「EF BB BF」の3バイト

# BOMの削除関数
def rm_BOM(line):
	global firstline
	if not firstline: return line
	firstline=False
	if line.startswith(get_BOM()):	line=line[len(get_BOM()):]	# 行頭にBOMがあったらBOMを削除する
	return line

# ファイル入力行の前処理
def preproc_line(line):
	line=rm_eol(line)	# 行末の改行記号を削除する
	line=rm_BOM(line)	# ファイル先頭行の行頭にBOMがあったらこれを削除する
	line=rm_sp(line)	# 行頭と行末の空白を削除し連続空白を単空白にする
	return line

# Python3か判定する
def Python3():
	if sys.version_info >= (3, 0):
		return True
	else:
		return False

#
# unicode 変換
#
def to_unicode(s):
	if type(s)==type(U""): return s	# 入力文字列がUnicode文字列のとき
	try:
		return unicode(s, 'utf_8')
	except:
		error("不当なマルチバイト文字が含まれています。")

#
# utf8 変換
#
def to_utf8(s):
	try:
		return s.encode('utf-8')
	except:
		error("内部エラー UTF8への変換に失敗しました。")

#
# NFDtoNFC()のre.sub()から指定patternがみつかるごとに呼ばれるのでNFD/NFC変換をして返す
# 置換対象パターンはNFD文字:全角ひらがな/全角カタカナの清音に結合用濁点/結合用半濁点を連接したもの
# 置換先文字はNFC文字:全角ひらがな/全角カタカナの濁音/半濁音
#
def replace(matchobj):
	if Python3():	return unicodedata.normalize('NFC',matchobj.group(0))
	else:	return to_utf8(unicodedata.normalize('NFC',to_unicode(matchobj.group(0))))	# Python2ではutf8→unicdoe→utf8の変換をする

#
# 全角ひらがな/全角カタカナの濁音/半濁音のNFC化
#
def NFDtoNFC(str):
	# 全角ひらがな/全角カタカナの濁音/半濁音をNFCで統一して返す
	return re.sub(pattern,replace,str)

#
# フィールド値の取得
#
def getval(line, n):
	try:
		return Decimal(line.getField(n))
	except:
		error("数値変換できません。文字列=%s",line.getField(n))

#
# メイン関数
#
if __name__ == '__main__':

	global	NF,key,sum,k1,k2,s1,s2,key_range_size,sum_range_size

	if len(sys.argv) < 5:
		usage()

	#
	# NFD文字（清音+結合用濁点/結合用半濁点）検出のための正規表現パターンを準備
	#
	pattern=re.compile(_comb_pat)

	#
	# +count
	#
	if sys.argv[1] == '+count':
		count = True
		del sys.argv[1]
		if len(sys.argv) < 5:
			usage()
	else:
		count = False

	#
	# key=<key>
	#
	min_key_str = sys.argv[1]
	max_key_str = sys.argv[2]
	min_sum_str = sys.argv[3]
	max_sum_str = sys.argv[4]
	p = re.compile(_keypat)
	if not (p.match(min_key_str) and p.match(max_key_str) and p.match(min_sum_str) and p.match(max_sum_str)):
		usage()

	file = open_file(5)

	#
	# メインループ
	#
	NF=-1
	cnt=1
	firstline=True
	for line in file:
		line=preproc_line(line)	# 入力行の前処理
		line = FieldLine(line, True)
		Top=check_num_fields_variation(line)	# 先頭行または欄数変化のあるときの処理
		if Top:	continue	# 先頭行での集計は済んでいる
		# keyが変化しないとき
		if k1 == 0 or NFDtoNFC(line.getField(k1, k2)) == key:	# キーフィールド値はNFC正規化する
			for i in range(s1, s2 + 1):
				sum[i-s1] += getval(line, i)
			cnt += 1
			continue
		# keyが変化したとき
		#  前のkeyに対する集計を出力
		print(key, end=' ')
		if count: print(cnt, end=' ')
		for i in range(s1, s2):
			print(sum[i-s1], end=' ')
		print(sum[s2-s1])
		#  新しいkeyについてsumを初期化
		for i in range(s1, s2 + 1):
			sum[i-s1] = getval(line, i)
		cnt = 1
		key = NFDtoNFC(line.getField(k1, k2))	# キーフィールド値はNFC正規化する

	if firstline:	# 入力ファイルが空
		sys.exit()

	#
	# 残り合計の出力
	#
	if k1 != 0: print(key, end=' ')
	if count: print(cnt, end=' ')
	for i in range(s1, s2):
		print(sum[i-s1], end=' ')
	print(sum[s2-s1])

	sys.exit(0)
