#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
	cat <<____USAGE 1>&2
Usage   : ${0##*/} [-<n>] <file1> <file2> ...
Version : Thu Oct 25 01:12:07 JST 2012
        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands/UTF-8)
____USAGE
	exit 1
}


# initialize
numoption=1
octed_filenames=''
use_stdin=0
tmpfiles=''
hexed_filelist=' '
LF=$(printf '\012_'); LF=${LF%_}


# parse arguments
mktemp_instead_of_stdin () {
	tmpfile=$(mktemp -t "${0##*/}.XXXXXXXX")
	if [ $? -eq 0 ]; then
		tmpfiles="$tmpfiles $tmpfile"
		trap "rm -f $tmpfiles; exit" EXIT HUP INT QUIT ALRM SEGV TERM
		cat > "$tmpfile"
	else
		echo "${0##*/} : Cannot create a temporary file" 1>&2
		exit 1
	fi
}
i=0
for arg in "$@"; do
	i=$((i+1))
	if [ $i -eq 1 ]; then
		echo "_$arg" | grep '^_-[0-9]\+$' > /dev/null
		if [ $? -eq 0 ]; then
			numoption=$(echo "_$arg" | sed 's/^_-//')
			continue
		fi
	fi
	if [ \( "_$arg" = '_-'               \) -o \
	     \( "_$arg" = '_/dev/stdin'      \) -o \
	     \( "_$arg" = '_/dev/fd/0'       \) -o \
	     \( "_$arg" = '_/proc/self/fd/0' \)    ]
	then
		[ $use_stdin -ne 0 ] && print_usage_and_exit
		use_stdin=1
		mktemp_instead_of_stdin
		file=$tmpfile
	elif [ \( -f "$arg" \) -o \( -c "$arg" \) ]; then
		str=$(echo -n "_$arg" | sed 's/^_//' | od -A n -t x1 | tr -d ' \n')
		if echo "$hexed_filelist" | grep -F " $str " > /dev/null; then
			retry=100
			while [ $retry -gt 0 ]; do
				retry=$((retry-1))
				tmpfile=$(mktemp -u -t "${0##*/}.XXXXXXXX")
				if [ $? -eq 0 ]; then
					ln -s "$arg" "$tmpfile" > /dev/null 2>&1
					[ $? -ne 0 ] && continue
					tmpfiles="$tmpfiles $tmpfile"
					trap "rm -f $tmpfiles; exit" EXIT HUP INT QUIT ALRM SEGV TERM
					break
				else
					echo "${0##*/}: Cannot create a temporary file" 1>&2
					exit 1
				fi
			done
			if [ $retry -eq 0 ]; then
				echo "${0##*/}: Failed to create a temporary file" 1>&2
				exit 1
			fi
			file=$tmpfile
		else
			hexed_filelist="$hexed_filelist$str "
			file=$arg
		fi
	else
		print_usage_and_exit
	fi
	if [ ! -r "$file" ]; then
		echo "${0##*/}: Cannot open the file \"$arg\"" 1>&2
		exit 1
	fi
	# transfer the characters to octet escaped strings to import to AWK safely
	octed_filenames="$octed_filenames $(echo -n "_$file" | od -A n -t o1 | tr -d '\n' | sed 's/^[[:blank:]]*137//' | sed 's/[[:blank:]]*$//' | sed 's/[[:blank:]]\{1,\}/\\/g')"
done
octed_filenames=${octed_filenames# }
if [ -z "$octed_filenames" ]; then
	use_stdin=1
	mktemp_instead_of_stdin
	octed_filenames=$(echo -n "_$tmpfile" | od -A n -t o1 | tr -d '\n' | sed 's/^[[:blank:]]*137//' | sed 's/[[:blank:]]*$//' | sed 's/[[:blank:]]\{1,\}/\\/g')
fi


# awkcode : get the length of the UTF-8 string (it is not a byte number)
awkcode_func_utf8strlen='
# strlen for UTF-8 (preparation : you must call this before using utf8strlen)
function utf8strlen_prep() {
	utf8strlen_80_1 = sprintf("\200");
	utf8strlen_C0_X = sprintf("\300");
	utf8strlen_E0_2 = sprintf("\340");
	utf8strlen_F0_3 = sprintf("\360");
	utf8strlen_F8_4 = sprintf("\370");
	utf8strlen_FC_5 = sprintf("\374");
	utf8strlen_FE_6 = sprintf("\376");
	utf8strlen_K_EF = sprintf("\357");
	utf8strlen_K_BD = sprintf("\275");
	utf8strlen_K_BE = sprintf("\276");
	utf8strlen_K_A0 = sprintf("\240");
	utf8strlen_K_C0 = sprintf("\300");
	utf8strlen_K_80 = sprintf("\200");
}

# strlen for UTF-8 (main)
function utf8strlen(str) {
	utf8strlen_ = 0;
	for (utf8strlen_i = 1; utf8strlen_i <= length(str); utf8strlen_i++) {
		utf8strlen_++;
		utf8strlen_letter=substr(str, utf8strlen_i, 1);
		if (utf8strlen_letter < utf8strlen_80_1) {
			continue;
		} else if (utf8strlen_letter < utf8strlen_C0_X) {
			utf8strlen_--;
			continue;
		} else if (utf8strlen_letter < utf8strlen_E0_2) {
			utf8strlen_i++;
		} else if (utf8strlen_letter < utf8strlen_F0_3) {
			if (utf8strlen_letter == utf8strlen_K_EF) {
				utf8strlen_letter2 = substr(str, utf8strlen_i+1, 1);
				if (utf8strlen_letter2 == utf8strlen_K_BD) {
					utf8strlen_letter3 = substr(str, utf8strlen_i+2, 1);
					if ((utf8strlen_letter3 >= utf8strlen_K_A0) &&
					    (utf8strlen_letter3 <  utf8strlen_K_C0)  ) {
						utf8strlen_--;
					}
				} else if (utf8strlen_letter2 == utf8strlen_K_BE) {
					utf8strlen_letter3 = substr(str, utf8strlen_i+2, 1);
					if ((utf8strlen_letter3 >= utf8strlen_K_80) &&
					    (utf8strlen_letter3 <  utf8strlen_K_A0)  ) {
						utf8strlen_--;
					}
				}
			}
			utf8strlen_i += 2;
		} else if (utf8strlen_letter < utf8strlen_F8_4) {
			utf8strlen_i += 3;
		} else if (utf8strlen_letter < utf8strlen_FC_5) {
			utf8strlen_i += 4;
		} else if (utf8strlen_letter < utf8strlen_FE_6) {
			utf8strlen_i += 5;
		} else {
			utf8strlen_--;
			continue;
		}
		utf8strlen_++;
	}
	return utf8strlen_;
}
'


# get the maximal widthes of the files
awkcode_main1_get_maxwidthes='
BEGIN {
	utf8strlen_prep();

	split(octed_filenames, octed_filename);
	for (i = 1; i <= length(octed_filename); i++) {
		filename[i] = sprintf(octed_filename[i]);
	}

	for (i = 1; i <= length(filename); i++) {
		maxwidth[i] = 0;
		while (getline str < filename[i]) {
			width = utf8strlen(str);
			if (width > maxwidth[i]) {
				maxwidth[i] = width;
			}
		}
		close(filename[i]);
	}

	str = "";
	for (i = 1; i <= length(maxwidth); i++) {
		str = str " " maxwidth[i];
	}
	print substr(str, 2, length(str) - 1);
}
'
max_widthes=$(awk -v "octed_filenames=$octed_filenames" "$awkcode_main1_get_maxwidthes$awkcode_func_utf8strlen")


# ycat
awkcode_main2_ycat='
BEGIN {
	utf8strlen_prep();

	split(octed_filenames, octed_filename);
	for (i = 1; i <= length(octed_filename); i++) {
		filename[i] = sprintf(octed_filename[i]);
	}

	split(max_widthes, max_width);

	margin = "";
	for (i = 0; i < numoption; i++) {
		margin = margin FS;
	}
	while (1) {
		line = "";
		validlines = 0;
		for (i = 1; i <= length(filename); i++) {
			if (length(filename[i])) {
				if (getline str < filename[i]) {
					validlines++;
				} else {
					close(filename[i]);
					filename[i] = "";
					str = "";
				}
			} else {
				str = "";
			}
			padding = "";
			j = max_width[i] - utf8strlen(str);
			if (j > 0) {
				padding = sprintf("%0" j "d", 0);
				gsub("0", " ", padding);
			}
			line = (i == 1) ? str padding : line margin str padding;
		}
		if (validlines) {
			print line;
			continue;
		}
		else {
			break;
		}
	}
}
'
if [ -z "$LC_ALL" ]; then
	LC_CTYPE=C;          export LC_CTYPE
else
	LANG=$LC_ALL;        export LANG
	LC_COLLATE=$LC_ALL;  export LC_COLLATE
	LC_MESSAGES=$LC_ALL; export LC_MESSAGES
	LC_NUMERIC=$LC_ALL;  export LC_NUMERIC
	LC_CTYPE=C;          export LC_CTYPE
	unset LC_ALL
fi
if [ -z "$tmpfiles" ]; then
	exec awk -v numoption=$numoption -v "octed_filenames=$octed_filenames" -v "max_widthes=$max_widthes" "$awkcode_main2_ycat$awkcode_func_utf8strlen"
else
	awk -v numoption=$numoption -v "octed_filenames=$octed_filenames" -v "max_widthes=$max_widthes" "$awkcode_main2_ycat$awkcode_func_utf8strlen"
fi
